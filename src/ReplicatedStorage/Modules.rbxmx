<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBX82347081d9bf4fa68afde63ac9abf987">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<string name="Name">Modules</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBX87b4ae6e6f3c435b9b1515ae09ab864a">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Bezier</string>
				<string name="ScriptGuid">{BB4764EC-1630-457C-8E3F-669131BBC24A}</string>
				<ProtectedString name="Source"><![CDATA[-- created by bhristt (october 15 2021)
-- bezier module for easy creation of bezier curves
-- updated (october 25 2021)
--!nocheck


-- types
export type BezierPoint = {
	Type: string;
	Point: Vector3 | BasePart;
}


-- bezier class
local Bezier = {}
Bezier.__index = Bezier


-- berenstein polynomial (used in position and derivative functions)
function B(n: number, i: number, t: number)

	-- factorial function
	local function fact(n: number): number
		if n == 0 then
			return 1
		else
			return n * fact(n - 1)
		end
	end

	-- return
	return (fact(n) / (fact(i) * fact(n - i))) * t^(i) * (1 - t)^(n - i)
end


-- the constructor
-- creates a new Bezier object with the given points added in order
function Bezier.new(...: Vector3 | BasePart)
	local self = setmetatable({}, Bezier)
	local args = {...}
	
	-- holds the points
	self.Points = {}
	
	-- length information
	self.LengthIterations = 1000
	self.LengthIndeces = {}
	self.Length = 0
	
	-- holds the connections from baseparts
	self._connections = {}
	
	-- iterate through given arguments
	for _, p in pairs(args) do
		if typeof(p) == "Vector3" or (typeof(p) == "Instance" and p:IsA("BasePart")) then
			self:AddBezierPoint(p)
		else
			error("The Bezier.new() constructor only takes in Vector3s and BaseParts as inputs!")
		end
	end
	
	-- returns the bezier object
	return self
end


-- adds a BezierPoint to the Bezier
-- a BezierPoint can either be a Vector3 or a BasePart
-- a Vector3 BezierPoint is static, while a BasePart BezierPoint changes if the BasePart's position changes
function Bezier:AddBezierPoint(p: Vector3 | BasePart, index: number?)
	
	-- check if given value is a Vector3 or BasePart
	if p and (typeof(p) == "Instance" and p:IsA("BasePart")) or typeof(p) == "Vector3" then
		local newPoint: BezierPoint = {
			Type = typeof(p) == "Vector3" and "StaicPoint" or "BasePartPoint";
			Point = p;
		}
		
		-- if point is a BasePartPoint, then watch for removal and changes
		if newPoint.Type == "BasePartPoint" then
			local connection, connection2
			
			-- changed connection
			connection = (p:: BasePart).Changed:Connect(function(prop)
				if prop == "Position" then
					self:UpdateLength()
				end
			end)
			
			-- deleted connection
			connection2 = (p:: BasePart).AncestryChanged:Connect(function(_, parent)
				if parent == nil then
					local index = table.find(self.Points, newPoint)
					if index then
						table.remove(self.Points, index)
					end
					connection:Disconnect()
					connection:Disconnect()
				end
			end)
			
			-- check if there is a connection table for the basepart
			if not self._connections[p] then
				self._connections[p] = {}
			end
			
			-- add connections to connection table
			table.insert(self._connections[p], connection)
			table.insert(self._connections[p], connection2)
		end
		
		-- add to list of points
		if index and type(index) == "number" then
			
			-- found index, add at index
			table.insert(self.Points, index, newPoint)
		elseif not index then
			
			-- did not find index, add to end of table
			table.insert(self.Points, newPoint)
		elseif type(index) ~= "number" then
			
			-- incorrect type
			error("Bezier:AddBezierPoint() only accepts an integer as the second argument!")
		end
		
		-- update bezier
		self:UpdateLength()
	else
		error("Bezier:AddBezierPoint() only accepts a Vector3 or BasePart as the first argument!")
	end
end


-- changes a BezierPoint in the Bezier
-- only works if the BezierPoint exists in the Bezier
function Bezier:ChangeBezierPoint(index: number, p: Vector3 | BasePart)
	
	-- check that index is a number
	if type(index) ~= "number" then
		error("Bezier:ChangeBezierPoint() only accepts a number index as the first argument!")
	end
	
	-- check if given value is a Vector3 or BasePart
	if p and (typeof(p) == "Instance" and p:IsA("BasePart")) or typeof(p) == "Vector3" then
		
		-- check if the bezier point exists
		local BezierPoint = self.Points[index]
		if BezierPoint then
			
			-- check type of point and add to bezier
			BezierPoint.Type = typeof(p) == "Vector3" and "StaicPoint" or "BasePartPoint";
			BezierPoint.Point = p
			
			-- update bezier
			self:UpdateLength()
		else
			
			-- bezier point does not exist
			error("Did not find BezierPoint at index " .. tostring(index))
		end
	else
		
		-- incorrect type
		error("Bezier:ChangeBezierPoint() only accepts a Vector3 or BasePart as the second argument!")
	end
end


-- returns a table with vector3 control points of the Bezier
function Bezier:GetAllPoints(): {Vector3}
	
	-- declarations
	local points = self.Points
	local numPoints = #points
	local v3Points = {}
	
	-- iterate through points
	for i = 1, numPoints do
		table.insert(v3Points, self:GetPoint(i))
	end
	
	-- return list of points
	return v3Points
end


-- gets the BezierPoint of the Bezier at the index
function Bezier:GetPoint(i: number): Vector3?

	-- checks for type
	local points = self.Points
	if points[i] then
		return typeof(points[i].Point) == "Vector3" and points[i].Point or points[i].Point.Position
	else
		error("Did not find a BezierPoint at index " .. tostring(i) .. "!")
	end
end


-- removes a BezierPoint from the Bezier
function Bezier:RemoveBezierPoint(index: number)
	
	-- check if the point exists
	if self.Points[index] then
		
		-- remove point and remove connections
		local point = table.remove(self.Points, index)
		if typeof(point.Point) == "Instance" and point.Point:IsA("BasePart") then
			for i, connection in pairs(self._connections[point.Point]) do
				if connection.Connected then
					connection:Disconnect()
				end
			end
			self._connections[point.Point] = nil
		end
		
		-- update bezier
		self:UpdateLength()
	end
end


-- updates length of the Bezier
function Bezier:UpdateLength()
	-- important values
	local points = self:GetAllPoints()
	local iterations = self.LengthIterations

	-- check if points is less than 2 (need at least 2 points to calculate length)
	if #points < 2 then
		return 0, {{0, 0, 0}, {0, 0, 0}}
	end

	-- start iteration
	local l = 0
	local sums = {}
	for i = 1, iterations do
		local dldt = self:CalculateDerivativeAt((i - 1) / (iterations - 1))
		l += dldt.Magnitude * (1 / iterations)
		table.insert(sums, {((i - 1) / (iterations - 1)), l, dldt})
	end

	-- return length and sum table
	self.Length, self.LengthIndeces = l, sums
end


-- returns the Vector3 point at the given t value (t must be between 0 and 1 to return an excpected value)
-- does not work if the bezier does not have any points attached to it
function Bezier:CalculatePositionAt(t: number): Vector3
	
	-- check if t is between 0 and 1
	if type(t) ~= "number" then
		error("Bezier:CalculatePositionAt() only accepts a number, got " .. tostring(t) .. "!")
	end

	-- start algorithm to calculate position in bezier
	local points = self.Points
	local numPoints = #points
	
	-- check if there is at least 1 point
	if numPoints > 0 then
		
		-- important values
		local points = self:GetAllPoints()
		local n = #points
		
		-- get position at t
		local c_t do
			c_t = Vector3.new()
			for i = 1, n do
				local p_i = points[i]
				local B_nit = B(n - 1, i - 1, t)
				c_t += B_nit * p_i
			end
		end
		
		-- return position
		return c_t
	else
		
		-- not enough points to get position
		error("Bezier:CalculatePositionAt() only works if there is at least 1 BezierPoint!")
	end
end


-- returns the Vector3 point at the given t value, where t is relative to the length of the Bezier curve
-- does not work if the bezier does not have any points attached to it
function Bezier:CalculatePositionRelativeToLength(t: number): Vector3
	
	-- check if t is a number between 0 and 1
	if type(t) ~= "number" then
		error("Bezier:CalculatePositionRelativeToLength() only accepts a number, got " .. tostring(t) .. "!")
	end
	
	-- start algorithm to calculate position in bezier
	local points = self.Points
	local numPoints = #points
	
	-- check if there is at least 1 point
	if numPoints > 0 then
		
		-- important values
		local length = self.Length
		local lengthIndeces = self.LengthIndeces
		local iterations = self.LengthIterations
		local points = self:GetAllPoints()
		
		-- check if there is more than 1 point
		if #points > 1 then
			
			-- get length of bezier
			local targetLength = length * t
			
			-- iterate through sum table
			local nearestParameterIndex, nearestParameter
			for i, orderedPair in ipairs(lengthIndeces) do
				if targetLength - orderedPair[2] <= 0 then
					nearestParameterIndex = i
					nearestParameter = orderedPair
					break
				elseif i == #lengthIndeces then
					nearestParameterIndex = i
					nearestParameter = orderedPair
					break
				end
			end
			
			-- calculate percent error
			local p0, p1
			if lengthIndeces[nearestParameterIndex - 1] then
				p0, p1 = self:CalculatePositionAt(lengthIndeces[nearestParameterIndex - 1][1]), self:CalculatePositionAt(nearestParameter[1])
			else
				p0, p1 = self:CalculatePositionAt(nearestParameter[1]), self:CalculatePositionAt(lengthIndeces[nearestParameterIndex + 1][1])
			end
			local percentError = (nearestParameter[2] - targetLength) / (p1 - p0).Magnitude
			
			-- return the position at the nearestParameter
			return p0 + (p1 - p0) * (1 - percentError)
		else
			
			-- return only position
			return self:CalculatePositionAt(0)
		end
	else
		
		-- not enough points to get a position
		error("Bezier:CalculatePositionRelativeToLength() only works if there is at least 1 BezierPoint!")
	end
end


-- returns the tangent vector in the direction of the path made by the bezier at t
-- in order to get a derivative of a Bezier, you need at least 2 points in the Bezier
function Bezier:CalculateDerivativeAt(t: number): Vector3?
	
	-- check if t is between 0 and 1
	if type(t) ~= "number" then
		error("Bezier:CalculateDerivativeAt() only accepts a number, got " .. tostring(t) .. "!")
	end
	
	-- start algorithm to calculate bezier derivative
	local points = self.Points
	local numPoints = #points
	
	-- check if there are at least 2 points
	if numPoints > 1 then
		
		-- important values
		local points = self:GetAllPoints()
		local n = #points
		local m = n - 1
		
		-- calculate derivative at t
		local cPrime_t do
			cPrime_t = Vector3.new()
			for i = 1, n - 1 do
				local p_i1, p_i = points[i + 1], points[i]
				local Q_i = (n - 1) * (p_i1 - p_i)
				local B_mit = B(n - 2, i - 1, t)
				cPrime_t += B_mit * Q_i
			end
		end
		
		-- return derivative
		return cPrime_t
	else 
		
		-- not enough points
		error("Bezier:CalculateDerivativeAt() only works if there are at least 2 BezierPoints!")
	end
end


-- returns the tangent vector in the direction of the path made by the bezier at t (where t is relative to the length of the Bezier Curve)
-- does not work if the bezier does not have at least 2 points
-- the given t value must be between 0 and 1
function Bezier:CalculateDerivativeRelativeToLength(t: number): Vector3
	
	-- check if t is a number between 0 and 1
	if type(t) ~= "number" then
		error("Bezier:CalculateDerivativeRelativeToLength() only accepts a number, got " .. tostring(t) .. "!")
	end
	
	-- start algorithm to calculate derivative in bezier
	local points = self.Points
	local numPoints = #points
	
	-- check if there are at least 2 points
	if numPoints > 1 then
		
		-- important values
		local length = self.Length
		local lengthIndeces = self.LengthIndeces
		local iterations = self.LengthIterations
		local points = self:GetAllPoints()

		-- get length of bezier
		local targetLength = length * t

		-- iterate through sum table
		local nearestParameterIndex, nearestParameter
		for i, orderedPair in ipairs(lengthIndeces) do
			if targetLength - orderedPair[2] <= 0 then
				nearestParameterIndex = i
				nearestParameter = orderedPair
				break
			elseif i == #lengthIndeces then
				nearestParameterIndex = i
				nearestParameter = orderedPair
				break
			end
		end

		-- calculate percent error
		local d0, d1
		if lengthIndeces[nearestParameterIndex - 1] then
			d0, d1 = self:CalculateDerivativeAt(lengthIndeces[nearestParameterIndex - 1][1]), self:CalculateDerivativeAt(nearestParameter[1])
		else
			d0, d1 = self:CalculateDerivativeAt(nearestParameter[1]), self:CalculateDerivativeAt(lengthIndeces[nearestParameterIndex + 1][1])
		end
		local percentError = (nearestParameter[2] - targetLength) / (d1 - d0).Magnitude

		-- return the derivative at the nearestParameter
		return d0 + (d1 - d0) * (1 - percentError)
	else
		
		-- not enough points to calculate derivative
		error("Bezier:CalculateDerivativeRelativeToLength() only works if there are at least 2 BezierPoints!")
	end
end


-- tweens a given object in the path made by the Bezier (position only)
-- works for any object that has the properties given by the property table
function Bezier:CreateVector3Tween(object: Instance | {[any]: any}, propertyTable: {any}, bezierTweenInfo: TweenInfo, RelativeToLength: boolean?): Tween
	
	-- check if there are enough points to calculate a position within the Bezier
	if #self.Points == 0 then
		error("Bezier:CreateVector3Tween() only works if there is at least 1 BezierPoint in the Bezier!")
	end
	
	-- check if the object given is a valid object
	if typeof(object) ~= "Instance" and typeof(object) ~= "table" then
		error("Bezier:CreateVector3Tween() requires an Instance or a table as the first argument!")
	end
	
	-- check if the bezierTweenInfo given is a TweenInfo object
	if not (typeof(bezierTweenInfo) == "TweenInfo") then
		error("Bezier:CreateVector3Tween() requires a TweenInfo object as the third argument!")
	end
	
	-- check if the object given has the vector3 properties given
	local success, foundProperties = pcall(function()
		local foundProperties = true
		for _, propertyName in pairs(propertyTable) do
			if typeof(object[propertyName]) ~= "Vector3" and typeof(object[propertyName]) ~= "nil" then
				foundProperties = false
				break
			end
		end
		return foundProperties
	end)
	
	-- check if the properties were found
	if success and foundProperties then
		local tweenService = game:GetService("TweenService")
		local numValue = Instance.new("NumberValue")
		local tween = tweenService:Create(numValue, bezierTweenInfo, {Value = 1})
		local numValueChangedConnection
		tween.Changed:Connect(function(prop)
			if prop == "PlaybackState" then
				local playbackState = tween.PlaybackState
				if playbackState == Enum.PlaybackState.Playing then
					numValueChangedConnection = numValue.Changed:Connect(function(t)
						for _, propName in pairs(propertyTable) do
							object[propName] = RelativeToLength and self:CalculatePositionRelativeToLength(t) or self:CalculatePositionAt(t)
						end
					end)
				else
					if numValueChangedConnection then
						numValueChangedConnection:Disconnect()
						numValueChangedConnection = nil
					end
				end
			end
		end)
		return tween
	else
		error("Bezier:CreateVector3Tween() requires a matching property table with Vector3 or nil property names for the object as the second argument!")
	end
end


-- tweens a given object in the path made by the Bezier (cframe version)
-- works for any object that has the properties given by the property table
function Bezier:CreateCFrameTween(object: Instance | {[any]: any}, propertyTable: {any}, bezierTweenInfo: TweenInfo, RelativeToLength: boolean?): Tween
	
	-- check if there are enough points to calculate a cframe within the Bezier
	if #self.Points <= 1 then
		error("Bezier:CreateVector3Tween() only works if there are at least 2 BezierPoints in the Bezier!")
	end

	-- check if the object given is a valid object
	if typeof(object) ~= "Instance" and typeof(object) ~= "table" then
		error("Bezier:CreateCFrameTween() requires an Instance or a table as the first argument!")
	end

	-- check if the bezierTweenInfo given is a TweenInfo object
	if not (typeof(bezierTweenInfo) == "TweenInfo") then
		error("Bezier:CreateCFrameTween() requires a TweenInfo object as the third argument!")
	end

	-- check if the object given has the CFrame properties given
	local success, foundProperties = pcall(function()
		local foundProperties = true
		for _, propertyName in pairs(propertyTable) do
			if typeof(object[propertyName]) ~= "CFrame" and typeof(object[propertyName]) ~= "nil" then
				foundProperties = false
				break
			end
		end
		return foundProperties
	end)

	-- check if the properties were found
	if success and foundProperties then
		local tweenService = game:GetService("TweenService")
		local numValue = Instance.new("NumberValue")
		local tween = tweenService:Create(numValue, bezierTweenInfo, {Value = 1})
		local numValueChangedConnection
		tween.Changed:Connect(function(prop)
			if prop == "PlaybackState" then
				local playbackState = tween.PlaybackState
				if playbackState == Enum.PlaybackState.Playing then
					numValueChangedConnection = numValue.Changed:Connect(function(t)
						for _, propName in pairs(propertyTable) do
							local position = RelativeToLength and self:CalculatePositionRelativeToLength(t) or self:CalculatePositionAt(t)
							local derivative = RelativeToLength and self:CalculateDerivativeRelativeToLength(t) or self:CalculateDerivativeAt(t)
							object[propName] = CFrame.new(position, position + derivative)
						end
					end)
				else
					if numValueChangedConnection then
						numValueChangedConnection:Disconnect()
						numValueChangedConnection = nil
					end
				end
			end
		end)
		return tween
	else
		error("Bezier:CreateCFrameTween() requires a matching property table with CFrame or nil property names for the object as the second argument!")
	end
end


-- return
return Bezier]]></ProtectedString>
				<int64 name="SourceAssetId">7747728449</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBXc53c0ff4bd74496584e852f77f27fd6f">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">BezierTweens</string>
				<string name="ScriptGuid">{1DCB1118-6C47-42AF-ACBC-C21BA35C003C}</string>
				<ProtectedString name="Source"><![CDATA[--!strict
-- Laserluzer 
-- September 17, 2021
-- Sean was in my code
local Bezier = {}
Bezier.__index = Bezier

--// Constants \\--

Bezier.Waypoints = require(script.Waypoints)
local Signal = require(script.Signal)
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

--// Types \\--

export type BezierTweenInfo = {
	Waypoints : Waypoints,
	EasingStyle : Enum.EasingStyle,
	EasingDirection : Enum.EasingStyle,
	Time : number,
}

export type Waypoints = {
	[number] : Vector3
}

--// Math functions \\--

--@recursive
local function factorial(n : number) : number
	if n == 0 then return 1 end
	return n * factorial(n - 1)
end

local function binomial(n : number, i : number) : number
	local x : number = nil
	x = (factorial(n)) / 
		(factorial(n - i) * factorial(i))
	return x
end

--// Graphing functions \\--

local function graphPoint(t : number, ... : Vector3) : Vector3
	assert(t >= 0 and t <= 1, t .. "t is not between 0 and 1.")
	local points = {...}
	local n : number = #points - 1
	local p : Vector3 = nil
	for i = 0, n do
		local x = binomial(n,i)*(1 - t)^(n-i) * t^i * points[i+1] 
		p = p and p + x or x
	end
	return p
end

--// Main \\--

function Bezier.Create(instance : Instance, Info : BezierTweenInfo) -- Creates a new bezier curve tween
	local self = setmetatable({}, Bezier)
	
	assert(#Info.Waypoints > 1, "Bezier curve must have atleast 2 waypoints.")
	assert(Info.EasingStyle ~= Enum.EasingStyle.Elastic, "Elastic easing style not supported.")
	assert(Info.EasingStyle ~= Enum.EasingStyle.Back, "Back easing style not supported.")

	-- User variables
	self.Instance = instance
	self.PlaybackState = Enum.PlaybackState.Begin
	self.TweenInfo = Info

	-- Events
	self.Played = Signal.new()
	self.Completed = Signal.new()
	self.Cancelled = Signal.new()
	self.Ended = Signal.new()
	self.Paused = Signal.new()
	self.Resumed = Signal.new()

	-- Private variables
	self._time = 0
	self._style = Info.EasingStyle or Enum.EasingStyle.Linear
	self._direction = Info.EasingDirection or Enum.EasingDirection.In

	return self
end

function Bezier:Play() -- Plays bezier curve tween
	assert(not (self.PlaybackState == Enum.PlaybackState.Playing), "Tween is already playing.")
	assert(not (self.PlaybackState == Enum.PlaybackState.Cancelled), "Tween is cancelled.")

	self.Played:Fire()
	self.PlaybackState = Enum.PlaybackState.Playing
	task.spawn(function()
		local x : number = self.TweenInfo.Time
		
		while self._time < 1 do
			if not (self.PlaybackState == Enum.PlaybackState.Playing) then return end
			local alpha = TweenService:GetValue(self._time, self._style, self._direction)

			self.Instance.Position = graphPoint(alpha, unpack(self.TweenInfo.Waypoints))
			
			self._time += 1 / (60 * self.TweenInfo.Time)
			RunService.Heartbeat:Wait()
		end

		self.PlaybackState = Enum.PlaybackState.Completed
		self.Completed:Fire()
		self.Ended:Fire()
		return "Completed"
	end)
end

function Bezier:Pause() -- Paused running tween
	if not (self.PlaybackState == Enum.PlaybackState.Paused) then
		self.PlaybackState = Enum.PlaybackState.Paused
		self.Paused:Fire()
	end
end

function Bezier:Resume() -- Resumes paused tween
	if self.PlaybackState == Enum.PlaybackState.Paused then
		self:Play()
		self.Resumed:Fire()
	end
end

function Bezier:Cancel() -- Destroys tween
	if not (self.PlaybackState == Enum.PlaybackState.Cancelled) then
		self.PlaybackState = Enum.PlaybackState.Cancelled
		self.Cancelled:Fire()
		self.Ended:Fire()
	end
end

return Bezier]]></ProtectedString>
				<int64 name="SourceAssetId">7499322116</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX0d252038f5f344e095a7a7906c600aad">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Waypoints</string>
					<string name="ScriptGuid">{64DD6ADA-2C60-42A3-8ECC-5FFCC30E665E}</string>
					<ProtectedString name="Source"><![CDATA[--!strict
-- Laserluzer 
-- September 17, 2021

local RunService = game:GetService("RunService")

export type Waypoints = {
	[number] : Vector3
}

-- Waypoints

local Waypoints = {}


-- Value specific waypoint methods

do
	function Waypoints.fromVector3(... : Vector3) : Waypoints
		local args = {...}
		local waypoints = {}
		for i = 1, #args do
			assert(typeof(args[i]) == "Vector3", tostring(args[i]) .. "is not a Vector3 value.")
			table.insert(waypoints, args[i])
		end
		return waypoints
	end

	function Waypoints.fromCFrame(...) : Waypoints
		local args = {...}
		local waypoints = {}
		for i = 1, #args do
			assert(typeof(args[i]) == "CFrame", args[i] .. "is not a CFrame value.")
			table.insert(waypoints, args[i].Position)
		end
		return waypoints
	end

	function Waypoints.fromInstance(...) : Waypoints
		local args = {...}
		local waypoints = {}
		for i = 1, #args do
			assert(typeof(args[i]) == "Instance", args[i].Name .. "is not an Instance.")
			assert(args[i]:IsA("BasePart"), args[i].Name .. "is not a BasePart.")
			table.insert(waypoints, args[i].Position)
		end
		return waypoints
	end
end


local waypointTypes = {
	Vector3 = Waypoints.fromVector3,
	CFrame = Waypoints.fromCFrame,
	Instance = Waypoints.fromInstance
}

function Waypoints.new(... : Vector3 | CFrame | Instance) : Waypoints -- Creates waypoints
	assert(waypointTypes[typeof(...)], 
		"Parameters are not correct value types, try using value specific functions.")
	return waypointTypes[typeof(...)](...)
end



return Waypoints]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX7b01c3fd33e441e78b6243d4fbc3ff13">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Signal</string>
					<string name="ScriptGuid">{B50947CB-A13A-427A-A9A9-EC81C1D1222E}</string>
					<ProtectedString name="Source"><![CDATA[local freeRunnerThread

local function acquireRunnerThreadAndCallEventHandler(func, ...)
    local acquiredRunnerThread = freeRunnerThread
	freeRunnerThread = nil
	func(...)
	freeRunnerThread = acquiredRunnerThread
end

-- Connection class

local Connection = {}
Connection.__index = Connection

function Connection.new(signal, fn)
	return setmetatable({
		_connected = true,
		_signal = signal,
		_fn = fn,
		_next = false,
	}, Connection)
end

function Connection:Disconnect()
	assert(self._connected, "Connection already disconnected.")
	self._connected = false

	if self._signal._handlerListHead == self then
		self._signal._handlerListHead = self._next
	else
		local prev = self._signal._handlerListHead
		while prev and prev._next ~= self do
			prev = prev._next
		end
		if prev then
			prev._next = self._next
		end
	end
end

-- Signal class

local Signal = {}
Signal.__index = Signal

function Signal.new()
	return setmetatable({_handlerListHead = false}, Signal)
end

function Signal:Connect(fn)
	local connection = Connection.new(self, fn)
	connection._next = (self._handlerListHead and self._handlerListHead) or connection._next
	self._handlerListHead = connection
	return connection
end

function Signal:Fire(...)
	local item = self._handlerListHead
	while item do
		if item._connected then
			if not freeRunnerThread then
				freeRunnerThread = coroutine.create(function(...)
					acquireRunnerThreadAndCallEventHandler(...)
					while true do
						acquireRunnerThreadAndCallEventHandler(coroutine.yield())
					end
				end)
			end
			task.spawn(freeRunnerThread, item._fn, ...)
		end
		item = item._next
	end
end

function Signal:Wait()
	local waitingcoroutine = coroutine.running()
	local connect;
	connect = self:Connect(function(...)
		connect:Disconnect()
		task.spawn(waitingcoroutine, ...)
	end)
	return coroutine.yield()
end

return Signal]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXeabcd6cd476f43eb9b952c77da19d862">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">BoatTween</string>
				<string name="ScriptGuid">{A12B55F1-B6D8-45DE-9E60-D6F33CEB820C}</string>
				<ProtectedString name="Source"><![CDATA[--[==[
	BoatTween (because TweenService2 was taken)
	by boatbomber (Zack Ovits)
	© 2020
	API:
	function BoatTween:Create(Object,Data)
		returns a Tween object
		Params:
		- Object
		The instance that is having it's properties tweened
		- Data
		A dictionary of the various settings of the tween
		{
			number Time = Any positive number
				How long the tween should take to complete
			string EasingStyle = Any TweenStyle from the list below
				The style that the tween follows
				(Note: Uses strings instead of Enum.EasingStyle to allow us to add styles that Roblox doesn't support)
				List of available styles:
					Linear				Quad					Cubic
					Quart				Quint					Sine
					Expo				Circ					Elastic
					Back				Bounce					Smooth
					Smoother			RidiculousWiggle		RevBack
					Spring				SoftSpring				Standard
					Sharp				Acceleration			Deceleration
					StandardProductive	EntranceProductive		ExitProductive
					StandardExpressive	EntranceExpressive		ExitExpressive
					FabricStandard		FabricAccelerate		FabricDecelerate
					UWPAccelerate		MozillaCurve
			string EasingDirection = "In" or "Out" or "InOut" or "OutIn"
				The direction for the TweenStyle to adhere to
			number DelayTime = 0 -> math.huge
				The amount of time before the tween begins playback after calling :Play() on the tween
				(Note: doesn't affect :Resume() calls)
			number RepeatCount = -1 -> math.huge
				How many times the tween should repeat with -1 being infinity
				(Note: will wait the DelayTime in between replaying)
			boolean Reverses = false or true
				Whether the tween should reverse itself after completion
				(note: Waits the DelayTime before reversing)
			table Goal = dictionary
				A dictionary where the keys are properties to tween and the values are the end goals of said properties
				You may tween any property with value of the following types:
					number				boolean					CFrame
					Color3				UDim2					UDim
					Ray					NumberRange				NumberSequenceKeypoint
					PhysicalProperties	NumberSequence			Region3
					Rect				Vector2					Vector3
			string StepType = "Stepped" or "Heartbeat" or "RenderStepped"
				The event of RunService for the tween to move on
		}
	function Tween:Play()
		Plays the tween, starting from the beginning
	function Tween:Stop()
		Stops the tween, freezing it in its current state
	function Tween:Resume()
		Plays the tween, starting from current position and time
	function TweenObject:Destroy()
		Clears connections, stops playback, destroys objects
	property Tween.Instance
		The object being tweened
	property Tween.PlaybackState
		An Enum.PlaybackState representing the Tween's current state
	event Tween.Stopped
		Fired when a Tween ends from the :Stop() function
	event Tween.Completed
		Fired when a Tween ends due to :Play() being completed
	event Tween.Resumed
		Fired when a Tween is played through the :Resume() function
--]==]

local RunService = game:GetService("RunService")
local RawTweenFunctions = require(script.TweenFunctions)
local TypeLerpers = require(script.Lerps)
local Heartbeat = RunService.Heartbeat

local BoatTween = {}

local ValidStepTypes = {
	["Heartbeat"] = true;
	["Stepped"] = true;
	["RenderStepped"] = true;
}

if not RunService:IsClient() then
	ValidStepTypes.RenderStepped = nil
end

local TweenFunctions = {
	FabricAccelerate = {
		In = RawTweenFunctions.InFabricAccelerate;
		Out = RawTweenFunctions.OutFabricAccelerate;
		InOut = RawTweenFunctions.InOutFabricAccelerate;
		OutIn = RawTweenFunctions.OutInFabricAccelerate;
	};

	UWPAccelerate = {
		In = RawTweenFunctions.InUWPAccelerate;
		Out = RawTweenFunctions.OutUWPAccelerate;
		InOut = RawTweenFunctions.InOutUWPAccelerate;
		OutIn = RawTweenFunctions.OutInUWPAccelerate;
	};

	Circ = {
		In = RawTweenFunctions.InCirc;
		Out = RawTweenFunctions.OutCirc;
		InOut = RawTweenFunctions.InOutCirc;
		OutIn = RawTweenFunctions.OutInCirc;
	};

	RevBack = {
		In = RawTweenFunctions.InRevBack;
		Out = RawTweenFunctions.OutRevBack;
		InOut = RawTweenFunctions.InOutRevBack;
		OutIn = RawTweenFunctions.OutInRevBack;
	};

	Spring = {
		In = RawTweenFunctions.InSpring;
		Out = RawTweenFunctions.OutSpring;
		InOut = RawTweenFunctions.InOutSpring;
		OutIn = RawTweenFunctions.OutInSpring;
	};

	Standard = {
		In = RawTweenFunctions.InStandard;
		Out = RawTweenFunctions.OutStandard;
		InOut = RawTweenFunctions.InOutStandard;
		OutIn = RawTweenFunctions.OutInStandard;
	};

	StandardExpressive = {
		In = RawTweenFunctions.InStandardExpressive;
		Out = RawTweenFunctions.OutStandardExpressive;
		InOut = RawTweenFunctions.InOutStandardExpressive;
		OutIn = RawTweenFunctions.OutInStandardExpressive;
	};

	Linear = {
		In = RawTweenFunctions.InLinear;
		Out = RawTweenFunctions.OutLinear;
		InOut = RawTweenFunctions.InOutLinear;
		OutIn = RawTweenFunctions.OutInLinear;
	};

	ExitProductive = {
		In = RawTweenFunctions.InExitProductive;
		Out = RawTweenFunctions.OutExitProductive;
		InOut = RawTweenFunctions.InOutExitProductive;
		OutIn = RawTweenFunctions.OutInExitProductive;
	};

	Deceleration = {
		In = RawTweenFunctions.InDeceleration;
		Out = RawTweenFunctions.OutDeceleration;
		InOut = RawTweenFunctions.InOutDeceleration;
		OutIn = RawTweenFunctions.OutInDeceleration;
	};

	Smoother = {
		In = RawTweenFunctions.InSmoother;
		Out = RawTweenFunctions.OutSmoother;
		InOut = RawTweenFunctions.InOutSmoother;
		OutIn = RawTweenFunctions.OutInSmoother;
	};

	FabricStandard = {
		In = RawTweenFunctions.InFabricStandard;
		Out = RawTweenFunctions.OutFabricStandard;
		InOut = RawTweenFunctions.InOutFabricStandard;
		OutIn = RawTweenFunctions.OutInFabricStandard;
	};

	RidiculousWiggle = {
		In = RawTweenFunctions.InRidiculousWiggle;
		Out = RawTweenFunctions.OutRidiculousWiggle;
		InOut = RawTweenFunctions.InOutRidiculousWiggle;
		OutIn = RawTweenFunctions.OutInRidiculousWiggle;
	};

	MozillaCurve = {
		In = RawTweenFunctions.InMozillaCurve;
		Out = RawTweenFunctions.OutMozillaCurve;
		InOut = RawTweenFunctions.InOutMozillaCurve;
		OutIn = RawTweenFunctions.OutInMozillaCurve;
	};

	Expo = {
		In = RawTweenFunctions.InExpo;
		Out = RawTweenFunctions.OutExpo;
		InOut = RawTweenFunctions.InOutExpo;
		OutIn = RawTweenFunctions.OutInExpo;
	};

	Sine = {
		In = RawTweenFunctions.InSine;
		Out = RawTweenFunctions.OutSine;
		InOut = RawTweenFunctions.InOutSine;
		OutIn = RawTweenFunctions.OutInSine;
	};

	Cubic = {
		In = RawTweenFunctions.InCubic;
		Out = RawTweenFunctions.OutCubic;
		InOut = RawTweenFunctions.InOutCubic;
		OutIn = RawTweenFunctions.OutInCubic;
	};

	EntranceExpressive = {
		In = RawTweenFunctions.InEntranceExpressive;
		Out = RawTweenFunctions.OutEntranceExpressive;
		InOut = RawTweenFunctions.InOutEntranceExpressive;
		OutIn = RawTweenFunctions.OutInEntranceExpressive;
	};

	Elastic = {
		In = RawTweenFunctions.InElastic;
		Out = RawTweenFunctions.OutElastic;
		InOut = RawTweenFunctions.InOutElastic;
		OutIn = RawTweenFunctions.OutInElastic;
	};

	Quint = {
		In = RawTweenFunctions.InQuint;
		Out = RawTweenFunctions.OutQuint;
		InOut = RawTweenFunctions.InOutQuint;
		OutIn = RawTweenFunctions.OutInQuint;
	};

	EntranceProductive = {
		In = RawTweenFunctions.InEntranceProductive;
		Out = RawTweenFunctions.OutEntranceProductive;
		InOut = RawTweenFunctions.InOutEntranceProductive;
		OutIn = RawTweenFunctions.OutInEntranceProductive;
	};

	Bounce = {
		In = RawTweenFunctions.InBounce;
		Out = RawTweenFunctions.OutBounce;
		InOut = RawTweenFunctions.InOutBounce;
		OutIn = RawTweenFunctions.OutInBounce;
	};

	Smooth = {
		In = RawTweenFunctions.InSmooth;
		Out = RawTweenFunctions.OutSmooth;
		InOut = RawTweenFunctions.InOutSmooth;
		OutIn = RawTweenFunctions.OutInSmooth;
	};

	Back = {
		In = RawTweenFunctions.InBack;
		Out = RawTweenFunctions.OutBack;
		InOut = RawTweenFunctions.InOutBack;
		OutIn = RawTweenFunctions.OutInBack;
	};

	Quart = {
		In = RawTweenFunctions.InQuart;
		Out = RawTweenFunctions.OutQuart;
		InOut = RawTweenFunctions.InOutQuart;
		OutIn = RawTweenFunctions.OutInQuart;
	};

	StandardProductive = {
		In = RawTweenFunctions.InStandardProductive;
		Out = RawTweenFunctions.OutStandardProductive;
		InOut = RawTweenFunctions.InOutStandardProductive;
		OutIn = RawTweenFunctions.OutInStandardProductive;
	};

	Quad = {
		In = RawTweenFunctions.InQuad;
		Out = RawTweenFunctions.OutQuad;
		InOut = RawTweenFunctions.InOutQuad;
		OutIn = RawTweenFunctions.OutInQuad;
	};

	FabricDecelerate = {
		In = RawTweenFunctions.InFabricDecelerate;
		Out = RawTweenFunctions.OutFabricDecelerate;
		InOut = RawTweenFunctions.InOutFabricDecelerate;
		OutIn = RawTweenFunctions.OutInFabricDecelerate;
	};

	Acceleration = {
		In = RawTweenFunctions.InAcceleration;
		Out = RawTweenFunctions.OutAcceleration;
		InOut = RawTweenFunctions.InOutAcceleration;
		OutIn = RawTweenFunctions.OutInAcceleration;
	};

	SoftSpring = {
		In = RawTweenFunctions.InSoftSpring;
		Out = RawTweenFunctions.OutSoftSpring;
		InOut = RawTweenFunctions.InOutSoftSpring;
		OutIn = RawTweenFunctions.OutInSoftSpring;
	};

	ExitExpressive = {
		In = RawTweenFunctions.InExitExpressive;
		Out = RawTweenFunctions.OutExitExpressive;
		InOut = RawTweenFunctions.InOutExitExpressive;
		OutIn = RawTweenFunctions.OutInExitExpressive;
	};

	Sharp = {
		In = RawTweenFunctions.InSharp;
		Out = RawTweenFunctions.OutSharp;
		InOut = RawTweenFunctions.InOutSharp;
		OutIn = RawTweenFunctions.OutInSharp;
	};
}

local function Wait(Seconds)
	Seconds = math.max(Seconds or 0.03, 0)
	local TimeRemaining = Seconds

	while TimeRemaining > 0 do
		TimeRemaining -= Heartbeat:Wait()
	end

	return Seconds - TimeRemaining
end

function BoatTween.Create(_, Object, Data)
	-- Validate
	if not Object or typeof(Object) ~= "Instance" then
		return warn("Invalid object to tween:", Object)
	end

	Data = type(Data) == "table" and Data or {}

	-- Define settings
	local EventStep: RBXScriptSignal = ValidStepTypes[Data.StepType] and RunService[Data.StepType] or RunService.Stepped
	local TweenFunction = TweenFunctions[Data.EasingStyle or "Quad"][Data.EasingDirection or "In"]
	local Time = math.max(type(Data.Time) == "number" and Data.Time or 1, 0.001)
	local Goal = type(Data.Goal) == "table" and Data.Goal or {}
	local DelayTime = type(Data.DelayTime) == "number" and Data.DelayTime > 0.027 and Data.DelayTime
	local RepeatCount = (type(Data.RepeatCount) == "number" and math.max(Data.RepeatCount, -1) or 0) + 1

	local TweenData = {}
	for Property, EndValue in pairs(Goal) do
		TweenData[Property] = TypeLerpers[typeof(EndValue)](Object[Property], EndValue)
	end

	-- Create instances
	local CompletedEvent = Instance.new("BindableEvent")
	local StoppedEvent = Instance.new("BindableEvent")
	local ResumedEvent = Instance.new("BindableEvent")

	local PlaybackConnection
	local StartTime, ElapsedTime = os.clock(), 0

	local TweenObject = {
		["Instance"] = Object;
		["PlaybackState"] = Enum.PlaybackState.Begin;

		["Completed"] = CompletedEvent.Event;
		["Resumed"] = ResumedEvent.Event;
		["Stopped"] = StoppedEvent.Event;
	}

	function TweenObject.Destroy()
		if PlaybackConnection then
			PlaybackConnection:Disconnect()
			PlaybackConnection = nil
		end

		CompletedEvent:Destroy()
		StoppedEvent:Destroy()
		ResumedEvent:Destroy()
		TweenObject = nil
	end

	local CurrentlyReversing = false
	local CurrentLayer = 0

	local function Play(Layer, Reverse)
		if PlaybackConnection then
			PlaybackConnection:Disconnect()
			PlaybackConnection = nil
		end

		Layer = Layer or 1
		if RepeatCount ~= 0 then
			if Layer > RepeatCount then
				TweenObject.PlaybackState = Enum.PlaybackState.Completed
				CompletedEvent:Fire()
				CurrentlyReversing = false
				CurrentLayer = 1
				return
			end
		end

		CurrentLayer = Layer

		if Reverse then
			CurrentlyReversing = true
		end

		if DelayTime then
			TweenObject.PlaybackState = Enum.PlaybackState.Delayed;
			(DelayTime < 2 and Wait or wait)(DelayTime)
		end

		StartTime = os.clock() - ElapsedTime
		PlaybackConnection = EventStep:Connect(function()
			ElapsedTime = os.clock() - StartTime
			if ElapsedTime >= Time then
				if Reverse then
					for Property, Lerper in pairs(TweenData) do
						Object[Property] = Lerper(0)
					end
				else
					for Property, Lerper in pairs(TweenData) do
						Object[Property] = Lerper(1)
					end
				end

				PlaybackConnection:Disconnect()
				PlaybackConnection = nil
				if Reverse then
					ElapsedTime = 0
					Play(Layer + 1, false)
				else
					if Data.Reverses then
						ElapsedTime = 0
						Play(Layer, true)
					else
						ElapsedTime = 0
						Play(Layer + 1, false)
					end
				end
			else
				local Delta = Reverse and (1 - ElapsedTime/Time) or (ElapsedTime/Time)
				local Position = math.clamp(TweenFunction(Delta), 0, 1)

				for Property, Lerper in pairs(TweenData) do
					Object[Property] = Lerper(Position)
				end
			end
		end)

		TweenObject.PlaybackState = Enum.PlaybackState.Playing
	end

	function TweenObject.Play()
		ElapsedTime = 0
		Play(1, false)
	end

	function TweenObject.Stop()
		if PlaybackConnection then
			PlaybackConnection:Disconnect()
			PlaybackConnection = nil
			TweenObject.PlaybackState = Enum.PlaybackState.Cancelled
			StoppedEvent:Fire()
		end
	end

	function TweenObject.Resume()
		Play(CurrentLayer, CurrentlyReversing)
		ResumedEvent:Fire()
	end

	return TweenObject
end

return BoatTween]]></ProtectedString>
				<int64 name="SourceAssetId">4939498795</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX5be64fe7da0b4ba2b47c8f80712d176f">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Bezier</string>
					<string name="ScriptGuid">{6BAF1F00-1303-43AC-A8A4-8B6F92EC18B7}</string>
					<ProtectedString name="Source"><![CDATA[local function Linear(T)
	return T
end

local function Bezier(X1, Y1, X2, Y2)
	if not (X1 and Y1 and X2 and Y2) then
		error("Need 4 numbers to construct a Bezier curve", 0)
	end

	if not (0 <= X1 and X1 <= 1 and 0 <= X2 and X2 <= 1) then
		error("The x values must be within range [0, 1]", 0)
	end

	if X1 == Y1 and X2 == Y2 then
		return Linear
	end

	local SampleValues = {}
	for Index = 0, 10 do
		local IndexDiv10 = Index / 10
		SampleValues[Index] = (((1 - 3 * X2 + 3 * X2) * IndexDiv10 + (3 * X2 - 6 * X1)) * IndexDiv10 + (3 * X1)) * IndexDiv10
	end

	return function(T)
		if X1 == Y1 and X2 == Y2 then
			return Linear
		end

		if T == 0 or T == 1 then
			return T
		end

		local GuessT
		local IntervalStart = 0
		local CurrentSample = 1

		while CurrentSample ~= 10 and SampleValues[CurrentSample] <= T do
			IntervalStart += 0.1
			CurrentSample += 1
		end

		CurrentSample -= 1

		local Dist = (T - SampleValues[CurrentSample]) / (SampleValues[CurrentSample + 1] - SampleValues[CurrentSample])
		local GuessForT = IntervalStart + Dist / 10
		local InitialSlope = 3 * (1 - 3 * X2 + 3 * X1) * GuessForT * GuessForT + 2 * (3 * X2 - 6 * X1) * GuessForT + (3 * X1)

		if InitialSlope >= 0.001 then
			for _ = 0, 3 do
				local CurrentSlope = 3 * (1 - 3 * X2 + 3 * X1) * GuessForT * GuessForT + 2 * (3 * X2 - 6 * X1) * GuessForT + (3 * X1)
				local CurrentX = ((((1 - 3 * X2 + 3 * X1) * GuessForT + (3 * X2 - 6 * X1)) * GuessForT + (3 * X1)) * GuessForT) - T
				GuessForT -= CurrentX / CurrentSlope
			end

			GuessT = GuessForT
		elseif InitialSlope == 0 then
			GuessT = GuessForT
		else
			local AB = IntervalStart + 0.1
			local CurrentX, CurrentT, Index = 0, nil, nil

			while math.abs(CurrentX) > 0.0000001 and Index < 10 do
				CurrentT = IntervalStart + (AB - IntervalStart) / 2
				CurrentX = ((((1 - 3 * X2 + 3 * X1) * CurrentT + (3 * X2 - 6 * X1)) * CurrentT + (3 * X1)) * CurrentT) - T
				if CurrentX > 0 then
					AB = CurrentT
				else
					IntervalStart = CurrentT
				end

				Index += 1
			end

			GuessT = CurrentT
		end

		return (((1 - 3 * Y2 + 3 * Y1) * GuessT + (3 * Y2 - 6 * Y1)) * GuessT + (3 * Y1)) * GuessT
	end
end

return Bezier]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXad0796bf1a6e45f58453d7c68be1088c">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Lerps</string>
					<string name="ScriptGuid">{A271DC82-3685-4D16-BDC7-D1902AC80103}</string>
					<ProtectedString name="Source"><![CDATA[local ipairs = ipairs
local BLACK_COLOR3 = Color3.new()

-- Generic Roblox DataType lerp function.
local function RobloxLerp(V0, V1)
	return function(Alpha)
		return V0:Lerp(V1, Alpha)
	end
end

local function Lerp(Start, Finish, Alpha)
	return Start + Alpha * (Finish - Start)
end

local function SortByTime(A, B)
	return A.Time < B.Time
end

local function Color3Lerp(C0, C1)
	local L0, U0, V0
	local R0, G0, B0 = C0.R, C0.G, C0.B
	R0 = R0 < 0.0404482362771076 and R0 / 12.92 or 0.87941546140213 * (R0 + 0.055) ^ 2.4
	G0 = G0 < 0.0404482362771076 and G0 / 12.92 or 0.87941546140213 * (G0 + 0.055) ^ 2.4
	B0 = B0 < 0.0404482362771076 and B0 / 12.92 or 0.87941546140213 * (B0 + 0.055) ^ 2.4

	local Y0 = 0.2125862307855956 * R0 + 0.71517030370341085 * G0 + 0.0722004986433362 * B0
	local Z0 = 3.6590806972265883 * R0 + 11.4426895800574232 * G0 + 4.1149915024264843 * B0
	local _L0 = Y0 > 0.008856451679035631 and 116 * Y0 ^ (1 / 3) - 16 or 903.296296296296 * Y0

	if Z0 > 1E-15 then
		local X = 0.9257063972951867 * R0 - 0.8333736323779866 * G0 - 0.09209820666085898 * B0
		L0, U0, V0 = _L0, _L0 * X / Z0, _L0 * (9 * Y0 / Z0 - 0.46832)
	else
		L0, U0, V0 = _L0, -0.19783 * _L0, -0.46832 * _L0
	end

	local L1, U1, V1
	local R1, G1, B1 = C1.R, C1.G, C1.B
	R1 = R1 < 0.0404482362771076 and R1 / 12.92 or 0.87941546140213 * (R1 + 0.055) ^ 2.4
	G1 = G1 < 0.0404482362771076 and G1 / 12.92 or 0.87941546140213 * (G1 + 0.055) ^ 2.4
	B1 = B1 < 0.0404482362771076 and B1 / 12.92 or 0.87941546140213 * (B1 + 0.055) ^ 2.4

	local Y1 = 0.2125862307855956 * R1 + 0.71517030370341085 * G1 + 0.0722004986433362 * B1
	local Z1 = 3.6590806972265883 * R1 + 11.4426895800574232 * G1 + 4.1149915024264843 * B1
	local _L1 = Y1 > 0.008856451679035631 and 116 * Y1 ^ (1 / 3) - 16 or 903.296296296296 * Y1

	if Z1 > 1E-15 then
		local X = 0.9257063972951867 * R1 - 0.8333736323779866 * G1 - 0.09209820666085898 * B1
		L1, U1, V1 = _L1, _L1 * X / Z1, _L1 * (9 * Y1 / Z1 - 0.46832)
	else
		L1, U1, V1 = _L1, -0.19783 * _L1, -0.46832 * _L1
	end

	return function(Alpha)
		local L = (1 - Alpha) * L0 + Alpha * L1
		if L < 0.0197955 then
			return BLACK_COLOR3
		end

		local U = ((1 - Alpha) * U0 + Alpha * U1) / L + 0.19783
		local V = ((1 - Alpha) * V0 + Alpha * V1) / L + 0.46832

		local Y = (L + 16) / 116
		Y = Y > 0.206896551724137931 and Y * Y * Y or 0.12841854934601665 * Y - 0.01771290335807126
		local X = Y * U / V
		local Z = Y * ((3 - 0.75 * U) / V - 5)

		local R = 7.2914074 * X - 1.5372080 * Y - 0.4986286 * Z
		local G = -2.1800940 * X + 1.8757561 * Y + 0.0415175 * Z
		local B = 0.1253477 * X - 0.2040211 * Y + 1.0569959 * Z

		if R < 0 and R < G and R < B then
			R, G, B = 0, G - R, B - R
		elseif G < 0 and G < B then
			R, G, B = R - G, 0, B - G
		elseif B < 0 then
			R, G, B = R - B, G - B, 0
		end

		R = R < 3.1306684425E-3 and 12.92 * R or 1.055 * R ^ (1 / 2.4) - 0.055 -- 3.1306684425E-3
		G = G < 3.1306684425E-3 and 12.92 * G or 1.055 * G ^ (1 / 2.4) - 0.055
		B = B < 3.1306684425E-3 and 12.92 * B or 1.055 * B ^ (1 / 2.4) - 0.055

		R = R > 1 and 1 or R < 0 and 0 or R
		G = G > 1 and 1 or G < 0 and 0 or G
		B = B > 1 and 1 or B < 0 and 0 or B

		return Color3.new(R, G, B)
	end
end

local Lerps = setmetatable({
	boolean = function(V0, V1)
		return function(Alpha)
			if Alpha < 0.5 then
				return V0
			else
				return V1
			end
		end
	end;

	number = function(V0, V1)
		local Delta = V1 - V0
		return function(Alpha)
			return V0 + Delta * Alpha
		end
	end;

	string = function(V0, V1)
		local RegularString = false

		local N0, D do
			local Sign0, H0, M0, S0 = string.match(V0, "^([+-]?)(%d*):[+-]?(%d*):[+-]?(%d*)$")
			local Sign1, H1, M1, S1 = string.match(V1, "^([+-]?)(%d*):[+-]?(%d*):[+-]?(%d*)$")
			if Sign0 and Sign1 then
				N0 = 3600 * (tonumber(H0) or 0) + 60 * (tonumber(M0) or 0) + (tonumber(S0) or 0)
				local N1 = 3600 * (tonumber(H1) or 0) + 60 * (tonumber(M1) or 0) + (tonumber(S1) or 0)
				if Sign0 == "-" then
					N0 = -N0
				end

				D = (43200 + (Sign1 ~= "-" and N1 or -N1) - N0) % 86400 - 43200
			else
				RegularString = true
			end
		end

		if RegularString then
			local Length = #V1
			return function(Alpha)
				Alpha = 1 + Length * Alpha
				return string.sub(V1, 1, Alpha < Length and Alpha or Length)
			end
		else
			return function(Alpha)
				local FS = (N0 + D * Alpha) % 86400
				local S = math.abs(FS)
				return string.format(
					FS < 0 and "-%.2u:%.2u:%.2u" or "%.2u:%.2u:%.2u",
					(S - S % 3600) / 3600,
					(S % 3600 - S % 60) / 60,
					S % 60
				)
			end
		end
	end;

	CFrame = RobloxLerp;
	Color3 = Color3Lerp;
	NumberRange = function(V0, V1)
		local Min0, Max0 = V0.Min, V0.Max
		local DeltaMin, DeltaMax = V1.Min - Min0, V1.Max - Max0

		return function(Alpha)
			return NumberRange.new(Min0 + Alpha * DeltaMin, Max0 + Alpha * DeltaMax)
		end
	end;

	NumberSequenceKeypoint = function(V0, V1)
		local T0, Value0, E0 = V0.Time, V0.Value, V0.Envelope
		local DT, DV, DE = V1.Time - T0, V1.Value - Value0, V1.Envelope - E0

		return function(Alpha)
			return NumberSequenceKeypoint.new(T0 + Alpha * DT, Value0 + Alpha * DV, E0 + Alpha * DE)
		end
	end;

	PhysicalProperties = function(V0, V1)
		local D0, E0, EW0, F0, FW0 =
			V0.Density, V0.Elasticity,
		V0.ElasticityWeight, V0.Friction,
		V0.FrictionWeight

		local DD, DE, DEW, DF, DFW =
			V1.Density - D0, V1.Elasticity - E0,
		V1.ElasticityWeight - EW0, V1.Friction - F0,
		V1.FrictionWeight - FW0

		return function(Alpha)
			return PhysicalProperties.new(
				D0 + Alpha * DD,
				E0 + Alpha * DE, EW0 + Alpha * DEW,
				F0 + Alpha * DF, FW0 + Alpha * DFW
			)
		end
	end;

	Ray = function(V0, V1)
		local O0, D0, O1, D1 = V0.Origin, V0.Direction, V1.Origin, V1.Direction
		local OX0, OY0, OZ0, DX0, DY0, DZ0 = O0.X, O0.Y, O0.Z, D0.X, D0.Y, D0.Z
		local DOX, DOY, DOZ, DDX, DDY, DDZ = O1.X - OX0, O1.Y - OY0, O1.Z - OZ0, D1.X - DX0, D1.Y - DY0, D1.Z - DZ0

		return function(Alpha)
			return Ray.new(
				Vector3.new(OX0 + Alpha * DOX, OY0 + Alpha * DOY, OZ0 + Alpha * DOZ),
				Vector3.new(DX0 + Alpha * DDX, DY0 + Alpha * DDY, DZ0 + Alpha * DDZ)
			)
		end
	end;

	UDim = function(V0, V1)
		local SC, OF = V0.Scale, V0.Offset
		local DSC, DOF = V1.Scale - SC, V1.Offset - OF

		return function(Alpha)
			return UDim.new(SC + Alpha * DSC, OF + Alpha * DOF)
		end
	end;

	UDim2 = RobloxLerp;
	Vector2 = RobloxLerp;
	Vector3 = RobloxLerp;
	Rect = function(V0, V1)
		return function(Alpha)
			return Rect.new(
				V0.Min.X + Alpha * (V1.Min.X - V0.Min.X), V0.Min.Y + Alpha * (V1.Min.Y - V0.Min.Y),
				V0.Max.X + Alpha * (V1.Max.X - V0.Max.X), V0.Max.Y + Alpha * (V1.Max.Y - V0.Max.Y)
			)
		end
	end;

	Region3 = function(V0, V1)
		return function(Alpha)
			local imin = Lerp(V0.CFrame * (-V0.Size / 2), V1.CFrame * (-V1.Size / 2), Alpha)
			local imax = Lerp(V0.CFrame * (V0.Size / 2), V1.CFrame * (V1.Size / 2), Alpha)

			local iminx = imin.X
			local imaxx = imax.X
			local iminy = imin.Y
			local imaxy = imax.Y
			local iminz = imin.Z
			local imaxz = imax.Z

			return Region3.new(
				Vector3.new(iminx < imaxx and iminx or imaxx, iminy < imaxy and iminy or imaxy, iminz < imaxz and iminz or imaxz),
				Vector3.new(iminx > imaxx and iminx or imaxx, iminy > imaxy and iminy or imaxy, iminz > imaxz and iminz or imaxz)
			)
		end
	end;

	NumberSequence = function(V0, V1)
		return function(Alpha)
			local keypoints = {}
			local addedTimes = {}
			local keylength = 0

			for _, ap in ipairs(V0.Keypoints) do
				local closestAbove, closestBelow

				for _, bp in ipairs(V1.Keypoints) do
					if bp.Time == ap.Time then
						closestAbove, closestBelow = bp, bp
						break
					elseif bp.Time < ap.Time and (closestBelow == nil or bp.Time > closestBelow.Time) then
						closestBelow = bp
					elseif bp.Time > ap.Time and (closestAbove == nil or bp.Time < closestAbove.Time) then
						closestAbove = bp
					end
				end

				local bValue, bEnvelope
				if closestAbove == closestBelow then
					bValue, bEnvelope = closestAbove.Value, closestAbove.Envelope
				else
					local p = (ap.Time - closestBelow.Time) / (closestAbove.Time - closestBelow.Time)
					bValue = (closestAbove.Value - closestBelow.Value) * p + closestBelow.Value
					bEnvelope = (closestAbove.Envelope - closestBelow.Envelope) * p + closestBelow.Envelope
				end

				keylength += 1
				keypoints[keylength] = NumberSequenceKeypoint.new(ap.Time, (bValue - ap.Value) * Alpha + ap.Value, (bEnvelope - ap.Envelope) * Alpha + ap.Envelope)
				addedTimes[ap.Time] = true
			end

			for _, bp in ipairs(V1.Keypoints) do
				if not addedTimes[bp.Time] then
					local closestAbove, closestBelow

					for _, ap in ipairs(V0.Keypoints) do
						if ap.Time == bp.Time then
							closestAbove, closestBelow = ap, ap
							break
						elseif ap.Time < bp.Time and (closestBelow == nil or ap.Time > closestBelow.Time) then
							closestBelow = ap
						elseif ap.Time > bp.Time and (closestAbove == nil or ap.Time < closestAbove.Time) then
							closestAbove = ap
						end
					end

					local aValue, aEnvelope
					if closestAbove == closestBelow then
						aValue, aEnvelope = closestAbove.Value, closestAbove.Envelope
					else
						local p = (bp.Time - closestBelow.Time) / (closestAbove.Time - closestBelow.Time)
						aValue = (closestAbove.Value - closestBelow.Value) * p + closestBelow.Value
						aEnvelope = (closestAbove.Envelope - closestBelow.Envelope) * p + closestBelow.Envelope
					end

					keylength += 1
					keypoints[keylength] = NumberSequenceKeypoint.new(bp.Time, (bp.Value - aValue) * Alpha + aValue, (bp.Envelope - aEnvelope) * Alpha + aEnvelope)
				end
			end

			table.sort(keypoints, SortByTime)
			return NumberSequence.new(keypoints)
		end
	end;

	ColorSequence = function(V0, V1)
		return function(Alpha)
			local keypoints = {}
			local addedTimes = {}
			local keylength = 0

			for _, ap in ipairs(V0.Keypoints) do
				local closestAbove, closestBelow

				for _, bp in ipairs(V1.Keypoints) do
					if bp.Time == ap.Time then
						closestAbove, closestBelow = bp, bp
						break
					elseif bp.Time < ap.Time and (closestBelow == nil or bp.Time > closestBelow.Time) then
						closestBelow = bp
					elseif bp.Time > ap.Time and (closestAbove == nil or bp.Time < closestAbove.Time) then
						closestAbove = bp
					end
				end

				local bValue
				if closestAbove == closestBelow then
					bValue = closestAbove.Value
				else
					bValue = Color3Lerp(closestBelow.Value, closestAbove.Value)((ap.Time - closestBelow.Time) / (closestAbove.Time - closestBelow.Time))
				end

				keylength += 1
				keypoints[keylength] = ColorSequenceKeypoint.new(ap.Time, Color3Lerp(ap.Value, bValue)(Alpha))
				addedTimes[ap.Time] = true
			end

			for _, bp in ipairs(V1.Keypoints) do
				if not addedTimes[bp.Time] then
					local closestAbove, closestBelow

					for _, ap in ipairs(V0.Keypoints) do
						if ap.Time == bp.Time then
							closestAbove, closestBelow = ap, ap
							break
						elseif ap.Time < bp.Time and (closestBelow == nil or ap.Time > closestBelow.Time) then
							closestBelow = ap
						elseif ap.Time > bp.Time and (closestAbove == nil or ap.Time < closestAbove.Time) then
							closestAbove = ap
						end
					end

					local aValue
					if closestAbove == closestBelow then
						aValue = closestAbove.Value
					else
						aValue = Color3Lerp(closestBelow.Value, closestAbove.Value)((bp.Time - closestBelow.Time) / (closestAbove.Time - closestBelow.Time))
					end

					keylength += 1
					keypoints[keylength] = ColorSequenceKeypoint.new(bp.Time, Color3Lerp(bp.Value, aValue)(Alpha))
				end
			end

			table.sort(keypoints, SortByTime)
			return ColorSequence.new(keypoints)
		end
	end;
}, {
	__index = function(_, Index)
		error("No lerp function is defined for type " .. tostring(Index) .. ".", 4)
	end;

	__newindex = function(_, Index)
		error("No lerp function is defined for type " .. tostring(Index) .. ".", 4)
	end;
})

return Lerps]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXd398112ccb934663abd9ff385115d722">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">TweenFunctions</string>
					<string name="ScriptGuid">{54AC11D7-7D67-4F0E-B7B8-2EB24F4DEFF1}</string>
					<ProtectedString name="Source"><![CDATA[local Bezier = require(script.Parent.Bezier)

local function RevBack(T)
	T = 1 - T
	return 1 - (math.sin(T * 1.5707963267949) + (math.sin(T * 3.1415926535898) * (math.cos(T * 3.1415926535898) + 1) / 2))
end

local function Linear(T)
	return T
end

-- @specs https://material.io/guidelines/motion/duration-easing.html#duration-easing-natural-easing-curves
local Sharp = Bezier(0.4, 0, 0.6, 1)
local Standard = Bezier(0.4, 0, 0.2, 1) -- used for moving.
local Acceleration = Bezier(0.4, 0, 1, 1) -- used for exiting.
local Deceleration = Bezier(0, 0, 0.2, 1) -- used for entering.

-- @specs https://developer.microsoft.com/en-us/fabric#/styles/web/motion#basic-animations
local FabricStandard = Bezier(0.8, 0, 0.2, 1) -- used for moving.
local FabricAccelerate = Bezier(0.9, 0.1, 1, 0.2) -- used for exiting.
local FabricDecelerate = Bezier(0.1, 0.9, 0.2, 1) -- used for entering.

-- @specs https://docs.microsoft.com/en-us/windows/uwp/design/motion/timing-and-easing
local UWPAccelerate = Bezier(0.7, 0, 1, 0.5)

-- @specs https://www.ibm.com/design/language/elements/motion/basics

-- Productivity and Expression are both essential to an interface. Reserve Expressive motion for occasional, important moments to better capture user’s attention, and offer rhythmic break to the productive experience.
-- Use standard-easing when an element is visible from the beginning to end of a motion. Tiles expanding and table rows sorting are good examples.
local StandardProductive = Bezier(0.2, 0, 0.38, 0.9)
local StandardExpressive = Bezier(0.4, 0.14, 0.3, 1)

-- Use entrance-easing when adding elements to the view such as a modal or toaster appearing, or moving in response to users’ input, such as dropdown opening or toggle. An element quickly appears and slows down to a stop.
local EntranceProductive = Bezier(0, 0, 0.38, 0.9)
local EntranceExpressive = Bezier(0, 0, 0.3, 1)

-- Use exit-easing when removing elements from view, such as closing a modal or toaster. The element speeds up as it exits from view, implying that its departure from the screen is permanent.
local ExitProductive = Bezier(0.2, 0, 1, 0.9)
local ExitExpressive = Bezier(0.4, 0.14, 1, 1)

-- @specs https://design.firefox.com/photon/motion/duration-and-easing.html
local MozillaCurve = Bezier(0.07, 0.95, 0, 1)

local function Smooth(T)
	return T * T * (3 - 2 * T)
end

local function Smoother(T)
	return T * T * T * (T * (6 * T - 15) + 10)
end

local function RidiculousWiggle(T)
	return math.sin(math.sin(T * 3.1415926535898) * 1.5707963267949)
end

local function Spring(T)
	return 1 + (-math.exp(-6.9 * T) * math.cos(-20.106192982975 * T))
end

local function SoftSpring(T)
	return 1 + (-math.exp(-7.5 * T) * math.cos(-10.053096491487 * T))
end

local function OutBounce(T)
	if T < 0.36363636363636 then
		return 7.5625 * T * T
	elseif T < 0.72727272727273 then
		return 3 + T * (11 * T - 12) * 0.6875
	elseif T < 0.090909090909091 then
		return 6 + T * (11 * T - 18) * 0.6875
	else
		return 7.875 + T * (11 * T - 21) * 0.6875
	end
end

local function InBounce(T)
	if T > 0.63636363636364 then
		T -= 1
		return 1 - T * T * 7.5625
	elseif T > 0.272727272727273 then
		return (11 * T - 7) * (11 * T - 3) / -16
	elseif T > 0.090909090909091 then
		return (11 * (4 - 11 * T) * T - 3) / 16
	else
		return T * (11 * T - 1) * -0.6875
	end
end

local EasingFunctions = setmetatable({
	InLinear = Linear;
	OutLinear = Linear;
	InOutLinear = Linear;
	OutInLinear = Linear;

	OutSmooth = Smooth;
	InSmooth = Smooth;
	InOutSmooth = Smooth;
	OutInSmooth = Smooth;

	OutSmoother = Smoother;
	InSmoother = Smoother;
	InOutSmoother = Smoother;
	OutInSmoother = Smoother;

	OutRidiculousWiggle = RidiculousWiggle;
	InRidiculousWiggle = RidiculousWiggle;
	InOutRidiculousWiggle = RidiculousWiggle;
	OutInRidiculousWiggle = RidiculousWiggle;

	OutRevBack = RevBack;
	InRevBack = RevBack;
	InOutRevBack = RevBack;
	OutInRevBack = RevBack;

	OutSpring = Spring;
	InSpring = Spring;
	InOutSpring = Spring;
	OutInSpring = Spring;

	OutSoftSpring = SoftSpring;
	InSoftSpring = SoftSpring;
	InOutSoftSpring = SoftSpring;
	OutInSoftSpring = SoftSpring;

	InSharp = Sharp;
	InOutSharp = Sharp;
	OutSharp = Sharp;
	OutInSharp = Sharp;

	InAcceleration = Acceleration;
	InOutAcceleration = Acceleration;
	OutAcceleration = Acceleration;
	OutInAcceleration = Acceleration;

	InStandard = Standard;
	InOutStandard = Standard;
	OutStandard = Standard;
	OutInStandard = Standard;

	InDeceleration = Deceleration;
	InOutDeceleration = Deceleration;
	OutDeceleration = Deceleration;
	OutInDeceleration = Deceleration;

	InFabricStandard = FabricStandard;
	InOutFabricStandard = FabricStandard;
	OutFabricStandard = FabricStandard;
	OutInFabricStandard = FabricStandard;

	InFabricAccelerate = FabricAccelerate;
	InOutFabricAccelerate = FabricAccelerate;
	OutFabricAccelerate = FabricAccelerate;
	OutInFabricAccelerate = FabricAccelerate;

	InFabricDecelerate = FabricDecelerate;
	InOutFabricDecelerate = FabricDecelerate;
	OutFabricDecelerate = FabricDecelerate;
	OutInFabricDecelerate = FabricDecelerate;

	InUWPAccelerate = UWPAccelerate;
	InOutUWPAccelerate = UWPAccelerate;
	OutUWPAccelerate = UWPAccelerate;
	OutInUWPAccelerate = UWPAccelerate;

	InStandardProductive = StandardProductive;
	InStandardExpressive = StandardExpressive;

	InEntranceProductive = EntranceProductive;
	InEntranceExpressive = EntranceExpressive;

	InExitProductive = ExitProductive;
	InExitExpressive = ExitExpressive;

	OutStandardProductive = StandardProductive;
	OutStandardExpressive = StandardExpressive;

	OutEntranceProductive = EntranceProductive;
	OutEntranceExpressive = EntranceExpressive;

	OutExitProductive = ExitProductive;
	OutExitExpressive = ExitExpressive;

	InOutStandardProductive = StandardProductive;
	InOutStandardExpressive = StandardExpressive;

	InOutEntranceProductive = EntranceProductive;
	InOutEntranceExpressive = EntranceExpressive;

	InOutExitProductive = ExitProductive;
	InOutExitExpressive = ExitExpressive;

	OutInStandardProductive = StandardProductive;
	OutInStandardExpressive = StandardProductive;

	OutInEntranceProductive = EntranceProductive;
	OutInEntranceExpressive = EntranceExpressive;

	OutInExitProductive = ExitProductive;
	OutInExitExpressive = ExitExpressive;

	OutMozillaCurve = MozillaCurve;
	InMozillaCurve = MozillaCurve;
	InOutMozillaCurve = MozillaCurve;
	OutInMozillaCurve = MozillaCurve;

	InQuad = function(T)
		return T * T
	end;

	OutQuad = function(T)
		return T * (2 - T)
	end;

	InOutQuad = function(T)
		if T < 0.5 then
			return 2 * T * T
		else
			return 2 * (2 - T) * T - 1
		end
	end;

	OutInQuad = function(T)
		if T < 0.5 then
			T *= 2
			return T * (2 - T) / 2
		else
			T *= 2 - 1
			return (T * T) / 2 + 0.5
		end
	end;

	InCubic = function(T)
		return T * T * T
	end;

	OutCubic = function(T)
		return 1 - (1 - T) * (1 - T) * (1 - T)
	end;

	InOutCubic = function(T)
		if T < 0.5 then
			return 4 * T * T * T
		else
			T -= 1
			return 1 + 4 * T * T * T
		end
	end;

	OutInCubic = function(T)
		if T < 0.5 then
			T = 1 - (T * 2)
			return (1 - T * T * T) / 2
		else
			T *= 2 - 1
			return T * T * T / 2 + 0.5
		end
	end;

	InQuart = function(T)
		return T * T * T * T
	end;

	OutQuart = function(T)
		T -= 1
		return 1 - T * T * T * T
	end;

	InOutQuart = function(T)
		if T < 0.5 then
			T *= T
			return 8 * T * T
		else
			T -= 1
			return 1 - 8 * T * T * T * T
		end
	end;

	OutInQuart = function(T)
		if T < 0.5 then
			T *= 2 - 1
			return (1 - T * T * T * T) / 2
		else
			T *= 2 - 1
			return T * T * T * T / 2 + 0.5
		end
	end;

	InQuint = function(T)
		return T * T * T * T * T
	end;

	OutQuint = function(T)
		T -= 1
		return T * T * T * T * T + 1
	end;

	InOutQuint = function(T)
		if T < 0.5 then
			return 16 * T * T * T * T * T
		else
			T -= 1
			return 16 * T * T * T * T * T + 1
		end
	end;

	OutInQuint = function(T)
		if T < 0.5 then
			T *= 2 - 1
			return (T * T * T * T * T + 1) / 2
		else
			T *= 2 - 1
			return T * T * T * T * T / 2 + 0.5
		end
	end;

	InBack = function(T)
		return T * T * (3 * T - 2)
	end;

	OutBack = function(T)
		return (T - 1) * (T - 1) * (T * 2 + T - 1) + 1
	end;

	InOutBack = function(T)
		if T < 0.5 then
			return 2 * T * T * (2 * 3 * T - 2)
		else
			return 1 + 2 * (T - 1) * (T - 1) * (2 * 3 * T - 2 - 2)
		end
	end;

	OutInBack = function(T)
		if T < 0.5 then
			T *= 2
			return ((T - 1) * (T - 1) * (T * 2 + T - 1) + 1) / 2
		else
			T *= 2 - 1
			return T * T * (3 * T - 2) / 2 + 0.5
		end
	end;

	InSine = function(T)
		return 1 - math.cos(T * 1.5707963267949)
	end;

	OutSine = function(T)
		return math.sin(T * 1.5707963267949)
	end;

	InOutSine = function(T)
		return (1 - math.cos(3.1415926535898 * T)) / 2
	end;

	OutInSine = function(T)
		if T < 0.5 then
			return math.sin(T * 3.1415926535898) / 2
		else
			return (1 - math.cos((T * 2 - 1) * 1.5707963267949)) / 2 + 0.5
		end
	end;

	OutBounce = OutBounce;
	InBounce = InBounce;

	InOutBounce = function(T)
		if T < 0.5 then
			return InBounce(2 * T) / 2
		else
			return OutBounce(2 * T - 1) / 2 + 0.5
		end
	end;

	OutInBounce = function(T)
		if T < 0.5 then
			return OutBounce(2 * T) / 2
		else
			return InBounce(2 * T - 1) / 2 + 0.5
		end
	end;

	InElastic = function(T)
		return math.exp((T * 0.96380736418812 - 1) * 8) * T * 0.96380736418812 * math.sin(4 * T * 0.96380736418812) * 1.8752275007429
	end;

	OutElastic = function(T)
		return 1 + (math.exp(8 * (0.96380736418812 - 0.96380736418812 * T - 1)) * 0.96380736418812 * (T - 1) * math.sin(4 * 0.96380736418812 * (1 - T))) * 1.8752275007429
	end;

	InOutElastic = function(T)
		if T < 0.5 then
			return (math.exp(8 * (2 * 0.96380736418812 * T - 1)) * 0.96380736418812 * T * math.sin(2 * 4 * 0.96380736418812 * T)) * 1.8752275007429
		else
			return 1 + (math.exp(8 * (0.96380736418812 * (2 - 2 * T) - 1)) * 0.96380736418812 * (T - 1) * math.sin(4 * 0.96380736418812 * (2 - 2 * T))) * 1.8752275007429
		end
	end;

	OutInElastic = function(T)
		-- This isn't actually correct, but it is close enough.
		if T < 0.5 then
			T *= 2
			return (1 + (math.exp(8 * (0.96380736418812 - 0.96380736418812 * T - 1)) * 0.96380736418812 * (T - 1) * math.sin(4 * 0.96380736418812 * (1 - T))) * 1.8752275007429) / 2
		else
			T *= 2 - 1
			return (math.exp((T * 0.96380736418812 - 1) * 8) * T * 0.96380736418812 * math.sin(4 * T * 0.96380736418812) * 1.8752275007429) / 2 + 0.5
		end
	end;

	InExpo = function(T)
		return T * T * math.exp(4 * (T - 1))
	end;

	OutExpo = function(T)
		return 1 - (1 - T) * (1 - T) / math.exp(4 * T)
	end;

	InOutExpo = function(T)
		if T < 0.5 then
			return 2 * T * T * math.exp(4 * (2 * T - 1))
		else
			return 1 - 2 * (T - 1) * (T - 1) * math.exp(4 * (1 - 2 * T))
		end
	end;

	OutInExpo = function(T)
		if T < 0.5 then
			T *= 2
			return (1 - (1 - T) * (1 - T) / math.exp(4 * T)) / 2
		else
			T *= 2 - 1
			return (T * T * math.exp(4 * (T - 1))) / 2 + 0.5
		end
	end;

	InCirc = function(T)
		return -(math.sqrt(1 - T * T) - 1)
	end;

	OutCirc = function(T)
		T -= 1
		return math.sqrt(1 - T * T)
	end;

	InOutCirc = function(T)
		T *= 2
		if T < 1 then
			return -(math.sqrt(1 - T * T) - 1) / 2
		else
			T -= 2
			return (math.sqrt(1 - T * T) - 1) / 2
		end
	end;

	OutInCirc = function(T)
		if T < 0.5 then
			T *= 2 - 1
			return math.sqrt(1 - T * T) / 2
		else
			T *= 2 - 1
			return (-(math.sqrt(1 - T * T) - 1)) / 2 + 0.5
		end
	end;
}, {
	__index = function(_, Index)
		error(tostring(Index) .. " is not a valid easing function.", 2)
	end;
})

return EasingFunctions]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX90390fad015d4f7eba05193459cec449">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">DamageModule</string>
				<string name="ScriptGuid">{6364FEDF-E23B-47FF-A1E2-07EB72085F0D}</string>
				<ProtectedString name="Source"><![CDATA[local RS = game:GetService("ReplicatedStorage")
local FXFolder = RS:WaitForChild("FX")
local CS = game:GetService("CollectionService")

local Modules = RS:WaitForChild("Modules")
local Remotes = RS:WaitForChild("Remotes")

local Replicate = Remotes:WaitForChild("Replicate")
local Misc = require(Modules:WaitForChild("Misc"))

local module = {}

module.OnHit = function(player, humanoid, Damage, isBlockBreak)
	if not player then return end
	local char = player.Character
	if not char then return end
	if char:FindFirstChild("ForceField") then return end

	if humanoid and not char:FindFirstChild("Disabled") and not humanoid.Parent:FindFirstChild("Immune") and not CS:HasTag(humanoid.Parent, "PerfectBlock") then

		local hitP = FXFolder:FindFirstChild("HitPart")
		local hitFX = hitP.PunchHitFX:Clone()
		local blockFX = hitP.PunchBlockFX:Clone()
		hitFX.Parent = humanoid.Parent.HumanoidRootPart
		blockFX.Parent = humanoid.Parent.HumanoidRootPart

		local isEnemyBlocking

		local isPlayer = game.Players:FindFirstChild(humanoid.Parent.Name)

		if isPlayer then
			isEnemyBlocking = isPlayer:WaitForChild("isBlocking")
		else
			isEnemyBlocking = humanoid.Parent:WaitForChild("isBlocking")
			humanoid.Parent.Target.Value = player.Name
		end

		if isEnemyBlocking then
			if isEnemyBlocking.Value then
				if not humanoid.Parent:FindFirstChild("Blade", true) then
					local blockbar = humanoid.Parent:FindFirstChild("BlockBar")
					if blockbar then
						if not isBlockBreak then
							blockbar.Value -= (Damage * 0.75)
						else
							blockbar.Value = 0

							humanoid:TakeDamage(Damage)
							Replicate:FireAllClients("DamageIndicator", humanoid.Parent, Damage, "Normal")

							local isIdle = humanoid.Parent:FindFirstChild("Idle")
							if isIdle then
								if isIdle.Value then
									isIdle.Value = false
								end
							end

							local Killers = humanoid.Parent:FindFirstChild("Killers")
							if Killers then
								local lPlr = Killers:FindFirstChild(player.Name)
								if not lPlr then
									local lPlrDMG = Instance.new("NumberValue")
									lPlrDMG.Name = player.Name
									lPlrDMG.Value = Damage
									lPlrDMG.Parent = Killers
								else
									lPlr.Value += Damage
								end
							else
								local KillersFolder = Instance.new("Folder")
								KillersFolder.Name = "Killers"
								KillersFolder.Parent = humanoid.Parent

								local lPlrDMG = Instance.new("NumberValue")
								lPlrDMG.Name = player.Name
								lPlrDMG.Value = Damage
								lPlrDMG.Parent = KillersFolder
							end
						end
					end
				else
					local blockbar = humanoid.Parent:FindFirstChild("BlockBar")
					if blockbar then
						if not isBlockBreak then
							blockbar.Value -= (Damage * 0.5)
						else
							blockbar.Value = 0

							humanoid:TakeDamage(Damage)
							Replicate:FireAllClients("DamageIndicator", humanoid.Parent, Damage, "Normal")

							local isIdle = humanoid.Parent:FindFirstChild("Idle")
							if isIdle then
								if isIdle.Value then
									isIdle.Value = false
								end
							end

							local Killers = humanoid.Parent:FindFirstChild("Killers")
							if Killers then
								local lPlr = Killers:FindFirstChild(player.Name)
								if not lPlr then
									local lPlrDMG = Instance.new("NumberValue")
									lPlrDMG.Name = player.Name
									lPlrDMG.Value = Damage
									lPlrDMG.Parent = Killers
								else
									lPlr.Value += Damage
								end
							else
								local KillersFolder = Instance.new("Folder")
								KillersFolder.Name = "Killers"
								KillersFolder.Parent = humanoid.Parent

								local lPlrDMG = Instance.new("NumberValue")
								lPlrDMG.Name = player.Name
								lPlrDMG.Value = Damage
								lPlrDMG.Parent = KillersFolder
							end
						end
					end
				end

				local isIdle = humanoid.Parent:FindFirstChild("Idle")
				if isIdle then
					if isIdle.Value then
						isIdle.Value = false
					end
				end
			else
				humanoid:TakeDamage(Damage)
				Replicate:FireAllClients("DamageIndicator", humanoid.Parent, Damage, "Normal")

				local isIdle = humanoid.Parent:FindFirstChild("Idle")
				if isIdle then
					if isIdle.Value then
						isIdle.Value = false
					end
				end

				local Killers = humanoid.Parent:FindFirstChild("Killers")
				if Killers then
					local lPlr = Killers:FindFirstChild(player.Name)
					if not lPlr then
						local lPlrDMG = Instance.new("NumberValue")
						lPlrDMG.Name = player.Name
						lPlrDMG.Value = Damage
						lPlrDMG.Parent = Killers
					else
						lPlr.Value += Damage
					end
				else
					local KillersFolder = Instance.new("Folder")
					KillersFolder.Name = "Killers"
					KillersFolder.Parent = humanoid.Parent

					local lPlrDMG = Instance.new("NumberValue")
					lPlrDMG.Name = player.Name
					lPlrDMG.Value = Damage
					lPlrDMG.Parent = KillersFolder
				end
			end
		end

		game.Debris:AddItem(hitFX, 2)
		game.Debris:AddItem(blockFX, 2)
	elseif humanoid and CS:HasTag(humanoid.Parent, "PerfectBlock") then
		local pbAnim = humanoid:LoadAnimation(script.Animations.PerfectBlock)
		pbAnim:Play()
		Misc.InsertDisabled(char, 3)

		CS:RemoveTag(humanoid.Parent, "PerfectBlock")

		local sfx1 = RS.Sounds.PerfectBlock1:Clone()
		local sfx2 = RS.Sounds.PerfectBlock2:Clone()

		sfx1.Parent = char.HumanoidRootPart
		sfx2.Parent = char.HumanoidRootPart

		sfx1:Play()
		sfx2:Play()

		local pbFX = RS.FX.Block.Perfect:Clone()
		pbFX.Parent = char.HumanoidRootPart

		pbFX.Block:Emit(2)
		pbFX.Glow:Emit(1)
		pbFX.Lens:Emit(5)
		pbFX.Ring:Emit(5)
		pbFX.Wave:Emit(5)  

		game.Debris:AddItem(sfx1, 1)
		game.Debris:AddItem(sfx2, 1)

		task.delay(3, function()
			pbAnim:Stop()
			if pbFX then
				pbFX:Destroy()
			end
		end)
	end
end

return module
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Folder" referent="RBX710883a629a643708345bbbabd9516d7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">Animations</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="Animation" referent="RBX4c6b63aad8a343f580bd6e869f45a8ac">
					<Properties>
						<Content name="AnimationId"><url>rbxassetid://0</url></Content>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">PerfectBlock</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXb5445a7359e440dbbf9ce7b46f33f7aa">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">FastCastRedux</string>
				<string name="ScriptGuid">{CC894BAC-71A9-49F5-B7C8-EA053B871A59}</string>
				<ProtectedString name="Source"><![CDATA[--!nocheck
-- ^ change to strict to crash studio c:

--[[
	Written by Eti the Spirit (18406183)
	
		The latest patch notes can be located here (and do note, the version at the top of this script might be outdated. I have a thing for forgetting to change it):
		>	https://etithespirit.github.io/FastCastAPIDocs/changelog
		
		*** If anything is broken, please don't hesitate to message me! ***
		
		YOU CAN FIND IMPORTANT USAGE INFORMATION HERE: https://etithespirit.github.io/FastCastAPIDocs
		YOU CAN FIND IMPORTANT USAGE INFORMATION HERE: https://etithespirit.github.io/FastCastAPIDocs
		YOU CAN FIND IMPORTANT USAGE INFORMATION HERE: https://etithespirit.github.io/FastCastAPIDocs
		
		YOU SHOULD ONLY CREATE ONE CASTER PER GUN.
		YOU SHOULD >>>NEVER<<< CREATE A NEW CASTER EVERY TIME THE GUN NEEDS TO BE FIRED.
		
		A caster (created with FastCast.new()) represents a "gun".
		When you consider a gun, you think of stats like accuracy, bullet speed, etc. This is the info a caster stores. 
	
	--
	
	This is a library used to create hitscan-based guns that simulate projectile physics.
	
	This means:
		- You don't have to worry about bullet lag / jittering
		- You don't have to worry about keeping bullets at a low speed due to physics being finnicky between clients
		- You don't have to worry about misfires in bullet's Touched event (e.g. where it may going so fast that it doesn't register)
		
	Hitscan-based guns are commonly seen in the form of laser beams, among other things. Hitscan simply raycasts out to a target
	and says whether it hit or not.
	
	Unfortunately, while reliable in terms of saying if something got hit or not, this method alone cannot be used if you wish
	to implement bullet travel time into a weapon. As a result of that, I made this library - an excellent remedy to this dilemma.
	
	FastCast is intended to be require()'d once in a script, as you can create as many casters as you need with FastCast.new()
	This is generally handy since you can store settings and information in these casters, and even send them out to other scripts via events
	for use.
	
	Remember -- A "Caster" represents an entire gun (or whatever is launching your projectiles), *NOT* the individual bullets.
	Make the caster once, then use the caster to fire your bullets. Do not make a caster for each bullet.
--]]

-----------------------------------------------------------
-------------------- MODULE DEFINITION --------------------
-----------------------------------------------------------

local FastCast = {}
FastCast.DebugLogging = false
FastCast.VisualizeCasts = false
FastCast.__index = FastCast
FastCast.__type = "FastCast" -- For compatibility with TypeMarshaller

-- Extra stuff
FastCast.HighFidelityBehavior = {
	Default = 1,
	Always = 3
}

-----------------------------------------------------------
----------------------- STATIC DATA -----------------------
-----------------------------------------------------------
local ActiveCastStatic = require(script.ActiveCast)
local Signal = require(script.Signal)
local table = require(script.Table)

-- Format params: methodName, ctorName
local ERR_NOT_INSTANCE = "Cannot statically invoke method '%s' - It is an instance method. Call it on an instance of this class created via %s"

-- Format params: paramName, expectedType, actualType
local ERR_INVALID_TYPE = "Invalid type for parameter '%s' (Expected %s, got %s)"

-- The name of the folder containing the 3D GUI elements for visualizing casts.
local FC_VIS_OBJ_NAME = "FastCastVisualizationObjects"

-- Format params: N/A
local ERR_OBJECT_DISPOSED = "This Caster has been disposed. It can no longer be used."

-----------------------------------------------------------
--------------------- TYPE DEFINITION ---------------------
-----------------------------------------------------------

-- This will inject all types into this context.
local TypeDefs = require(script.TypeDefinitions)
type CanPierceFunction = TypeDefs.CanPierceFunction
type GenericTable = TypeDefs.GenericTable
type Caster = TypeDefs.Caster
type FastCastBehavior = TypeDefs.FastCastBehavior
type CastTrajectory = TypeDefs.CastTrajectory
type CastStateInfo = TypeDefs.CastStateInfo
type CastRayInfo = TypeDefs.CastRayInfo
type ActiveCast = TypeDefs.ActiveCast

-----------------------------------------------------------
----------------------- STATIC CODE -----------------------
-----------------------------------------------------------

-- Tell the ActiveCast factory module what FastCast actually *is*.
ActiveCastStatic.SetStaticFastCastReference(FastCast)

-----------------------------------------------------------
------------------------- EXPORTS -------------------------
-----------------------------------------------------------

-- Constructor.
function FastCast.new()
	return setmetatable({
		LengthChanged = Signal.new("LengthChanged"),
		RayHit = Signal.new("RayHit"),
		RayPierced = Signal.new("RayPierced"),
		CastTerminating = Signal.new("CastTerminating"),
		WorldRoot = workspace
	}, FastCast)
end

-- Create a new ray info object.
-- This is just a utility alias with some extra type checking.
function FastCast.newBehavior(): FastCastBehavior
	-- raycastParams, maxDistance, acceleration, canPierceFunction, cosmeticBulletTemplate, cosmeticBulletContainer, autoIgnoreBulletContainer
	return {
		RaycastParams = nil,
		Acceleration = Vector3.new(),
		MaxDistance = 1000,
		CanPierceFunction = nil,
		HighFidelityBehavior = FastCast.HighFidelityBehavior.Default,
		HighFidelitySegmentSize = 0.5,
		CosmeticBulletTemplate = nil,
		CosmeticBulletProvider = nil,
		CosmeticBulletContainer = nil,
		AutoIgnoreContainer = true
	}
end

local DEFAULT_DATA_PACKET = FastCast.newBehavior()
function FastCast:Fire(origin: Vector3, direction: Vector3, velocity: Vector3 | number, castDataPacket: FastCastBehavior?): ActiveCast
	if castDataPacket == nil then castDataPacket = DEFAULT_DATA_PACKET end
	
	local cast = ActiveCastStatic.new(self, origin, direction, velocity, castDataPacket)
	cast.RayInfo.WorldRoot = self.WorldRoot
	return cast
end

-- Export
return FastCast]]></ProtectedString>
				<int64 name="SourceAssetId">4453855787</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXd18a1e2c24d54163958244a7628919ab">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Table</string>
					<string name="ScriptGuid">{7363D3E3-6F6A-4BDA-90EB-05FCD63DAA7B}</string>
					<ProtectedString name="Source"><![CDATA[--!nocheck
-- shut up jesser

--[[
	To use: local table = require(this)
	(Yes, override table.)

	Written by EtiTheSpirit. Adds custom functions to the `table` value provided by roblox (in normal cases, this would simply modify `table`, but Roblox has disabled that so we need to use a proxy)
	
	CHANGES:
		3 December 2019 @ 11:07 PM CST:
			+ Added table.join
			
			
		21 November 2019 @ 6:50 PM CST:
			+ Added new method bodies to skip/take using Luau's new methods. Drastic speed increases achieved. CREDITS: Halalaluyafail3 (See https://devforum.roblox.com/t/sandboxed-table-system-add-custom-methods-to-table/391177/12?u=etithespirit)
			+ Added table.retrieve as proposed by ^ under the name "table.range" as this name relays what it does a bit better, I think.
			+ Added table.skipAndTake as an alias method.

--]]

local RNG = Random.new()
local RobloxTable = table
local Table = {}

-- Returns true if the table contains the specified value.
Table.contains = function (tbl, value)
	return Table.indexOf(tbl, value) ~= nil -- This is kind of cheatsy but it promises the best performance.
end

-- A combo of table.find and table.keyOf -- This first attempts to find the ordinal index of your value, then attempts to find the lookup key if it can't find an ordinal index.
Table.indexOf = function (tbl, value)
	local fromFind = table.find(tbl, value)
	if fromFind then return fromFind end
	
	return Table.keyOf(tbl, value)
end

-- Returns the key of the specified value, or nil if it could not be found. Unlike IndexOf, this searches every key in the table, not just ordinal indices (arrays)
-- This is inherently slower due to how lookups work, so if your table is structured like an array, use table.find
Table.keyOf = function (tbl, value)
	for index, obj in pairs(tbl) do
		if obj == value then
			return index
		end
	end
	return nil
end

-- Only works on ordinal. yada yada.
Table.insertAndGetIndexOf = function (tbl, value)
	tbl[#tbl + 1] = value
	return #tbl
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Skips *n* objects in the table, and returns a new table that contains indices (n + 1) to (end of table)
Table.skip = function (tbl, n)
	return table.move(tbl, n+1, #tbl, 1, table.create(#tbl-n))
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Takes *n* objects from a table and returns a new table only containing those objects.
Table.take = function (tbl, n)
	return table.move(tbl, 1, n, 1, table.create(n))
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Takes the range of entries in this table in the range [start, finish] and returns that range as a table.
Table.range = function (tbl, start, finish)
	return table.move(tbl, start, finish, 1, table.create(finish - start + 1))
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). An alias that calls table.skip(skip), and then takes [take] entries from the resulting table.
Table.skipAndTake = function (tbl, skip, take)
	return table.move(tbl, skip + 1, skip + take, 1, table.create(take))
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Selects a random object out of tbl
Table.random = function (tbl)
	return tbl[RNG:NextInteger(1, #tbl)]
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Merges tbl0 and tbl1 together.
Table.join = function (tbl0, tbl1)
	local nt = table.create(#tbl0 + #tbl1)
	local t2 = table.move(tbl0, 1, #tbl0, 1, nt)
	return table.move(tbl1, 1, #tbl1, #tbl0 + 1, nt)
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Removes the specified object from this array.
Table.removeObject = function (tbl, obj)
	local index = Table.indexOf(tbl, obj)
	if index then
		table.remove(tbl, index)
	end
end

return setmetatable({}, {
	__index = function(tbl, index)
		if Table[index] ~= nil then
			return Table[index]
		else
			return RobloxTable[index]
		end
	end;

	__newindex = function(tbl, index, value)
		error("Add new table entries by editing the Module itself.")
	end;
})]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX018a58f62390455fbeb7794d0fe798aa">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ActiveCast</string>
					<string name="ScriptGuid">{D173B2C1-2494-4D4C-95BA-5F029EB6E3BA}</string>
					<ProtectedString name="Source"><![CDATA[--!nocheck
-- ^ change to strict to crash studio c:
-- ActiveCast class type.
-- The ActiveCast type represents a currently running cast.


-----------------------------------------------------------
--------------------- TYPE DEFINITION ---------------------
-----------------------------------------------------------

-- This will inject all types into this context.
local TypeDefs = require(script.Parent.TypeDefinitions)

type CanPierceFunction = TypeDefs.CanPierceFunction
type GenericTable = TypeDefs.GenericTable
type Caster = TypeDefs.Caster
type FastCastBehavior = TypeDefs.FastCastBehavior
type CastTrajectory = TypeDefs.CastTrajectory
type CastStateInfo = TypeDefs.CastStateInfo
type CastRayInfo = TypeDefs.CastRayInfo
type ActiveCast = TypeDefs.ActiveCast

local typeof = require(script.Parent.TypeMarshaller)

-----------------------------------------------------------
-------------------- MODULE DEFINITION --------------------
-----------------------------------------------------------

local ActiveCastStatic = {}
ActiveCastStatic.__index = ActiveCastStatic
ActiveCastStatic.__type = "ActiveCast" -- For compatibility with TypeMarshaller

-----------------------------------------------------------
----------------------- STATIC DATA -----------------------
-----------------------------------------------------------
local RunService = game:GetService("RunService")
local table = require(script.Parent.Table)
local FastCast = nil -- Static reference to the FastCast static module.

-- Format params: methodName, ctorName
local ERR_NOT_INSTANCE = "Cannot statically invoke method '%s' - It is an instance method. Call it on an instance of this class created via %s"

-- Format params: paramName, expectedType, actualType
local ERR_INVALID_TYPE = "Invalid type for parameter '%s' (Expected %s, got %s)"

-- The name of the folder containing the 3D GUI elements for visualizing casts in debug mode.
local FC_VIS_OBJ_NAME = "FastCastVisualizationObjects"

-- Format params: N/A
local ERR_OBJECT_DISPOSED = "This ActiveCast has been terminated. It can no longer be used."

-- If pierce callback has to run more than this many times, it will register a hit and stop calculating pierces.
-- This only applies for repeated piercings, e.g. the amount of parts that fit within the space of a single cast segment (NOT the whole bullet's trajectory over its entire lifetime)
local MAX_PIERCE_TEST_COUNT = 100

-----------------------------------------------------------
------------------------ UTILITIES ------------------------
-----------------------------------------------------------

-- Looks for a folder within workspace.Terrain that contains elements to visualize casts.
local function GetFastCastVisualizationContainer(): Instance
	local fcVisualizationObjects = workspace.Terrain:FindFirstChild(FC_VIS_OBJ_NAME)
	if fcVisualizationObjects ~= nil then
		return fcVisualizationObjects
	end
	
	fcVisualizationObjects = Instance.new("Folder")
	fcVisualizationObjects.Name = FC_VIS_OBJ_NAME
	fcVisualizationObjects.Archivable = false -- TODO: Keep this as-is? You can't copy/paste it if this is false. I have it false so that it doesn't linger in studio if you save with the debug data in there.
	fcVisualizationObjects.Parent = workspace.Terrain
	return fcVisualizationObjects
end

-----------------------------------------------------------
------------------------ DEBUGGING ------------------------
-----------------------------------------------------------

-- Print that runs only if debug mode is active.
local function PrintDebug(message: string)
	if FastCast.DebugLogging == true then
		print(message)
	end
end

-- Visualizes a ray. This will not run if FastCast.VisualizeCasts is false.
function DbgVisualizeSegment(castStartCFrame: CFrame, castLength: number): ConeHandleAdornment?
	if FastCast.VisualizeCasts ~= true then return nil end
	local adornment = Instance.new("ConeHandleAdornment")
	adornment.Adornee = workspace.Terrain
	adornment.CFrame = castStartCFrame
	adornment.Height = castLength
	adornment.Color3 = Color3.new()
	adornment.Radius = 0.25
	adornment.Transparency = 0.5
	adornment.Parent = GetFastCastVisualizationContainer()
	return adornment
end

-- Visualizes an impact. This will not run if FastCast.VisualizeCasts is false.
function DbgVisualizeHit(atCF: CFrame, wasPierce: boolean): SphereHandleAdornment?
	if FastCast.VisualizeCasts ~= true then return nil end
	local adornment = Instance.new("SphereHandleAdornment")
	adornment.Adornee = workspace.Terrain
	adornment.CFrame = atCF
	adornment.Radius = 0.4
	adornment.Transparency = 0.25
	adornment.Color3 = (wasPierce == false) and Color3.new(0.2, 1, 0.5) or Color3.new(1, 0.2, 0.2)
	adornment.Parent = GetFastCastVisualizationContainer()
	return adornment
end

-----------------------------------------------------------
------------------------ CORE CODE ------------------------
-----------------------------------------------------------

-- Thanks to zoebasil for supplying the velocity and position functions below. (I've modified these functions)
-- I was having a huge issue trying to get it to work and I had overcomplicated a bunch of stuff.
-- GetPositionAtTime is used in physically simulated rays (Where Caster.HasPhysics == true or the specific Fire has a specified acceleration).
-- This returns the location that the bullet will be at when you specify the amount of time the bullet has existed, the original location of the bullet, and the velocity it was launched with.
local function GetPositionAtTime(time: number, origin: Vector3, initialVelocity: Vector3, acceleration: Vector3): Vector3
	local force = Vector3.new((acceleration.X * time^2) / 2,(acceleration.Y * time^2) / 2, (acceleration.Z * time^2) / 2)
	return origin + (initialVelocity * time) + force
end

-- A variant of the function above that returns the velocity at a given point in time.
local function GetVelocityAtTime(time: number, initialVelocity: Vector3, acceleration: Vector3): Vector3
	return initialVelocity + acceleration * time
end

local function GetTrajectoryInfo(cast: ActiveCast, index: number): {[number]: Vector3}
	assert(cast.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	local trajectories = cast.StateInfo.Trajectories
	local trajectory = trajectories[index]
	local duration = trajectory.EndTime - trajectory.StartTime
	
	local origin = trajectory.Origin
	local vel = trajectory.InitialVelocity
	local accel = trajectory.Acceleration
	
	return {GetPositionAtTime(duration, origin, vel, accel), GetVelocityAtTime(duration, vel, accel)}
end

local function GetLatestTrajectoryEndInfo(cast: ActiveCast): {[number]: Vector3}
	assert(cast.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	return GetTrajectoryInfo(cast, #cast.StateInfo.Trajectories)
end

local function CloneCastParams(params: RaycastParams): RaycastParams
	local clone = RaycastParams.new()
	clone.CollisionGroup = params.CollisionGroup
	clone.FilterType = params.FilterType
	clone.FilterDescendantsInstances = params.FilterDescendantsInstances
	clone.IgnoreWater = params.IgnoreWater
	return clone
end

local function SendRayHit(cast: ActiveCast, resultOfCast: RaycastResult, segmentVelocity: Vector3, cosmeticBulletObject: Instance?)
	--cast.RayHit:Fire(cast, resultOfCast, segmentVelocity, cosmeticBulletObject)
	cast.Caster.RayHit:Fire(cast, resultOfCast, segmentVelocity, cosmeticBulletObject)
end

local function SendRayPierced(cast: ActiveCast, resultOfCast: RaycastResult, segmentVelocity: Vector3, cosmeticBulletObject: Instance?)
	--cast.RayPierced:Fire(cast, resultOfCast, segmentVelocity, cosmeticBulletObject)
	cast.Caster.RayPierced:Fire(cast, resultOfCast, segmentVelocity, cosmeticBulletObject)
end

local function SendLengthChanged(cast: ActiveCast, lastPoint: Vector3, rayDir: Vector3, rayDisplacement: number, segmentVelocity: Vector3, cosmeticBulletObject: Instance?)
	--cast.LengthChanged:Fire(cast, lastPoint, rayDir, rayDisplacement, segmentVelocity, cosmeticBulletObject)
	cast.Caster.LengthChanged:Fire(cast, lastPoint, rayDir, rayDisplacement, segmentVelocity, cosmeticBulletObject)
end

-- Simulate a raycast by one tick.
local function SimulateCast(cast: ActiveCast, delta: number, expectingShortCall: boolean)
	assert(cast.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	PrintDebug("Casting for frame.")
	local latestTrajectory = cast.StateInfo.Trajectories[#cast.StateInfo.Trajectories]
	
	local origin = latestTrajectory.Origin
	local totalDelta = cast.StateInfo.TotalRuntime - latestTrajectory.StartTime
	local initialVelocity = latestTrajectory.InitialVelocity
	local acceleration = latestTrajectory.Acceleration
	
	local lastPoint = GetPositionAtTime(totalDelta, origin, initialVelocity, acceleration)
	local lastVelocity = GetVelocityAtTime(totalDelta, initialVelocity, acceleration)
	local lastDelta = cast.StateInfo.TotalRuntime - latestTrajectory.StartTime
	
	cast.StateInfo.TotalRuntime += delta
	
	-- Recalculate this.
	totalDelta = cast.StateInfo.TotalRuntime - latestTrajectory.StartTime
	
	local currentTarget = GetPositionAtTime(totalDelta, origin, initialVelocity, acceleration)
	local segmentVelocity = GetVelocityAtTime(totalDelta, initialVelocity, acceleration) 
	local totalDisplacement = currentTarget - lastPoint -- This is the displacement from where the ray was on the last from to where the ray is now.
	
	local rayDir = totalDisplacement.Unit * segmentVelocity.Magnitude * delta
	local targetWorldRoot = cast.RayInfo.WorldRoot
	local resultOfCast = targetWorldRoot:Raycast(lastPoint, rayDir, cast.RayInfo.Parameters)
	
	local point = currentTarget
	local part: Instance? = nil
	local material = Enum.Material.Air
	local normal = Vector3.new()
	
	if (resultOfCast ~= nil) then
		point = resultOfCast.Position
		part = resultOfCast.Instance
		material = resultOfCast.Material
		normal = resultOfCast.Normal
	end
	
	local rayDisplacement = (point - lastPoint).Magnitude
	-- For clarity -- totalDisplacement is how far the ray would have traveled if it hit nothing,
	-- and rayDisplacement is how far the ray really traveled (which will be identical to totalDisplacement if it did indeed hit nothing)
	
	SendLengthChanged(cast, lastPoint, rayDir.Unit, rayDisplacement, segmentVelocity, cast.RayInfo.CosmeticBulletObject)
	cast.StateInfo.DistanceCovered += rayDisplacement
	
	local rayVisualization: ConeHandleAdornment? = nil
	if (delta > 0) then
		rayVisualization = DbgVisualizeSegment(CFrame.new(lastPoint, lastPoint + rayDir), rayDisplacement)
	end
	
	
	-- HIT DETECTED. Handle all that garbage, and also handle behaviors 1 and 2 (default behavior, go high res when hit) if applicable.
	-- CAST BEHAVIOR 2 IS HANDLED IN THE CODE THAT CALLS THIS FUNCTION.
	
	if part and part ~= cast.RayInfo.CosmeticBulletObject then
		local start = tick()
		PrintDebug("Hit something, testing now.")
		
		-- SANITY CHECK: Don't allow the user to yield or run otherwise extensive code that takes longer than one frame/heartbeat to execute.
		if (cast.RayInfo.CanPierceCallback ~= nil) then
			if expectingShortCall == false then
				if (cast.StateInfo.IsActivelySimulatingPierce) then
					cast:Terminate()
					error("ERROR: The latest call to CanPierceCallback took too long to complete! This cast is going to suffer desyncs which WILL cause unexpected behavior and errors. Please fix your performance problems, or remove statements that yield (e.g. wait() calls)")
					-- Use error. This should absolutely abort the cast.
				end
			end
			-- expectingShortCall is used to determine if we are doing a forced resolution increase, in which case this will be called several times in a single frame, which throws this error.
			cast.StateInfo.IsActivelySimulatingPierce = true
		end
		------------------------------
		
		if cast.RayInfo.CanPierceCallback == nil or (cast.RayInfo.CanPierceCallback ~= nil and cast.RayInfo.CanPierceCallback(cast, resultOfCast, segmentVelocity, cast.RayInfo.CosmeticBulletObject) == false) then
			PrintDebug("Piercing function is nil or it returned FALSE to not pierce this hit.")
			cast.StateInfo.IsActivelySimulatingPierce = false
			
			if (cast.StateInfo.HighFidelityBehavior == 2 and latestTrajectory.Acceleration ~= Vector3.new() and cast.StateInfo.HighFidelitySegmentSize ~= 0) then
				cast.StateInfo.CancelHighResCast = false -- Reset this here.
				
				if cast.StateInfo.IsActivelyResimulating then
					cast:Terminate()
					error("Cascading cast lag encountered! The caster attempted to perform a high fidelity cast before the previous one completed, resulting in exponential cast lag. Consider increasing HighFidelitySegmentSize.")
				end
				

				cast.StateInfo.IsActivelyResimulating = true
				
				-- This is a physics based cast and it needs to be recalculated.
				PrintDebug("Hit was registered, but recalculation is on for physics based casts. Recalculating to verify a real hit...")
				
				-- Split this ray segment into smaller segments of a given size.
				-- In 99% of cases, it won't divide evently (e.g. I have a distance of 1.25 and I want to divide into 0.1 -- that won't work)
				-- To fix this, the segments need to be stretched slightly to fill the space (rather than having a single shorter segment at the end)
				
				local numSegmentsDecimal = rayDisplacement / cast.StateInfo.HighFidelitySegmentSize -- say rayDisplacement is 5.1, segment size is 0.5 -- 10.2 segments
				local numSegmentsReal = math.floor(numSegmentsDecimal) -- 10 segments + 0.2 extra segments
				local realSegmentLength = rayDisplacement / numSegmentsReal -- this spits out 0.51, which isn't exact to the defined 0.5, but it's close
				
				-- Now the real hard part is converting this to time.
				local timeIncrement = delta / numSegmentsReal
				for segmentIndex = 1, numSegmentsReal do
					if cast.StateInfo.CancelHighResCast then
						cast.StateInfo.CancelHighResCast = false
						break
					end
					
					local subPosition = GetPositionAtTime(lastDelta + (timeIncrement * segmentIndex), origin, initialVelocity, acceleration)
					local subVelocity = GetVelocityAtTime(lastDelta + (timeIncrement * segmentIndex), initialVelocity, acceleration) 
					local subRayDir = subVelocity * delta
					local subResult = targetWorldRoot:Raycast(subPosition, subRayDir, cast.RayInfo.Parameters)
					
					local subDisplacement = (subPosition - (subPosition + subVelocity)).Magnitude
					
					if (subResult ~= nil) then
						local subDisplacement = (subPosition - subResult.Position).Magnitude
						local dbgSeg = DbgVisualizeSegment(CFrame.new(subPosition, subPosition + subVelocity), subDisplacement)
						if (dbgSeg ~= nil) then dbgSeg.Color3 = Color3.new(0.286275, 0.329412, 0.247059) end
						
						if cast.RayInfo.CanPierceCallback == nil or (cast.RayInfo.CanPierceCallback ~= nil and cast.RayInfo.CanPierceCallback(cast, subResult, subVelocity, cast.RayInfo.CosmeticBulletObject) == false) then
							-- Still hit even at high res
							cast.StateInfo.IsActivelyResimulating = false
							
							SendRayHit(cast, subResult, subVelocity, cast.RayInfo.CosmeticBulletObject)
							cast:Terminate()
							local vis = DbgVisualizeHit(CFrame.new(point), false)
							if (vis ~= nil) then vis.Color3 = Color3.new(0.0588235, 0.87451, 1) end
							return
						else
							-- Recalculating hit something pierceable instead.
							SendRayPierced(cast, subResult, subVelocity, cast.RayInfo.CosmeticBulletObject) -- This may result in CancelHighResCast being set to true.
							local vis = DbgVisualizeHit(CFrame.new(point), true)
							if (vis ~= nil) then vis.Color3 = Color3.new(1, 0.113725, 0.588235) end
							if (dbgSeg ~= nil) then dbgSeg.Color3 = Color3.new(0.305882, 0.243137, 0.329412) end
						end
					else
						local dbgSeg = DbgVisualizeSegment(CFrame.new(subPosition, subPosition + subVelocity), subDisplacement)
						if (dbgSeg ~= nil) then dbgSeg.Color3 = Color3.new(0.286275, 0.329412, 0.247059) end
						
					end
				end
				
				-- If the script makes it here, then it wasn't a real hit (higher resolution revealed that the low-res hit was faulty)
				-- Just let it keep going.
				cast.StateInfo.IsActivelyResimulating = false
			elseif (cast.StateInfo.HighFidelityBehavior ~= 1 and cast.StateInfo.HighFidelityBehavior ~= 3) then
				cast:Terminate()
				error("Invalid value " .. (cast.StateInfo.HighFidelityBehavior) .. " for HighFidelityBehavior.")
			else
				-- This is not a physics cast, or recalculation is off.
				PrintDebug("Hit was successful. Terminating.")
				SendRayHit(cast, resultOfCast, segmentVelocity, cast.RayInfo.CosmeticBulletObject)
				cast:Terminate()
				DbgVisualizeHit(CFrame.new(point), false)
				return
			end
		else
			PrintDebug("Piercing function returned TRUE to pierce this part.")
			if rayVisualization ~= nil then
				rayVisualization.Color3 = Color3.new(0.4, 0.05, 0.05) -- Turn it red to signify that the cast was scrapped.
			end
			DbgVisualizeHit(CFrame.new(point), true)
			
			local params = cast.RayInfo.Parameters
			local alteredParts = {}
			local currentPierceTestCount = 0
			local originalFilter = params.FilterDescendantsInstances
			local brokeFromSolidObject = false
			while true do
				-- So now what I need to do is redo this entire cast, just with the new filter list
								
				-- Catch case: Is it terrain?
				if resultOfCast.Instance:IsA("Terrain") then
					if material == Enum.Material.Water then
						-- Special case: Pierced on water?
						cast:Terminate()
						error("Do not add Water as a piercable material. If you need to pierce water, set cast.RayInfo.Parameters.IgnoreWater = true instead", 0)
					end
					warn("WARNING: The pierce callback for this cast returned TRUE on Terrain! This can cause severely adverse effects.")
				end
				
				if params.FilterType == Enum.RaycastFilterType.Blacklist then
					-- blacklist
					-- DO NOT DIRECTLY TABLE.INSERT ON THE PROPERTY
					local filter = params.FilterDescendantsInstances
					table.insert(filter, resultOfCast.Instance)
					table.insert(alteredParts, resultOfCast.Instance)
					params.FilterDescendantsInstances = filter
				else
					-- whitelist
					-- method implemeneted by custom table system
					-- DO NOT DIRECTLY TABLE.REMOVEOBJECT ON THE PROPERTY
					local filter = params.FilterDescendantsInstances
					table.removeObject(filter, resultOfCast.Instance)
					table.insert(alteredParts, resultOfCast.Instance)
					params.FilterDescendantsInstances = filter
				end
				
				SendRayPierced(cast, resultOfCast, segmentVelocity, cast.RayInfo.CosmeticBulletObject)
				
				-- List has been updated, so let's cast again.
				resultOfCast = targetWorldRoot:Raycast(lastPoint, rayDir, params)
				
				-- No hit? No simulation. Break.
				if resultOfCast == nil then
					break
				end
				
				if currentPierceTestCount >= MAX_PIERCE_TEST_COUNT then
					warn("WARNING: Exceeded maximum pierce test budget for a single ray segment (attempted to test the same segment " .. MAX_PIERCE_TEST_COUNT .. " times!)")
					break
				end
				currentPierceTestCount = currentPierceTestCount + 1;
				
				if cast.RayInfo.CanPierceCallback(cast, resultOfCast, segmentVelocity, cast.RayInfo.CosmeticBulletObject) == false then
					brokeFromSolidObject = true
					break
				end
			end
			
			-- Restore the filter to its default state.
			cast.RayInfo.Parameters.FilterDescendantsInstances = originalFilter
			cast.StateInfo.IsActivelySimulatingPierce = false
			
			if brokeFromSolidObject then
				-- We actually hit something while testing.
				PrintDebug("Broke because the ray hit something solid (" .. tostring(resultOfCast.Instance) .. ") while testing for a pierce. Terminating the cast.")
				SendRayHit(cast, resultOfCast, segmentVelocity, cast.RayInfo.CosmeticBulletObject)
				cast:Terminate()
				DbgVisualizeHit(CFrame.new(resultOfCast.Position), false)
				return
			end
			
			-- And exit the function here too.
		end
	end
	
	if (cast.StateInfo.DistanceCovered >= cast.RayInfo.MaxDistance) then
		-- SendRayHit(cast, nil, segmentVelocity, cast.RayInfo.CosmeticBulletObject)
		cast:Terminate()
		DbgVisualizeHit(CFrame.new(currentTarget), false)
	end
end

-----------------------------------------------------------
------------------------- EXPORTS -------------------------
-----------------------------------------------------------

-- Ctor
function ActiveCastStatic.new(caster: Caster, origin: Vector3, direction: Vector3, velocity: Vector3 | number, castDataPacket: FastCastBehavior): ActiveCast
	if typeof(velocity) == "number" then
		velocity = direction.Unit * velocity
	end	
	
	if (castDataPacket.HighFidelitySegmentSize <= 0) then
		error("Cannot set FastCastBehavior.HighFidelitySegmentSize <= 0!", 0)
	end
	
	-- Basic setup
	local cast = {
		Caster = caster,
		
		-- Data that keeps track of what's going on as well as edits we might make during runtime.
		StateInfo = {
			UpdateConnection = nil,
			Paused = false,
			TotalRuntime = 0,
			DistanceCovered = 0,
			HighFidelitySegmentSize = castDataPacket.HighFidelitySegmentSize,
			HighFidelityBehavior = castDataPacket.HighFidelityBehavior,
			IsActivelySimulatingPierce = false,
			IsActivelyResimulating = false,
			CancelHighResCast = false,
			Trajectories = {
				{
					StartTime = 0,
					EndTime = -1,
					Origin = origin,
					InitialVelocity = velocity,
					Acceleration = castDataPacket.Acceleration
				}
			}
		},
		
		-- Information pertaining to actual raycasting.
		RayInfo = {
			Parameters = castDataPacket.RaycastParams,
			WorldRoot = workspace,
			MaxDistance = castDataPacket.MaxDistance or 1000,
			CosmeticBulletObject = castDataPacket.CosmeticBulletTemplate, -- This is intended. We clone it a smidge of the way down.
			CanPierceCallback = castDataPacket.CanPierceFunction
		},
		
		UserData = {}
	}
	
	if cast.StateInfo.HighFidelityBehavior == 2 then
		cast.StateInfo.HighFidelityBehavior = 3
	end
	
	
	if cast.RayInfo.Parameters ~= nil then
		cast.RayInfo.Parameters = CloneCastParams(cast.RayInfo.Parameters)
	else
		cast.RayInfo.Parameters = RaycastParams.new()
	end

	local usingProvider = false
	if castDataPacket.CosmeticBulletProvider == nil then
		-- The provider is nil. Use a cosmetic object clone.
		if cast.RayInfo.CosmeticBulletObject ~= nil then
			cast.RayInfo.CosmeticBulletObject = cast.RayInfo.CosmeticBulletObject:Clone()
			cast.RayInfo.CosmeticBulletObject.CFrame = CFrame.new(origin, origin + direction)
			cast.RayInfo.CosmeticBulletObject.Parent = castDataPacket.CosmeticBulletContainer
		end
	else
		-- The provider is not nil.
		-- Is it what we want?
		if typeof(castDataPacket.CosmeticBulletProvider) == "PartCache" then
			-- this modded version of typeof is implemented up top.
			-- Aside from that, yes, it's a part cache. Good to go!
			
			if cast.RayInfo.CosmeticBulletObject ~= nil then
				-- They also set the template. Not good. Warn + clear this up.
				warn("Do not define FastCastBehavior.CosmeticBulletTemplate and FastCastBehavior.CosmeticBulletProvider at the same time! The provider will be used, and CosmeticBulletTemplate will be set to nil.")
				cast.RayInfo.CosmeticBulletObject = nil
				castDataPacket.CosmeticBulletTemplate = nil
			end

			cast.RayInfo.CosmeticBulletObject = castDataPacket.CosmeticBulletProvider:GetPart()
			cast.RayInfo.CosmeticBulletObject.CFrame = CFrame.new(origin, origin + direction)
			usingProvider = true
		else
			warn("FastCastBehavior.CosmeticBulletProvider was not an instance of the PartCache module (an external/separate model)! Are you inputting an instance created via PartCache.new? If so, are you on the latest version of PartCache? Setting FastCastBehavior.CosmeticBulletProvider to nil.")
			castDataPacket.CosmeticBulletProvider = nil
		end
	end

	local targetContainer: Instance;
	if usingProvider then
		targetContainer = castDataPacket.CosmeticBulletProvider.CurrentCacheParent
	else
		targetContainer = castDataPacket.CosmeticBulletContainer
	end
	
	if castDataPacket.AutoIgnoreContainer == true and targetContainer ~= nil then
		local ignoreList = cast.RayInfo.Parameters.FilterDescendantsInstances
		if table.find(ignoreList, targetContainer) == nil then
			table.insert(ignoreList, targetContainer)
			cast.RayInfo.Parameters.FilterDescendantsInstances = ignoreList
		end
	end
	
	local event
	if RunService:IsClient() then
		event = RunService.RenderStepped
	else
		event = RunService.Heartbeat
	end
	
	setmetatable(cast, ActiveCastStatic)
	
	cast.StateInfo.UpdateConnection = event:Connect(function (delta)
		if cast.StateInfo.Paused then return end
		
		PrintDebug("Casting for frame.")
		local latestTrajectory = cast.StateInfo.Trajectories[#cast.StateInfo.Trajectories]
		if (cast.StateInfo.HighFidelityBehavior == 3 and latestTrajectory.Acceleration ~= Vector3.new() and cast.StateInfo.HighFidelitySegmentSize > 0) then
			
			local timeAtStart = tick()
			
			if cast.StateInfo.IsActivelyResimulating then
				cast:Terminate()
				error("Cascading cast lag encountered! The caster attempted to perform a high fidelity cast before the previous one completed, resulting in exponential cast lag. Consider increasing HighFidelitySegmentSize.")
			end
			
			cast.StateInfo.IsActivelyResimulating = true
			
			-- Actually want to calculate this early to find displacement
			local origin = latestTrajectory.Origin
			local totalDelta = cast.StateInfo.TotalRuntime - latestTrajectory.StartTime
			local initialVelocity = latestTrajectory.InitialVelocity
			local acceleration = latestTrajectory.Acceleration
			
			local lastPoint = GetPositionAtTime(totalDelta, origin, initialVelocity, acceleration)
			local lastVelocity = GetVelocityAtTime(totalDelta, initialVelocity, acceleration)
			local lastDelta = cast.StateInfo.TotalRuntime - latestTrajectory.StartTime
			
			cast.StateInfo.TotalRuntime += delta
			
			-- Recalculate this.
			totalDelta = cast.StateInfo.TotalRuntime - latestTrajectory.StartTime
			
			local currentPoint = GetPositionAtTime(totalDelta, origin, initialVelocity, acceleration)
			local currentVelocity = GetVelocityAtTime(totalDelta, initialVelocity, acceleration) 
			local totalDisplacement = currentPoint - lastPoint -- This is the displacement from where the ray was on the last from to where the ray is now.
			
			local rayDir = totalDisplacement.Unit * currentVelocity.Magnitude * delta
			local targetWorldRoot = cast.RayInfo.WorldRoot
			local resultOfCast = targetWorldRoot:Raycast(lastPoint, rayDir, cast.RayInfo.Parameters)
			
			local point = currentPoint
			
			if (resultOfCast ~= nil) then
				point = resultOfCast.Position
			end
			
			local rayDisplacement = (point - lastPoint).Magnitude
			
			-- Now undo this. The line below in the for loop will add this time back gradually.
			cast.StateInfo.TotalRuntime -= delta
			
			-- And now that we have displacement, we can calculate segment size.
			local numSegmentsDecimal = rayDisplacement / cast.StateInfo.HighFidelitySegmentSize -- say rayDisplacement is 5.1, segment size is 0.5 -- 10.2 segments
			local numSegmentsReal = math.floor(numSegmentsDecimal) -- 10 segments + 0.2 extra segments
			if (numSegmentsReal == 0) then
				numSegmentsReal = 1
			end
			
			local timeIncrement = delta / numSegmentsReal
			
			for segmentIndex = 1, numSegmentsReal do
				if getmetatable(cast) == nil then return end -- Could have been disposed.
				if cast.StateInfo.CancelHighResCast then
					cast.StateInfo.CancelHighResCast = false
					break
				end
				PrintDebug("[" .. segmentIndex .. "] Subcast of time increment " .. timeIncrement)
				SimulateCast(cast, timeIncrement, true)
			end
			
			if getmetatable(cast) == nil then return end -- Could have been disposed.
			cast.StateInfo.IsActivelyResimulating = false
			
			if (tick() - timeAtStart) > 0.016 * 5 then
				warn("Extreme cast lag encountered! Consider increasing HighFidelitySegmentSize.")
			end
			
		else
			SimulateCast(cast, delta, false)
		end
	end)
	
	return cast
end

function ActiveCastStatic.SetStaticFastCastReference(ref)
	FastCast = ref
end

---- GETTERS AND SETTERS ----

local function ModifyTransformation(cast: ActiveCast, velocity: Vector3?, acceleration: Vector3?, position: Vector3?)
	local trajectories = cast.StateInfo.Trajectories
	local lastTrajectory = trajectories[#trajectories]
	
	-- NEW BEHAVIOR: Don't create a new trajectory if we haven't even used the current one.
	if lastTrajectory.StartTime == cast.StateInfo.TotalRuntime then
		-- This trajectory is fresh out of the box. Let's just change it since it hasn't actually affected the cast yet, so changes won't have adverse effects.
		if (velocity == nil) then
			velocity = lastTrajectory.InitialVelocity
		end
		if (acceleration == nil) then
			acceleration = lastTrajectory.Acceleration
		end
		if (position == nil) then
			position = lastTrajectory.Origin
		end	
		
		lastTrajectory.Origin = position
		lastTrajectory.InitialVelocity = velocity
		lastTrajectory.Acceleration = acceleration
	else
		-- The latest trajectory is done. Set its end time and get its location. 
		lastTrajectory.EndTime = cast.StateInfo.TotalRuntime
		
		local point, velAtPoint = unpack(GetLatestTrajectoryEndInfo(cast))
		
		if (velocity == nil) then
			velocity = velAtPoint
		end
		if (acceleration == nil) then
			acceleration = lastTrajectory.Acceleration
		end
		if (position == nil) then
			position = point
		end	
		table.insert(cast.StateInfo.Trajectories, {
			StartTime = cast.StateInfo.TotalRuntime,
			EndTime = -1,
			Origin = position,
			InitialVelocity = velocity,
			Acceleration = acceleration
		})
		cast.StateInfo.CancelHighResCast = true
	end
end

function ActiveCastStatic:SetVelocity(velocity: Vector3)
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("SetVelocity", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	ModifyTransformation(self, velocity, nil, nil)
end

function ActiveCastStatic:SetAcceleration(acceleration: Vector3)
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("SetAcceleration", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	ModifyTransformation(self, nil, acceleration, nil)
end

function ActiveCastStatic:SetPosition(position: Vector3)
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("SetPosition", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	ModifyTransformation(self, nil, nil, position)
end

function ActiveCastStatic:GetVelocity(): Vector3
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("GetVelocity", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	local currentTrajectory = self.StateInfo.Trajectories[#self.StateInfo.Trajectories]
	return GetVelocityAtTime(self.StateInfo.TotalRuntime - currentTrajectory.StartTime, currentTrajectory.InitialVelocity, currentTrajectory.Acceleration)
end

function ActiveCastStatic:GetAcceleration(): Vector3
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("GetAcceleration", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	local currentTrajectory = self.StateInfo.Trajectories[#self.StateInfo.Trajectories]
	return currentTrajectory.Acceleration
end

function ActiveCastStatic:GetPosition(): Vector3
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("GetPosition", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	local currentTrajectory = self.StateInfo.Trajectories[#self.StateInfo.Trajectories]
	return GetPositionAtTime(self.StateInfo.TotalRuntime - currentTrajectory.StartTime, currentTrajectory.Origin, currentTrajectory.InitialVelocity, currentTrajectory.Acceleration)
end

---- ARITHMETIC ----

function ActiveCastStatic:AddVelocity(velocity: Vector3)
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("AddVelocity", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	self:SetVelocity(self:GetVelocity() + velocity)
end

function ActiveCastStatic:AddAcceleration(acceleration: Vector3)
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("AddAcceleration", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	self:SetAcceleration(self:GetAcceleration() + acceleration)
end

function ActiveCastStatic:AddPosition(position: Vector3)
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("AddPosition", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	self:SetPosition(self:GetPosition() + position)
end

---- STATE MODIFICATION ----

function ActiveCastStatic:Pause()
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("Pause", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	self.StateInfo.Paused = true
end

function ActiveCastStatic:Resume()
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("Resume", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	self.StateInfo.Paused = false
end

function ActiveCastStatic:Terminate()
	assert(getmetatable(self) == ActiveCastStatic, ERR_NOT_INSTANCE:format("Terminate", "ActiveCast.new(...)"))
	assert(self.StateInfo.UpdateConnection ~= nil, ERR_OBJECT_DISPOSED)
	
	-- First: Set EndTime on the latest trajectory since it is now done simulating.
	local trajectories = self.StateInfo.Trajectories
	local lastTrajectory = trajectories[#trajectories]
	lastTrajectory.EndTime = self.StateInfo.TotalRuntime
	
	-- Disconnect the update connection.
	self.StateInfo.UpdateConnection:Disconnect()
	
	-- Now fire CastTerminating
	self.Caster.CastTerminating:FireSync(self)
	
	-- And now set the update connection object to nil.
	self.StateInfo.UpdateConnection = nil
	
	-- And nuke everything in the table + clear the metatable.
	self.Caster = nil
	self.StateInfo = nil
	self.RayInfo = nil
	self.UserData = nil
	setmetatable(self, nil)
end

return ActiveCastStatic]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXef44a873764c47e2a75264496da1e2e6">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Signal</string>
					<string name="ScriptGuid">{EE71379F-FF76-41EE-99AE-1FE6BDF6E157}</string>
					<ProtectedString name="Source"><![CDATA[--!nocheck
-- ^ change to strict to crash studio c:

-- A new implementation of RBXScriptSignal that uses proper Lua OOP.
-- This was explicitly made to transport other OOP objects.
-- I would be using BindableEvents, but they don't like cyclic tables (part of OOP objects with __index)

-- Inject types
local TypeDefs = require(script.Parent.TypeDefinitions)
type CanPierceFunction = TypeDefs.CanPierceFunction
type GenericTable = TypeDefs.GenericTable
type Caster = TypeDefs.Caster
type FastCastBehavior = TypeDefs.FastCastBehavior
type CastTrajectory = TypeDefs.CastTrajectory
type CastStateInfo = TypeDefs.CastStateInfo
type CastRayInfo = TypeDefs.CastRayInfo
type ActiveCast = TypeDefs.ActiveCast

local TestService = game:GetService("TestService")
local table = require(script.Parent.Table)

local SignalStatic = {}
SignalStatic.__index = SignalStatic
SignalStatic.__type = "Signal" -- For compatibility with TypeMarshaller
local ConnectionStatic = {}
ConnectionStatic.__index = ConnectionStatic
ConnectionStatic.__type = "SignalConnection" -- For compatibility with TypeMarshaller

export type Signal = {
	Name: string,
	Connections: {[number]: Connection},
	YieldingThreads: {[number]: BindableEvent}
}

export type Connection = {
	Signal: Signal?,
	Delegate: any,
	Index: number	
}

-- Format params: methodName, ctorName
local ERR_NOT_INSTANCE = "Cannot statically invoke method '%s' - It is an instance method. Call it on an instance of this class created via %s"

function SignalStatic.new(signalName: string): Signal
	local signalObj: Signal = {
		Name = signalName,
		Connections = {},
		YieldingThreads = {}
	}
	return setmetatable(signalObj, SignalStatic)
end

local function NewConnection(sig: Signal, func: any): Connection 
	local connectionObj: Connection = {
		Signal = sig,
		Delegate = func,
		Index = -1
	}
	return setmetatable(connectionObj, ConnectionStatic)
end

local function ThreadAndReportError(delegate: any, args: GenericTable, handlerName: string)
	local thread = coroutine.create(function ()
		delegate(unpack(args))
	end)
	local success, msg = coroutine.resume(thread)
	if not success then 
		-- For the love of god roblox PLEASE add the ability to customize message type in output statements.
		-- This "testservice" garbage at the start of my message is annoying as all hell.
		TestService:Error(string.format("Exception thrown in your %s event handler: %s", handlerName, msg))
		TestService:Checkpoint(debug.traceback(thread))
	end
end

function SignalStatic:Connect(func)
	assert(getmetatable(self) == SignalStatic, ERR_NOT_INSTANCE:format("Connect", "Signal.new()"))
	local connection = NewConnection(self, func)
	connection.Index = #self.Connections + 1
	table.insert(self.Connections, connection.Index, connection)
	return connection
end

function SignalStatic:Fire(...)
	assert(getmetatable(self) == SignalStatic, ERR_NOT_INSTANCE:format("Fire", "Signal.new()"))
	local args = table.pack(...)
	local allCons = self.Connections
	local yieldingThreads = self.YieldingThreads
	for index = 1, #allCons do
		local connection = allCons[index]
		if connection.Delegate ~= nil then
			-- Catch case for disposed signals.
			ThreadAndReportError(connection.Delegate, args, connection.Signal.Name)
		end
	end
	for index = 1, #yieldingThreads do
		local thread = yieldingThreads[index]
		if thread ~= nil then
			coroutine.resume(thread, ...)
		end
	end
end

function SignalStatic:FireSync(...)
	assert(getmetatable(self) == SignalStatic, ERR_NOT_INSTANCE:format("FireSync", "Signal.new()"))
	local args = table.pack(...)
	local allCons = self.Connections
	local yieldingThreads = self.YieldingThreads
	for index = 1, #allCons do
		local connection = allCons[index]
		if connection.Delegate ~= nil then
			-- Catch case for disposed signals.
			connection.Delegate(unpack(args))
		end
	end
	for index = 1, #yieldingThreads do
		local thread = yieldingThreads[index]
		if thread ~= nil then
			coroutine.resume(thread, ...)
		end
	end
end

function SignalStatic:Wait()
	assert(getmetatable(self) == SignalStatic, ERR_NOT_INSTANCE:format("Wait", "Signal.new()"))
	local args = {}
	local thread = coroutine.running()
	table.insert(self.YieldingThreads, thread)
	args = { coroutine.yield() }
	table.removeObject(self.YieldingThreads, thread)
	return unpack(args)
end

function SignalStatic:Dispose()
	assert(getmetatable(self) == SignalStatic, ERR_NOT_INSTANCE:format("Dispose", "Signal.new()"))
	local allCons = self.Connections
	for index = 1, #allCons do
		allCons[index]:Disconnect()
	end
	self.Connections = {}
	setmetatable(self, nil)
end

function ConnectionStatic:Disconnect()
	assert(getmetatable(self) == ConnectionStatic, ERR_NOT_INSTANCE:format("Disconnect", "private function NewConnection()"))
	table.remove(self.Signal.Connections, self.Index)
	self.SignalStatic = nil
	self.Delegate = nil
	self.YieldingThreads = {}
	self.Index = -1
	setmetatable(self, nil)
end

return SignalStatic]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXe7dd4fded6b14b7fbf2711d6529a2b32">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">TypeDefinitions</string>
					<string name="ScriptGuid">{F69BC8AA-D481-4DC6-A877-B8F36EEEFF57}</string>
					<ProtectedString name="Source"><![CDATA[--!nocheck
-- ^ change to strict to crash studio c:

-- Defines all FC types.
-- Any script that requires this will have these types defined.

--[[
local TypeDefs = require(script.TypeDefinitions)
type CanPierceFunction = TypeDefs.CanPierceFunction
type GenericTable = TypeDefs.GenericTable
type Caster = TypeDefs.Caster
type FastCastBehavior = TypeDefs.FastCastBehavior
type CastTrajectory = TypeDefs.CastTrajectory
type CastStateInfo = TypeDefs.CastStateInfo
type CastRayInfo = TypeDefs.CastRayInfo
type ActiveCast = TypeDefs.ActiveCast
--]]

-- Represents the function to determine piercing.
export type CanPierceFunction = (ActiveCast, RaycastResult, Vector3) -> boolean

-- Represents any table.
export type GenericTable = {[any]: any}

-- Represents a Caster :: https://etithespirit.github.io/FastCastAPIDocs/fastcast-objects/caster/
export type Caster = {
	WorldRoot: WorldRoot,
	LengthChanged: RBXScriptSignal,
	RayHit: RBXScriptSignal,
	RayPierced: RBXScriptSignal,
	CastTerminating: RBXScriptSignal,
	Fire: (Vector3, Vector3, Vector3 | number, FastCastBehavior) -> ()
}

-- Represents a FastCastBehavior :: https://etithespirit.github.io/FastCastAPIDocs/fastcast-objects/fcbehavior/
export type FastCastBehavior = {
	RaycastParams: RaycastParams?,
	MaxDistance: number,
	Acceleration: Vector3,
	HighFidelityBehavior: number,
	HighFidelitySegmentSize: number,
	CosmeticBulletTemplate: Instance?,
	CosmeticBulletProvider: any, -- Intended to be a PartCache. Dictated via TypeMarshaller.
	CosmeticBulletContainer: Instance?,
	AutoIgnoreContainer: boolean,
	CanPierceFunction: CanPierceFunction
}

-- Represents a CastTrajectory :: https://etithespirit.github.io/FastCastAPIDocs/fastcast-objects/casttrajectory/
export type CastTrajectory = {
	StartTime: number,
	EndTime: number,
	Origin: Vector3,
	InitialVelocity: Vector3,
	Acceleration: Vector3
}

-- Represents a CastStateInfo :: https://etithespirit.github.io/FastCastAPIDocs/fastcast-objects/caststateinfo/
export type CastStateInfo = {
	UpdateConnection: RBXScriptSignal,
	HighFidelityBehavior: number,
	HighFidelitySegmentSize: number,
	Paused: boolean,
	TotalRuntime: number,
	DistanceCovered: number,
	IsActivelySimulatingPierce: boolean,
	IsActivelyResimulating: boolean,
	CancelHighResCast: boolean,
	Trajectories: {[number]: CastTrajectory}
}

-- Represents a CastRayInfo :: https://etithespirit.github.io/FastCastAPIDocs/fastcast-objects/castrayinfo/
export type CastRayInfo = {
	Parameters: RaycastParams,
	WorldRoot: WorldRoot,
	MaxDistance: number,
	CosmeticBulletObject: Instance?,
	CanPierceCallback: CanPierceFunction
}

-- Represents an ActiveCast :: https://etithespirit.github.io/FastCastAPIDocs/fastcast-objects/activecast/
export type ActiveCast = {
	Caster: Caster,
	StateInfo: CastStateInfo,
	RayInfo: CastRayInfo,
	UserData: {[any]: any}
}

return {}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX3d34a26058814645a7534c9b0a397b7c">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">TypeMarshaller</string>
					<string name="ScriptGuid">{9E778A80-B4EA-4A06-9BF0-21D2129882A3}</string>
					<ProtectedString name="Source"><![CDATA[--!nocheck
-- ^ change to strict to crash studio c:

local oldtypeof = typeof
local function typeof(objIn: any): string
	local objType = oldtypeof(objIn)
	if objType ~= "table" then return objType end

	-- Could be a custom type if it's a table.
	local meta = getmetatable(objIn)
	if oldtypeof(meta) ~= "table" then return objType end

	-- Has a metatable that's an exposed table.
	local customType: string? = meta["__type"] -- I want to mandate that this is a string.
	if customType == nil then return objType end

	-- Has a type field
	return customType
end

return typeof]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX39f31ce87a4247fbbe218ee1d24ba88a">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Items</string>
				<string name="ScriptGuid">{E5B994EE-1B53-4047-A181-C6F78384357B}</string>
				<ProtectedString name="Source"><![CDATA[local Items = {}

Items.Info = {
	["Basic Katana"] = {
		Damage = 7,
		Price = 100,
		Description = "A basic weapon made out of steel.",
		Icon = "rbxassetid://8231510683",
		Level = 5
	},
	
	["Golf Bat"] = {
		Damage = 14,
		Price = 1000,
		Description = "Simple, but powerful.",
		Icon = "rbxassetid://8231511661",
		Level = 10
	},
	
	["Shiva"] = {
		Damage = 25,
		Price = 100000,
		Description = "A godly weapon...",
		Icon = "rbxassetid://8231513138",
		Level = 20
	},
	
	["Winterthorn"] = {
		Damage = 55,
		Price = 1000000,
		Description = "A noble and sharp spear once used by a god...",
		Icon = "rbxassetid://8231508764",
		Level = 20
	},
}

Items.GetItemInfo = function(ItemName, Information)
	if Items.Info[ItemName] then
		return Items.Info[ItemName][Information]
	end
end

return Items
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBXeb04e6611ff04e2bb9c6b493d7b3798e">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">RaycastHitboxV4</string>
				<string name="ScriptGuid">{E8A60198-C49E-43EA-AF42-2081DD13B3FC}</string>
				<ProtectedString name="Source"><![CDATA[--!strict
--- Main RaycastModuleV4 2021
-- @author Swordphin123

--[[
____________________________________________________________________________________________________________________________________________________________________________

	If you have any questions, feel free to message me on DevForum. Credits not neccessary but is appreciated.
	
	[ How To Use - Quick Start Guide ]
	
		1. Insert Attachments to places where you want your "hitbox" to be. For swords, I like to have attachments 1 stud apart and strung along the blade.
		2. Name those Attachments "DmgPoint" (so the script knows). You can configure what name the script will look for in the variables below.
		3. Open up a script. As an example, maybe we have a sword welded to the character or as a tool. Require this, and initialize:
				
				* Example Code
					
					local Damage = 10
					local Hitbox = RaycastHitbox.new(Character)
					
					Hitbox.OnHit:Connect(function(hit, humanoid)
						print(hit.Name)
						humanoid:TakeDamage(Damage)
					end)
					
					Hitbox:HitStart() --- Turns on the hitbox
					wait(10) --- Waits 10 seconds
					Hitbox:HitStop() --- Turns off the hitbox
		
		4. Profit. Refer to the API below for more information.
				

____________________________________________________________________________________________________________________________________________________________________________

	[ RaycastHitBox API ]

		* local RaycastHitbox = require(RaycastHitboxV4) ---Duh
				--- To use, insert this at the top of your scripts or wherever.


			[ FUNCTIONS ]

		* RaycastHitbox.new(Instance model | BasePart | nil)
				Description
					--- Preps the model and recursively finds attachments in it so it knows where to shoot rays out of later. If a hitbox exists for this
					--- object already, it simply returns the same hitbox.
				Arguments
					--- Instance:  (Like your character, a sword model, etc). Can be left nil in case you want an empty Hitbox or use SetPoints later
				Returns
					Instance HitboxObject
						
		* RaycastHitModule:GetHitbox(Instance model)
				Description
					--- Gets the HitboxObject if it exists.
				Returns
					--- HitboxObject if found, else nil
					
		
		
		* HitboxObject:SetPoints(Instance BasePart | Bone, table vectorPoints, string group)
				Description
					--- Merges existing Hitbox points with new Vector3 values relative to a part/bone position. This part can be a descendent of your original Hitbox model or
						can be an entirely different instance that is not related to the hitbox (example: Have a weapon with attachments and you can then add in more vector3
						points without instancing new attachments, great for dynamic hitboxes)
				Arguments
					--- Instance BasePart | Bone: Sets the part/bone that these vectorPoints will move in relation to the part's origin using Vector3ToWorldSpace
					--- table vectorPoints: Table of vector3 values.
					--- string group: optional group parameter
					
		* HitboxObject:RemovePoints(Instance BasePart | Bone, table vectorPoints)
				Description
					--- Remove given Vector3 values provided the part was the same as the ones you set in SetPoints
				Arguments
					--- Instance BasePart | Bone: Sets the part that these vectorPoints will be removed from in relation to the part's origin using Vector3ToWorldSpace
					--- table vectorPoints: Table of vector3 values.
		
		* HitboxObject:LinkAttachments(Instance attachment1, Instance attachment2)
				Description
					--- Set two attachments to be in a link. The Raycast module will raycast between these two points.
				Arguments
					--- Instance attachment1/attachment2: Attachment objects
					
		* HitboxObject:UnlinkAttachments(Instance attachment1)
				Description
					--- Removes the link of an attachment. Only needs the primary attachment (argument 1 of LinkAttachments) to work. Will automatically sever the connection
						to the second attachment.
				Arguments
					--- Instance attachment1: Attachment object
				
		* HitboxObject:HitStart(seconds)
				Description
					--- Starts drawing the rays. Will only damage the target once. Call HitStop to reset the target pool so you can damage the same targets again.
						If HitStart hits a target(s), OnHit event will be called.
				Arguments
					--- number seconds: Optional numerical value, the hitbox will automatically turn off after this amount of time has elapsed
					
		* HitboxObject:HitStop()
				Description
					--- Stops drawing the rays and resets the target pool. Will do nothing if no rays are being drawn from the initialized model.

		* HitboxObject.OnHit:Connect(returns: Instance part, returns: Instance humanoid, returns: RaycastResults, returns: String group)
				Description
					--- If HitStart hits a fresh new target, OnHit returns information about the hit target
				Arguments
					--- Instance part: Returns the part that the rays hit first
					--- Instance humanoid: Returns the Humanoid object 
					--- RaycastResults RaycastResults: Returns information about the last raycast results
					--- String group: Returns information on the hitbox's group
					
		* HitboxObject.OnUpdate:Connect(returns: Vector3 position)
				Description
					--- This fires every frame, for every point, returning a Vector3 value of its last position in space. Do not use expensive operations in this function.
		

			[ PROPERTIES ]

		* HitboxObject.RaycastParams: RaycastParams
				Description
					--- Takes in a RaycastParams object

		* HitboxObject.Visualizer: boolean
				Description
					--- Turns on or off the debug rays for this hitbox

		* HitboxObject.DebugLog: boolean
				Description
					--- Turns on or off output writing for this hitbox

		* HitboxObject.DetectionMode: number [1 - 3]
				Description
					--- Defaults to 1. Refer to DetectionMode subsection below for more information

			
			[ DETECTION MODES ]

		* RaycastHitbox.DetectionMode.Default
				Description
					--- Checks if a humanoid exists when this hitbox touches a part. The hitbox will not return humanoids it has already hit for the duration
					--- the hitbox has been active.

		* RaycastHitbox.DetectionMode.PartMode
				Description
					--- OnHit will return every hit part (in respect to the hitbox's RaycastParams), regardless if it's ascendant has a humanoid or not.
					--- OnHit will no longer return a humanoid so you will have to check it. The hitbox will not return parts it has already hit for the
					--- duration the hitbox has been active.

		* RaycastHitbox.DetectionMode.Bypass
				Description
					--- PERFORMANCE MAY SUFFER IF THERE ARE A LOT OF PARTS. Use only if necessary.
					--- Similar to PartMode, the hitbox will return every hit part. Except, it will keep returning parts even if it has already hit them.
					--- Warning: If you have multiple raycast or attachment points, each raycast will also call OnHit. Allows you to create your own
					--- filter system.
		
____________________________________________________________________________________________________________________________________________________________________________

--]]

-- Show where the red lines are going. You can change their colour and width in VisualizerCache
local SHOW_DEBUG_RAY_LINES: boolean = false

-- Allow RaycastModule to write to the output
local SHOW_OUTPUT_MESSAGES: boolean = false

-- The tag name. Used for cleanup.
local DEFAULT_COLLECTION_TAG_NAME: string = "_RaycastHitboxV4Managed"

--- Initialize required modules
local CollectionService: CollectionService = game:GetService("CollectionService")
local HitboxData = require(script.HitboxCaster)
local Signal = require(script.GoodSignal)

local RaycastHitbox = {}
RaycastHitbox.__index = RaycastHitbox
RaycastHitbox.__type = "RaycastHitboxModule"

-- Detection mode enums
RaycastHitbox.DetectionMode = {
	Default = 1,
	PartMode = 2,
	Bypass = 3,
}

-- Signal Type enums
RaycastHitbox.SignalType = {
	Default = 1,
	Single = 2, --- Defaults to Single connections only for legacy purposes
}

-- Signal mode enums


--- Creates or finds a hitbox object. Returns an hitbox object
-- @param required object parameter that takes in either a part or a model
function RaycastHitbox.new(object: any?)
	local hitbox: any

	if object and CollectionService:HasTag(object, DEFAULT_COLLECTION_TAG_NAME) then
		hitbox = HitboxData:_FindHitbox(object)
	else
		hitbox = setmetatable({
			RaycastParams = nil,
			DetectionMode = RaycastHitbox.DetectionMode.Default,
			HitboxRaycastPoints = {},
			HitboxPendingRemoval = false,
			HitboxStopTime = 0,
			HitboxObject = object,
			HitboxHitList = {},
			HitboxActive = false,
			Visualizer = SHOW_DEBUG_RAY_LINES,
			DebugLog = SHOW_OUTPUT_MESSAGES,
			SignalType = RaycastHitbox.SignalType.Single,
			OnUpdate = Signal.new(RaycastHitbox.SignalType.Single),
			OnHit = Signal.new(RaycastHitbox.SignalType.Single),
			Tag = DEFAULT_COLLECTION_TAG_NAME,
		}, HitboxData)

		hitbox:_Init()
	end

	return hitbox
end

--- Finds a hitbox object if valid, else return nil
-- @param Object instance
function RaycastHitbox:GetHitbox(object: any?)
	if object then
		return HitboxData:_FindHitbox(object)
	end
end

return RaycastHitbox]]></ProtectedString>
				<int64 name="SourceAssetId">7034457254</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Folder" referent="RBXf212f2736ea645fba5356e361eb09151">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">Solvers</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX6a984e384b7b4e83846f7969b9bfea61">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Attachment</string>
						<string name="ScriptGuid">{2067EC7E-C1E5-494A-8DAF-C8E223D3A306}</string>
						<ProtectedString name="Source"><![CDATA[--!strict
--- Calculates ray origin and directions for attachment-based raycast points
-- @author Swordphin123

local solver = {}

--- Solve direction and length of the ray by comparing current and last frame's positions
-- @param point type
function solver:Solve(point: {[string]: any}): (Vector3, Vector3)
	--- If LastPosition is nil (caused by if the hitbox was stopped previously), rewrite its value to the current point position
	if not point.LastPosition then
		point.LastPosition = point.Instances[1].WorldPosition
	end

	local origin: Vector3 = point.Instances[1].WorldPosition
	local direction: Vector3 = point.Instances[1].WorldPosition - point.LastPosition

	return origin, direction
end

function solver:UpdateToNextPosition(point: {[string]: any}): Vector3
	return point.Instances[1].WorldPosition
end

function solver:Visualize(point: {[string]: any}): CFrame
	return CFrame.lookAt(point.Instances[1].WorldPosition, point.LastPosition)
end

return solver]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX229645c03848453181ba3be1ec4a1b39">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">LinkAttachments</string>
						<string name="ScriptGuid">{71B09608-3952-4A46-AF63-29C7B2093115}</string>
						<ProtectedString name="Source"><![CDATA[--!strict
--- Calculates ray origin and directions for attachment-based raycast points
-- @author Swordphin123

local solver = {}

--- Solve direction and length of the ray by comparing both attachment1 and attachment2's positions
-- @param point type
function solver:Solve(point: {[string]: any}): (Vector3, Vector3)
	local origin: Vector3 = point.Instances[1].WorldPosition
	local direction: Vector3 = point.Instances[2].WorldPosition - point.Instances[1].WorldPosition

	return origin, direction
end

function solver:UpdateToNextPosition(point: {[string]: any}): Vector3
	return point.Instances[1].WorldPosition
end

function solver:Visualize(point: {[string]: any}): CFrame
	return CFrame.lookAt(point.Instances[1].WorldPosition, point.Instances[2].WorldPosition)
end

return solver]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX4ec0390c0d644e8980b896f2aa9f3338">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Vector3</string>
						<string name="ScriptGuid">{249EC329-C030-4B0D-90C5-DA346B65E947}</string>
						<ProtectedString name="Source"><![CDATA[--!strict
--- Calculates ray origin and directions for vector-based raycast points
-- @author Swordphin123

local solver = {}

local EMPTY_VECTOR: Vector3 = Vector3.new()

--- Solve direction and length of the ray by comparing current and last frame's positions
-- @param point type
function solver:Solve(point: {[string]: any}): (Vector3, Vector3)
	--- Translate localized Vector3 positions to world space values
	local originPart: BasePart = point.Instances[1]
	local vector: Vector3 = point.Instances[2]
	local pointToWorldSpace: Vector3 = originPart.Position + originPart.CFrame:VectorToWorldSpace(vector)

	--- If LastPosition is nil (caused by if the hitbox was stopped previously), rewrite its value to the current point position
	if not point.LastPosition then
		point.LastPosition = pointToWorldSpace
	end

	local origin: Vector3 = point.LastPosition
	local direction: Vector3 = pointToWorldSpace - (point.LastPosition or EMPTY_VECTOR)

	point.WorldSpace = pointToWorldSpace

	return origin, direction
end

function solver:UpdateToNextPosition(point: {[string]: any}): Vector3
	return point.WorldSpace
end

function solver:Visualize(point: {[string]: any}): CFrame
	return CFrame.lookAt(point.WorldSpace, point.LastPosition)
end

return solver]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX29eb9115622a4473896883929dd4dc8c">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Bone</string>
						<string name="ScriptGuid">{15E45089-DA07-4AE0-90BD-75691D5A6DD7}</string>
						<ProtectedString name="Source"><![CDATA[--!strict
--- Calculates ray origin and directions for vector-based raycast points
-- @author Swordphin123

local solver = {}

local EMPTY_VECTOR: Vector3 = Vector3.new()

--- Solve direction and length of the ray by comparing current and last frame's positions
-- @param point type
function solver:Solve(point: {[string]: any}): (Vector3, Vector3)
	--- Translate localized bone positions to world space values
	local originBone: Bone = point.Instances[1]
	local vector: Vector3 = point.Instances[2]
	local worldCFrame: CFrame = originBone.TransformedWorldCFrame
	local pointToWorldSpace: Vector3 = worldCFrame.Position + worldCFrame:VectorToWorldSpace(vector)

	--- If LastPosition is nil (caused by if the hitbox was stopped previously), rewrite its value to the current point position
	if not point.LastPosition then
		point.LastPosition = pointToWorldSpace
	end

	local origin: Vector3 = point.LastPosition
	local direction: Vector3 = pointToWorldSpace - (point.LastPosition or EMPTY_VECTOR)

	point.WorldSpace = pointToWorldSpace

	return origin, direction
end

function solver:UpdateToNextPosition(point: {[string]: any}): Vector3
	return point.WorldSpace
end

function solver:Visualize(point: {[string]: any}): CFrame
	return CFrame.lookAt(point.WorldSpace, point.LastPosition)
end

return solver]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXba7e2afc10d243c0b8142c5f181ed88c">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">HitboxCaster</string>
					<string name="ScriptGuid">{6888DD52-51D4-436D-A804-E4B32544EAEC}</string>
					<ProtectedString name="Source"><![CDATA[--!nocheck
--- Creates and manages the hitbox class
-- @author Swordphin123

-- Instance options
local DEFAULT_ATTACHMENT_INSTANCE: string = "DmgPoint"
local DEFAULT_GROUP_NAME_INSTANCE: string = "Group"

-- Debug / Test ray visual options
local DEFAULT_DEBUGGER_RAY_DURATION: number = 0.25

-- Debug Message options
local DEFAULT_DEBUG_LOGGER_PREFIX: string = "[ Raycast Hitbox V4 ]\n"
local DEFAULT_MISSING_ATTACHMENTS: string = "No attachments found in object: %s. Can be safely ignored if using SetPoints."
local DEFAULT_ATTACH_COUNT_NOTICE: string = "%s attachments found in object: %s."

-- Hitbox values
local MINIMUM_SECONDS_SCHEDULER: number = 1 / 60
local DEFAULT_SIMULATION_TYPE: RBXScriptSignal = game:GetService("RunService").Heartbeat

--- Variable definitions
local CollectionService: CollectionService = game:GetService("CollectionService")
local VisualizerCache = require(script.Parent.VisualizerCache)

local ActiveHitboxes: {[number]: any} = {}
local Solvers: Instance = script.Parent:WaitForChild("Solvers")

local Hitbox = {}
Hitbox.__index = Hitbox
Hitbox.__type = "RaycastHitbox"

Hitbox.CastModes = {
	LinkAttachments = 1,
	Attachment = 2,
	Vector3 = 3,
	Bone = 4,
}

--- Point type
type Point = {
	Group: string?,
	CastMode: number,
	LastPosition: Vector3?,
	WorldSpace: Vector3?,
	Instances: {[number]: Instance | Vector3}
}

-- AdornmentData type
type AdornmentData = VisualizerCache.AdornmentData

--- Activates the raycasts for the hitbox object.
--- The hitbox will automatically stop and restart if the hitbox was already casting.
-- @param optional number parameter to automatically turn off the hitbox after 'n' seconds
function Hitbox:HitStart(seconds: number?)
	if self.HitboxActive then
		self:HitStop()
	end

	if seconds then
		self.HitboxStopTime = os.clock() + math.max(MINIMUM_SECONDS_SCHEDULER, seconds)
	end

	self.HitboxActive = true
end

--- Disables the raycasts for the hitbox object, and clears all current hit targets.
--- Also automatically cancels any current time scheduling for the current hitbox.
function Hitbox:HitStop()
	self.HitboxActive = false
	self.HitboxStopTime = 0
	table.clear(self.HitboxHitList)
end

--- Queues the hitbox to be destroyed in the next frame
function Hitbox:Destroy()
	self.HitboxPendingRemoval = true

	if self.HitboxObject then
		CollectionService:RemoveTag(self.HitboxObject, self.Tag)
	end

	self:HitStop()
	self.OnHit:Destroy()
	self.OnUpdate:Destroy()
	self.HitboxRaycastPoints = nil
	self.HitboxObject = nil
end

--- Searches for attachments for the given instance (if applicable)
function Hitbox:Recalibrate()
	local descendants: {[number]: Instance} = self.HitboxObject:GetDescendants()
	local attachmentCount: number = 0

	--- Remove all previous attachments
	for i = #self.HitboxRaycastPoints, 1, -1 do
		if self.HitboxRaycastPoints[i].CastMode == Hitbox.CastModes.Attachment then
			table.remove(self.HitboxRaycastPoints, i)
		end
	end

	for _, attachment: any in ipairs(descendants) do
		if not attachment:IsA("Attachment") or attachment.Name ~= DEFAULT_ATTACHMENT_INSTANCE then
			continue
		end

		local group: string? = attachment:GetAttribute(DEFAULT_GROUP_NAME_INSTANCE)
		local point: Point = self:_CreatePoint(group, Hitbox.CastModes.Attachment, attachment.WorldPosition)

		table.insert(point.Instances, attachment)
		table.insert(self.HitboxRaycastPoints, point)

		attachmentCount += 1
	end

	if self.DebugLog then
		print(string.format("%s%s", DEFAULT_DEBUG_LOGGER_PREFIX,
			attachmentCount > 0 and string.format(DEFAULT_ATTACH_COUNT_NOTICE, attachmentCount, self.HitboxObject.Name) or
				string.format(DEFAULT_MISSING_ATTACHMENTS, self.HitboxObject.Name))
		)
	end
end

--- Creates a link between two attachments. The module will constantly raycast between these two attachments.
-- @param attachment1 Attachment object (can have a group attribute)
-- @param attachment2 Attachment object
function Hitbox:LinkAttachments(attachment1: Attachment, attachment2: Attachment)
	local group: string? = attachment1:GetAttribute(DEFAULT_GROUP_NAME_INSTANCE)
	local point: Point = self:_CreatePoint(group, Hitbox.CastModes.LinkAttachments)

	point.Instances[1] = attachment1
	point.Instances[2] = attachment2
	table.insert(self.HitboxRaycastPoints, point)
end

--- Removes the link of an attachment. Putting one of any of the two original attachments you used in LinkAttachment will automatically sever the other
-- @param attachment
function Hitbox:UnlinkAttachments(attachment: Attachment)
	for i = #self.HitboxRaycastPoints, 1, -1 do
		if #self.HitboxRaycastPoints[i].Instances >= 2 then
			if self.HitboxRaycastPoints[i].Instances[1] == attachment or self.HitboxRaycastPoints[i].Instances[2] == attachment then
				table.remove(self.HitboxRaycastPoints, i)
			end
		end
	end
end

--- Creates raycast points using only vector3 values.
-- @param object BasePart or Bone, the part you want the points to be locally offset from
-- @param table of vector3 values that are in local space relative to the basePart or bone
-- @param optional group string parameter that names the group these points belong to
function Hitbox:SetPoints(object: BasePart | Bone, vectorPoints: {[number]: Vector3}, group: string?)
	for _: number, vector: Vector3 in ipairs(vectorPoints) do
		local point: Point = self:_CreatePoint(group, Hitbox.CastModes[object:IsA("Bone") and "Bone" or "Vector3"])

		point.Instances[1] = object
		point.Instances[2] = vector
		table.insert(self.HitboxRaycastPoints, point)
	end
end

--- Removes raycast points using only vector3 values. Use the same vector3 table from SetPoints
-- @param object BasePart or Bone, the original instance you used for SetPoints
-- @param table of vector values that are in local space relative to the basePart
function Hitbox:RemovePoints(object: BasePart | Bone, vectorPoints: {[number]: Vector3})
	for i = #self.HitboxRaycastPoints, 1, -1 do
		local part = (self.HitboxRaycastPoints[i] :: Point).Instances[1]

		if part == object then
			local originalVector = (self.HitboxRaycastPoints[i] :: Point).Instances[2]

			for _: number, vector: Vector3 in ipairs(vectorPoints) do
				if vector == originalVector :: Vector3 then
					table.remove(self.HitboxRaycastPoints, i)
					break
				end
			end
		end
	end
end

--- Internal function that returns a point type
-- @param group string name
-- @param castMode numeric enum value
-- @param lastPosition Vector3 value
function Hitbox:_CreatePoint(group: string?, castMode: number, lastPosition: Vector3?): Point
	return {
		Group = group,
		CastMode = castMode,
		LastPosition = lastPosition,
		WorldSpace = nil,
		Instances = {},
	}
end

--- Internal function that finds an existing hitbox from a given instance
-- @param instance object
function Hitbox:_FindHitbox(object: any)
	for _: number, hitbox: any in ipairs(ActiveHitboxes) do
		if not hitbox.HitboxPendingRemoval and hitbox.HitboxObject == object then
			return hitbox
		end
	end
end

--- Runs for the very first time whenever a hitbox is created
--- Do not run this more than once, you may introduce memory leaks if you do so
function Hitbox:_Init()
	if not self.HitboxObject then return end

	local tagConnection: RBXScriptConnection

	local function onTagRemoved(instance: Instance)
		if instance == self.HitboxObject then
			tagConnection:Disconnect()
			self:Destroy()
		end
	end

	self:Recalibrate()
	table.insert(ActiveHitboxes, self)
	CollectionService:AddTag(self.HitboxObject, self.Tag)

	tagConnection = CollectionService:GetInstanceRemovedSignal(self.Tag):Connect(onTagRemoved)
end

local function Init()
	--- Reserve table sizing for solver tables
	local solversCache: {[number]: any} = table.create(#Solvers:GetChildren())

	DEFAULT_SIMULATION_TYPE:Connect(function(step: number)
		--- Iterate through all the hitboxes
		for i = #ActiveHitboxes, 1, -1 do
			--- Skip this hitbox if the hitbox will be garbage collected this frame
			if ActiveHitboxes[i].HitboxPendingRemoval then
				local hitbox: any = table.remove(ActiveHitboxes, i)
				table.clear(hitbox)
				setmetatable(hitbox, nil)
				continue
			end

			for _: number, point: Point in ipairs(ActiveHitboxes[i].HitboxRaycastPoints) do
				--- Reset this point if the hitbox is inactive
				if not ActiveHitboxes[i].HitboxActive then
					point.LastPosition = nil
					continue
				end

				--- Calculate rays
				local castMode: any = solversCache[point.CastMode]
				local origin: Vector3, direction: Vector3 = castMode:Solve(point)
				local raycastResult: RaycastResult = workspace:Raycast(origin, direction, ActiveHitboxes[i].RaycastParams)

				--- Draw debug rays
				if ActiveHitboxes[i].Visualizer then
					local adornmentData: AdornmentData? = VisualizerCache:GetAdornment()

					if adornmentData then
						local debugStartPosition: CFrame = castMode:Visualize(point)
						adornmentData.Adornment.Length = direction.Magnitude
						adornmentData.Adornment.CFrame = debugStartPosition
					end
				end

				--- Update the current point's position
				point.LastPosition = castMode:UpdateToNextPosition(point)

				--- If a ray detected a hit
				if raycastResult then
					local part: BasePart = raycastResult.Instance
					local model: Instance?
					local humanoid: Instance?
					local target: Instance?

					if ActiveHitboxes[i].DetectionMode == 1 then
						model = part:FindFirstAncestorOfClass("Model")
						if model then
							humanoid = model:FindFirstChildOfClass("Humanoid")
						end
						target = humanoid
					else
						target = part
					end

					--- Found a target. Fire the OnHit event
					if target then
						if ActiveHitboxes[i].DetectionMode <= 2 then
							if ActiveHitboxes[i].HitboxHitList[target] then
								continue
							else
								ActiveHitboxes[i].HitboxHitList[target] = true
							end
						end

						ActiveHitboxes[i].OnHit:Fire(part, humanoid, raycastResult, point.Group)
					end
				end

				--- Hitbox Time scheduler
				if ActiveHitboxes[i].HitboxStopTime > 0 then
					if ActiveHitboxes[i].HitboxStopTime <= os.clock() then
						ActiveHitboxes[i]:HitStop()
					end
				end

				--- OnUpdate event that fires every frame for every point
				ActiveHitboxes[i].OnUpdate:Fire(point.LastPosition)

				--- Update SignalType
				if ActiveHitboxes[i].OnUpdate._signalType ~= ActiveHitboxes[i].SignalType then
					ActiveHitboxes[i].OnUpdate._signalType = ActiveHitboxes[i].SignalType
					ActiveHitboxes[i].OnHit._signalType = ActiveHitboxes[i].SignalType
				end
			end
		end

		local adornmentsInUse: number = #VisualizerCache._AdornmentInUse

		--- Iterates through all the debug rays to see if they need to be cached or cleaned up
		if adornmentsInUse > 0 then
			for i = adornmentsInUse, 1, -1 do
				if (os.clock() - VisualizerCache._AdornmentInUse[i].LastUse) >= DEFAULT_DEBUGGER_RAY_DURATION then
					local adornment: AdornmentData? = table.remove(VisualizerCache._AdornmentInUse, i)

					if adornment then
						VisualizerCache:ReturnAdornment(adornment)
					end
				end
			end
		end
	end)

	--- Require all solvers
	for castMode: string, enum: number in pairs(Hitbox.CastModes) do
		local moduleScript: Instance? = Solvers:FindFirstChild(castMode)

		if moduleScript then
			local load = require(moduleScript)
			solversCache[enum] = load
		end
	end
end

Init()

return Hitbox]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX9354af9a54f04b28a8de33d9c8f655ec">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">VisualizerCache</string>
					<string name="ScriptGuid">{55D46C16-C187-49B8-B37C-FC308B81A774}</string>
					<ProtectedString name="Source"><![CDATA[--!strict
--- Cache LineHandleAdornments or create new ones if not in the cache
-- @author Swordphin123

-- Debug / Test ray visual options
local DEFAULT_DEBUGGER_RAY_COLOUR: Color3 = Color3.fromRGB(255, 0, 0)
local DEFAULT_DEBUGGER_RAY_WIDTH: number = 4
local DEFAULT_DEBUGGER_RAY_NAME: string = "_RaycastHitboxDebugLine"
local DEFAULT_FAR_AWAY_CFRAME: CFrame = CFrame.new(0, math.huge, 0)

local cache = {}
cache.__index = cache
cache.__type = "RaycastHitboxVisualizerCache"
cache._AdornmentInUse = {}
cache._AdornmentInReserve = {}

--- AdornmentData type
export type AdornmentData = {
	Adornment: LineHandleAdornment,
	LastUse: number
}

--- Internal function to create an AdornmentData type
--- Creates a LineHandleAdornment and a timer value
function cache:_CreateAdornment(): AdornmentData
	local line: LineHandleAdornment = Instance.new("LineHandleAdornment")
	line.Name = DEFAULT_DEBUGGER_RAY_NAME
	line.Color3 = DEFAULT_DEBUGGER_RAY_COLOUR
	line.Thickness = DEFAULT_DEBUGGER_RAY_WIDTH

	line.Length = 0
	line.CFrame = DEFAULT_FAR_AWAY_CFRAME

	line.Adornee = workspace.Terrain
	line.Parent = workspace.Terrain

	return {
		Adornment = line,
		LastUse = 0
	}
end

--- Gets an AdornmentData type. Creates one if there isn't one currently available.
function cache:GetAdornment(): AdornmentData?
	if #cache._AdornmentInReserve <= 0 then
		--- Create a new LineAdornmentHandle if none are in reserve
		local adornment: AdornmentData = cache:_CreateAdornment()
		table.insert(cache._AdornmentInReserve, adornment)
	end

	local adornment: AdornmentData? = table.remove(cache._AdornmentInReserve, 1)

	if adornment then
		adornment.Adornment.Visible = true
		adornment.LastUse = os.clock()
		table.insert(cache._AdornmentInUse, adornment)
	end

	return adornment
end

--- Returns an AdornmentData back into the cache.
-- @param AdornmentData
function cache:ReturnAdornment(adornment: AdornmentData)
	adornment.Adornment.Length = 0
	adornment.Adornment.Visible = false
	adornment.Adornment.CFrame = DEFAULT_FAR_AWAY_CFRAME
	table.insert(cache._AdornmentInReserve, adornment)
end

--- Clears the cache in reserve. Should only be used if you want to free up some memory.
--- If you end up turning on the visualizer again for this session, the cache will fill up again.
--- Does not clear adornments that are currently in use.
function cache:Clear()
	for i = #cache._AdornmentInReserve, 1, -1 do
		if cache._AdornmentInReserve[i].Adornment then
			cache._AdornmentInReserve[i].Adornment:Destroy()
		end

		table.remove(cache._AdornmentInReserve, i)
	end
end

return cache]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXf619427573aa47b8b27b3349a90127bd">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">GoodSignal</string>
					<string name="ScriptGuid">{1D393163-7008-4810-AB11-D0ABF99DAC5E}</string>
					<ProtectedString name="Source"><![CDATA[--------------------------------------------------------------------------------
--               Batched Yield-Safe Signal Implementation                     --
-- This is a Signal class which has effectively identical behavior to a       --
-- normal RBXScriptSignal, with the only difference being a couple extra      --
-- stack frames at the bottom of the stack trace when an error is thrown.     --
-- This implementation caches runner coroutines, so the ability to yield in   --
-- the signal handlers comes at minimal extra cost over a naive signal        --
-- implementation that either always or never spawns a thread.                --
--                                                                            --
-- API:                                                                       --
--   local Signal = require(THIS MODULE)                                      --
--   local sig = Signal.new()                                                 --
--   local connection = sig:Connect(function(arg1, arg2, ...) ... end)        --
--   sig:Fire(arg1, arg2, ...)                                                --
--   connection:Disconnect()                                                  --
--   sig:DisconnectAll()                                                      --
--   local arg1, arg2, ... = sig:Wait()                                       --
--                                                                            --
-- Licence:                                                                   --
--   Licenced under the MIT licence.                                          --
--                                                                            --
-- Authors:                                                                   --
--   stravant - July 31st, 2021 - Created the file.                           --
--   Swordphin123 - August 15th, 2021 - Minor edits for RaycastHitbox	      --
--------------------------------------------------------------------------------

-- The currently idle thread to run the next handler on
local freeRunnerThread = nil

-- Function which acquires the currently idle handler runner thread, runs the
-- function fn on it, and then releases the thread, returning it to being the
-- currently idle one.
-- If there was a currently idle runner thread already, that's okay, that old
-- one will just get thrown and eventually GCed.
local function acquireRunnerThreadAndCallEventHandler(fn, ...)
	local acquiredRunnerThread = freeRunnerThread
	freeRunnerThread = nil
	fn(...)
	-- The handler finished running, this runner thread is free again.
	freeRunnerThread = acquiredRunnerThread
end

-- Coroutine runner that we create coroutines of. The coroutine can be 
-- repeatedly resumed with functions to run followed by the argument to run
-- them with.
local function runEventHandlerInFreeThread(...)
	acquireRunnerThreadAndCallEventHandler(...)
	while true do
		acquireRunnerThreadAndCallEventHandler(coroutine.yield())
	end
end

-- Connection class
local Connection = {}
Connection.__index = Connection

function Connection.new(signal, fn)
	return setmetatable({
		_connected = true,
		_signal = signal,
		_fn = fn,
		_next = false,
	}, Connection)
end

function Connection:Disconnect()
	assert(self._connected, "Can't disconnect a connection twice.", 2)
	self._connected = false

	-- Unhook the node, but DON'T clear it. That way any fire calls that are
	-- currently sitting on this node will be able to iterate forwards off of
	-- it, but any subsequent fire calls will not hit it, and it will be GCed
	-- when no more fire calls are sitting on it.
	if self._signal._handlerListHead == self then
		self._signal._handlerListHead = self._next
	else
		local prev = self._signal._handlerListHead
		while prev and prev._next ~= self do
			prev = prev._next
		end
		if prev then
			prev._next = self._next
		end
	end
end

-- Make Connection strict
setmetatable(Connection, {
	__index = function(tb, key)
		error(("Attempt to get Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(tb, key, value)
		error(("Attempt to set Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end
})

-- Signal class
local Signal = {}
Signal.__index = Signal

function Signal.new(signal)
	return setmetatable({
		_handlerListHead = false,
		_signalType = signal
	}, Signal)
end

function Signal:Connect(fn)
	local connection = Connection.new(self, fn)

	if self._signalType == 1 and self._handlerListHead then
		connection._next = self._handlerListHead
		self._handlerListHead = connection
	else
		self._handlerListHead = connection
	end

	return connection
end

-- Disconnect all handlers. Since we use a linked list it suffices to clear the
-- reference to the head handler.
function Signal:Destroy()
	self._handlerListHead = false
end

-- Signal:Fire(...) implemented by running the handler functions on the
-- coRunnerThread, and any time the resulting thread yielded without returning
-- to us, that means that it yielded to the Roblox scheduler and has been taken
-- over by Roblox scheduling, meaning we have to make a new coroutine runner.
function Signal:Fire(...)
	local item = self._handlerListHead
	while item do
		if item._connected then
			if not freeRunnerThread then
				freeRunnerThread = coroutine.create(runEventHandlerInFreeThread)
			end
			task.spawn(freeRunnerThread, item._fn, ...)
		end
		item = item._next
	end
end

-- Implement Signal:Wait() in terms of a temporary connection using
-- a Signal:Connect() which disconnects itself.
function Signal:Wait()
	local waitingCoroutine = coroutine.running()
	local cn;
	cn = self:Connect(function(...)
		cn:Disconnect()
		task.spawn(waitingCoroutine, ...)
	end)
	return coroutine.yield()
end

-- Make signal strict
setmetatable(Signal, {
	__index = function(tb, key)
		error(("Attempt to get Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(tb, key, value)
		error(("Attempt to set Signal::%s (not a valid member)"):format(tostring(key)), 2)
	end
})


return Signal]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXc9fa3014221a4a76abf41c40d5e93989">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">RockScript</string>
				<string name="ScriptGuid">{86A4452F-59D4-498D-B000-E46BE90CFC7E}</string>
				<ProtectedString name="Source"><![CDATA[local GroundModule = {}
local TS = game:GetService("TweenService")
function GroundModule.Ground(part,ZSize,SC,Num,Time)
	local posi = CFrame.new(part.Position)
	local cfangle = posi * CFrame.Angles(0,math.rad(math.random(-360,360)),0)
	for v = 1,Num do
		local partclone = script.Part:Clone()
		partclone.Anchored = true
		partclone.CFrame = cfangle * CFrame.Angles(0,math.rad(360/Num*v),0)
		partclone.CFrame = partclone.CFrame * CFrame.new(0,-SC/2,0)
		local cf1 =  partclone.CFrame * CFrame.new(0,2,-10)
		local cf2 = partclone.CFrame * CFrame.new(0,2,-ZSize) * CFrame.Angles(math.rad(math.random(-360,360)),math.rad(math.random(-360,360)),math.rad(math.random(-360,360)))
		game.Debris:AddItem(partclone,Time+1)
		local partonray,findrayatend = workspace:FindPartOnRayWithWhitelist(Ray.new(cf2.p+ Vector3.new(0,10,0),CFrame.new(cf2.p).UpVector*-20),{workspace})
		if partonray then
			local cf3 = nil
			partclone.Color = partonray.Color
			partclone.Material = partonray.Material
			cf3 = CFrame.new(findrayatend) * CFrame.Angles(math.rad(math.random(-360,360)),math.rad(math.random(-360,360)),math.rad(math.random(-360,360)))
			partclone.Parent = workspace
			if part == nil then
				TS:Create(partclone,TweenInfo.new(.27,Enum.EasingStyle.Exponential,Enum.EasingDirection.In,0,false,0),
{
						CFrame = cf3}):Play()
				TS:Create(partclone.Mesh,TweenInfo.new(.27,Enum.EasingStyle.Exponential,Enum.EasingDirection.InOut,0,false,0),
					{
						Scale = Vector3.new(SC,SC,SC)* (math.random(50,100)/100)
					}
				):Play()
			else
				partclone.CFrame = cf3
				partclone.Mesh.Scale = Vector3.new(SC,SC,SC)* (math.random(50,100)/100)
			end
			if part == nil then
				wait(.25)
			end
			local weld = nil
			if partonray:IsDescendantOf(workspace)== false and partonray.Anchored == false then
				weld = Instance.new("Weld",partclone)
				weld.C0 = partonray.CFrame:inverse()*partclone.CFrame
				weld.Part0 = partonray
				weld.Part1= partclone
				partclone.Anchored = false
			end
			delay(Time,function()
				if partclone and partclone:FindFirstChild("Mesh")==nil then
					partclone:Destroy()
					return
				end
				TS:Create(partclone.Mesh,TweenInfo.new(.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.Out,0,false,0),
					{
						Scale = Vector3.new(0,0,0)
					}
				):Play()
				if weld ==nil then
					TS:Create(partclone,TweenInfo.new(.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.Out,0,false,0),
						{
						CFrame = CFrame.new(partclone.CFrame.p)*CFrame.new(0,-partclone.Size.X,0)
						}
					):play()
				end
				game.Debris:AddItem(partclone,1)
			end)
		else
			partclone:Destroy()
		end
	end
end
return GroundModule
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Part" referent="RBXd1da7315fef245e3918a47680e964dfd">
				<Properties>
					<bool name="Anchored">false</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AudioCanCollide">true</bool>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>3563.55981</X>
						<Y>202.514954</Y>
						<Z>-1702.93738</Z>
						<R00>1</R00>
						<R01>7.45057971e-09</R01>
						<R02>2.56603343e-19</R02>
						<R10>-7.45057971e-09</R10>
						<R11>1</R11>
						<R12>-4.41650538e-09</R12>
						<R20>-3.31621307e-17</R20>
						<R21>4.41650538e-09</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CanQuery">true</bool>
					<bool name="CanTouch">true</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="CastShadow">true</bool>
					<string name="CollisionGroup">Default</string>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="EnableFluidForces">true</bool>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="MaterialVariantSerialized"></string>
					<string name="Name">Part</string>
					<CoordinateFrame name="PivotOffset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
				<Item class="BlockMesh" referent="RBX463a8a55f42a4c9cb09a49cb50166ce9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Bevel">0</float>
						<float name="Bevel Roundness">0</float>
						<float name="Bulge">0</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">Mesh</string>
						<Vector3 name="Offset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<Vector3 name="Scale">
							<X>1</X>
							<Y>1</Y>
							<Z>1</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Vector3 name="VertexColor">
							<X>1</X>
							<Y>1</Y>
							<Z>1</Z>
						</Vector3>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXe231b2a3e52a4acc93ffd658f650401a">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">RocksModule</string>
				<string name="ScriptGuid">{36283D17-20CC-4091-B4CB-556332B10379}</string>
				<ProtectedString name="Source"><![CDATA[local Rocks = {}

local TS = game:GetService("TweenService")
local RS = game:GetService("ReplicatedStorage")
local PS = game:GetService("PhysicsService")
local RunService = game:GetService("RunService")

local Modules = RS.Modules
local partCacheMod = require(Modules.PartCache)

local debrisFolder
if not workspace:FindFirstChild("Debris") then
	debrisFolder = Instance.new("Folder")
	debrisFolder.Name = "Debris"
	debrisFolder.Parent = workspace
else
	debrisFolder = workspace.Debris
end

local cacheFolder
if not debrisFolder:FindFirstChild("Parts") then
	cacheFolder = Instance.new("Folder")
	cacheFolder.Name = "Parts"
	cacheFolder.Parent = debrisFolder
else
	cacheFolder = workspace.Debris.Parts
end

local partCache = partCacheMod.new(Instance.new("Part"), 1000, cacheFolder)

function Rocks.BlockExplosion(TargetCFrame, sizeMin, sizeMax, minAmount, maxAmount, onFire)
	local random = Random.new(math.random(-20000, 20000))

	for partAdd = 1, math.random(minAmount, maxAmount) do
		local size = random:NextNumber(sizeMin, sizeMax)

		local origin = TargetCFrame.Position
		local direction = Vector3.new(0,-100,0)

		local Params = RaycastParams.new()
		Params.FilterDescendantsInstances = {debrisFolder}
		Params.FilterType = Enum.RaycastFilterType.Blacklist

		local raycastResult = workspace:Raycast(origin, direction, Params)

		local ray = Ray.new(origin + Vector3.new(0, 3, 0), Vector3.new(0, -50, 0))
		local hit, vec2Pos, surfaceNormal = workspace:FindPartOnRayWithIgnoreList(ray, {debrisFolder})

		if hit then
			local hitPart = hit

			local Effect = partCache:GetPart()
			Effect.Transparency = 0
			Effect.Anchored = false

			Effect.Material = hitPart.Material
			Effect.Color = hitPart.Color
			Effect.Size = Vector3.new(size,size,size)

			Effect.CFrame = TargetCFrame * CFrame.Angles(math.rad(math.random(-180, 180)), math.rad(math.random(15, 165)), math.rad(math.random(-180, 180)))

			Effect.CanCollide = true
			Effect.CanTouch = false
			Effect.CanQuery = false

			if onFire then
				local fireFX1 = script.OnFire.OnFire:Clone()
				local fireFX2 = script.OnFire.OnFireWisps:Clone()
				local fireFX3 = script.OnFire.OnFireSparks:Clone()
				local fireLight = script.OnFire.PointLight:Clone()

				fireFX1.Parent = Effect
				fireFX2.Parent = Effect
				fireFX3.Parent = Effect
				fireLight.Parent = Effect

				task.delay(2, function()
					TS:Create(fireLight, TweenInfo.new(0.9, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Brightness = 0, Range = 0})
					fireFX1.Enabled = false
					fireFX2.Enabled = false
					fireFX3.Enabled = false
				end)

				game.Debris:AddItem(fireFX1, 3.5)
				game.Debris:AddItem(fireFX2, 3.5)
				game.Debris:AddItem(fireFX3, 3.5)
				game.Debris:AddItem(fireLight, 3.5)
			end

			local db = false

			task.delay(2.9, function()
				local endTween = TS:Create(Effect, TweenInfo.new(0.6, Enum.EasingStyle.Back), {Size = Vector3.new(0,0,0)}):Play()
			end)

			local EffectVelocity = Instance.new("BodyVelocity", Effect)
			EffectVelocity.MaxForce = Vector3.new(0.5, 2, 0.5) * 100000;
			EffectVelocity.Velocity = Vector3.new(0.5, 2, 0.5) * Effect.CFrame.LookVector * math.random(50, 70)

			game.Debris:AddItem(EffectVelocity, 0.3)
			task.delay(3.5, function()
				partCache:ReturnPart(Effect)
			end)
		end
	end
end

function Rocks.Ground(Pos, Distance, Size, filter, MaxRocks, Ice, despawnTime)
	local random = Random.new()
	
	local angle = 30
	local otherAngle = 360/MaxRocks
	local params = RaycastParams.new()
	params.FilterType = Enum.RaycastFilterType.Blacklist
	params.FilterDescendantsInstances = filter or {game.Players.LocalPlayer.Character, cacheFolder, debrisFolder}
	local size
	size = Size or Vector3.new(2, 2, 2)
	local pos = Pos
	despawnTime = despawnTime or 3
	
	local fxPart = Instance.new("Part")
	fxPart.Transparency = 1
	fxPart.Anchored = true
	fxPart.Position = Pos
	fxPart.Size = Vector3.new()
	
	fxPart.Parent = workspace.Debris
	
	local ray = workspace:Raycast(Pos + Vector3.new(0, 1, 0), Vector3.new(0, -25, 0), params)
	if ray then
		local dustFX = script.Dust:Clone()
		dustFX.Color = ColorSequence.new(ray.Instance.Color)
		
		dustFX.Parent = fxPart
		dustFX:Emit(dustFX:GetAttribute("EmitCount"))
	end
	
	
	
	game.Debris:AddItem(fxPart, 3)
	
	local function OuterRocksLoop ()
		for i = 1, MaxRocks do
			local cf = CFrame.new(Pos)
			local newCF = cf * CFrame.fromEulerAnglesXYZ(0, math.rad(angle), 0) * CFrame.new(Distance/2 + Distance/2.7, 10, 0)
			local ray = workspace:Raycast(newCF.Position, Vector3.new(0, -20, 0), params)
			angle += otherAngle
			if ray then
				local part = partCache:GetPart()
				local hoof = partCache:GetPart()
				
				part.CFrame = CFrame.new(ray.Position - Vector3.new(0, 0.5, 0), Pos) * CFrame.fromEulerAnglesXYZ(random:NextNumber(-.25, .5), random:NextNumber(-.25, .25), random:NextNumber(-.25, .25))
				part.Size = Vector3.new(size.X * 1.3, size.Y/1.4, size.Z * 1.3) * random:NextNumber(1, 1.5)
				
				hoof.Size = Vector3.new(part.Size.X * 1.01, part.Size.Y * 0.25, part.Size.Z * 1.01)
				hoof.CFrame = part.CFrame * CFrame.new(0, part.Size.Y/2 - hoof.Size.Y / 2.1, 0)
				
				part.Parent = cacheFolder
				hoof.Parent = cacheFolder
				
				if ray.Instance.Material == Enum.Material.Concrete or ray.Instance.Material == Enum.Material.Air or ray.Instance.Material == Enum.Material.Wood or ray.Instance.Material == Enum.Material.Neon or ray.Instance.Material == Enum.Material.WoodPlanks then
					part.Material = ray.Instance.Material	
					hoof.Material = ray.Instance.Material	
				else
					part.Material = Enum.Material.Concrete
					hoof.Material = ray.Instance.Material	
				end

				part.BrickColor = BrickColor.new("Dark grey")
				part.Anchored = true
				part.CanTouch = false
				part.CanCollide = false

				hoof.BrickColor = ray.Instance.BrickColor
				hoof.Anchored = true
				hoof.CanTouch = false
				hoof.CanCollide = false

				if Ice then
					part.BrickColor = BrickColor.new("Pastel light blue")
					hoof.BrickColor = BrickColor.new("Lily white")
					part.Material = Enum.Material.Ice
					hoof.Material = Enum.Material.Sand
				end
				
				task.delay(despawnTime, function()
					TS:Create(part,TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),{Size = Vector3.new(.01, .01, .01)}):Play()
					TS:Create(hoof,TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),{Size = Vector3.new(.01, .01, .01), CFrame = part.CFrame * CFrame.new(0, part.Size.Y/2 - part.Size.Y / 2.1, 0)}):Play()
					
					task.delay(0.6, function()
						partCache:ReturnPart(part)
						partCache:ReturnPart(hoof)
					end)
				end)
			end		
		end
	end

	local function InnerRocksLoop ()
		for i = 1, MaxRocks do
			local cf = CFrame.new(Pos)
			local newCF = cf * CFrame.fromEulerAnglesXYZ(0, math.rad(angle), 0) * CFrame.new(Distance/2 + Distance/10, 10, 0)
			local ray = game.Workspace:Raycast(newCF.Position, Vector3.new(0, -20, 0), params)
			angle += otherAngle
			if ray then
				local part = partCache:GetPart()
				local hoof = partCache:GetPart()

				part.CFrame = CFrame.new(ray.Position - Vector3.new(0, size.Y * 0.4, 0), Pos) * CFrame.fromEulerAnglesXYZ(random:NextNumber(-1,-0.3),random:NextNumber(-0.15,0.15),random:NextNumber(-.15,.15))
				part.Size = Vector3.new(size.X * 1.3, size.Y * 0.7, size.Z * 1.3) * random:NextNumber(1, 1.5)

				hoof.Size = Vector3.new(part.Size.X * 1.01, part.Size.Y * 0.25, part.Size.Z * 1.01)
				hoof.CFrame = part.CFrame * CFrame.new(0, part.Size.Y/2 - hoof.Size.Y / 2.1, 0)

				part.Parent = cacheFolder
				hoof.Parent = cacheFolder

				if ray.Instance.Material == Enum.Material.Concrete or ray.Instance.Material == Enum.Material.Air or ray.Instance.Material == Enum.Material.Wood or ray.Instance.Material == Enum.Material.Neon or ray.Instance.Material == Enum.Material.WoodPlanks then
					part.Material = ray.Instance.Material	
					hoof.Material = ray.Instance.Material	
				else
					part.Material = Enum.Material.Concrete --ray.Instance.Material	
					hoof.Material = ray.Instance.Material	
				end

				part.BrickColor = BrickColor.new("Dark grey") --ray.Instance.BrickColor
				part.Anchored = true
				part.CanTouch = false
				part.CanCollide = false

				hoof.BrickColor = ray.Instance.BrickColor
				hoof.Anchored = true
				hoof.CanTouch = false
				hoof.CanCollide = false

				if Ice then
					part.BrickColor = BrickColor.new("Pastel light blue")
					hoof.BrickColor = BrickColor.new("Lily white")
					part.Material = Enum.Material.Ice
					hoof.Material = Enum.Material.Sand
				end

				task.delay(despawnTime, function()
					TS:Create(part,TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),{Size = Vector3.new(.01, .01, .01)}):Play()
					TS:Create(hoof,TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),{Size = Vector3.new(.01, .01, .01), CFrame = part.CFrame * CFrame.new(0, part.Size.Y/2 - part.Size.Y / 2.1, 0)}):Play()

					task.delay(0.6, function()
						partCache:ReturnPart(part)
						partCache:ReturnPart(hoof)
					end)
				end)
			end		
		end
	end
	InnerRocksLoop()
	OuterRocksLoop()
end

function Rocks.OneLayerGround(Target, ZoneSize, PartSize, Amount, Duration)
	local posi = CFrame.new(Target.Position)
	local cfangle = posi * CFrame.Angles(0,math.rad(math.random(-360,360)),0)

	local folder = debrisFolder

	for v = 1, Amount do
		local partclone = partCache:GetPart()
		partclone.Anchored = true
		partclone.CFrame = cfangle * CFrame.Angles(0,math.rad(360/Amount*v),0)
		partclone.CFrame = partclone.CFrame * CFrame.new(0,-PartSize/2,0)

		local cf1 =  partclone.CFrame * CFrame.new(0,2,-10)
		local cf2 = partclone.CFrame * CFrame.new(0,2,-ZoneSize) * CFrame.Angles(math.rad(math.random(-360,360)),math.rad(math.random(-360,360)),math.rad(math.random(-360,360)))

		game.Debris:AddItem(partclone, Duration + 1)

		local partonray,findrayatend = workspace:FindPartOnRayWithIgnoreList(Ray.new(cf2.p+ Vector3.new(0,10,0),CFrame.new(cf2.p).UpVector*-20), {game.Players.LocalPlayer.Character, debrisFolder})

		if partonray then
			local cf3 = nil
			partclone.Color = partonray.Color
			partclone.Material = partonray.Material
			cf3 = CFrame.new(findrayatend) * CFrame.Angles(math.rad(math.random(-360,360)),math.rad(math.random(-360,360)),math.rad(math.random(-360,360)))
			partclone.Parent = folder

			if Target == nil then
				TS:Create(partclone,TweenInfo.new(.27,Enum.EasingStyle.Quad,Enum.EasingDirection.In,0,false,0),
					{
						CFrame = cf3}):Play()
				TS:Create(partclone.Mesh,TweenInfo.new(.27,Enum.EasingStyle.Quad,Enum.EasingDirection.InOut,0,false,0),
					{
						Scale = Vector3.new(PartSize,PartSize,PartSize)* (math.random(50,100)/100)
					}
				):Play()
			else
				partclone.CFrame = cf3
				partclone.Mesh.Scale = Vector3.new(PartSize,PartSize,PartSize)* (math.random(50,100)/100)
			end

			if Target == nil then
				task.wait(.25)
			end

			local weld = nil

			if partonray:IsDescendantOf(workspace)== false and partonray.Anchored == false then
				weld = Instance.new("Weld", partclone)
				weld.C0 = partonray.CFrame:inverse() * partclone.CFrame
				weld.Part0 = partonray
				weld.Part1= partclone
				partclone.Anchored = false
			end

			task.delay(Duration, function()
				if partclone and partclone:FindFirstChild("Mesh")==nil then
					partCache:ReturnPart(partclone)
					return
				end

				TS:Create(partclone.Mesh,TweenInfo.new(.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.Out,0,false,0),
					{
						Scale = Vector3.new(0,0,0)
					}
				):Play()

				if weld == nil then
					TS:Create(partclone,TweenInfo.new(.5,Enum.EasingStyle.Cubic,Enum.EasingDirection.Out,0,false,0),
						{
							CFrame = CFrame.new(partclone.CFrame.p)*CFrame.new(0,-partclone.Size.X,0)
						}
					):play()
				end

				game.Debris:AddItem(partclone,1)
			end)
		else
			partCache:ReturnPart(partclone)
		end
	end
end

return Rocks
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ParticleEmitter" referent="RBX9371df0533c7461cbc2b0466ee28b9e8">
				<Properties>
					<Vector3 name="Acceleration">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="AttributesSerialize">AQAAAAkAAABFbWl0Q291bnQGAAAAAACARkA=</BinaryString>
					<float name="Brightness">1.5</float>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<ColorSequence name="Color">0 0.74902 0.721569 0.580392 0 1 0.74902 0.721569 0.580392 0 </ColorSequence>
					<bool name="DefinesCapabilities">false</bool>
					<float name="Drag">5</float>
					<token name="EmissionDirection">1</token>
					<bool name="Enabled">false</bool>
					<NumberRange name="FlipbookFramerate">1 1 </NumberRange>
					<string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
					<token name="FlipbookLayout">0</token>
					<token name="FlipbookMode">0</token>
					<bool name="FlipbookStartRandom">false</bool>
					<NumberRange name="Lifetime">2 3 </NumberRange>
					<float name="LightEmission">0</float>
					<float name="LightInfluence">0</float>
					<bool name="LockedToPart">false</bool>
					<string name="Name">Dust</string>
					<token name="Orientation">0</token>
					<float name="Rate">35</float>
					<NumberRange name="RotSpeed">-90 90 </NumberRange>
					<NumberRange name="Rotation">-360 360 </NumberRange>
					<token name="Shape">0</token>
					<token name="ShapeInOut">0</token>
					<float name="ShapePartial">1</float>
					<token name="ShapeStyle">0</token>
					<NumberSequence name="Size">0 2 0 1 8 2 </NumberSequence>
					<int64 name="SourceAssetId">-1</int64>
					<NumberRange name="Speed">30 40 </NumberRange>
					<Vector2 name="SpreadAngle">
						<X>360</X>
						<Y>360</Y>
					</Vector2>
					<NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>rbxassetid://9232117588</url></Content>
					<float name="TimeScale">1</float>
					<NumberSequence name="Transparency">0 1 0 0.2 0.75 0 1 1 0 </NumberSequence>
					<float name="VelocityInheritance">0</float>
					<bool name="WindAffectsDrag">false</bool>
					<float name="ZOffset">0</float>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBXf2bd62b5f670428e91442882c30505b3">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">OnFire</string>
					<int64 name="SourceAssetId">8203931658</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ParticleEmitter" referent="RBX6978aa456535480c87cbbe5e5646e861">
					<Properties>
						<Vector3 name="Acceleration">
							<X>0</X>
							<Y>4.5</Y>
							<Z>0</Z>
						</Vector3>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">5</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<ColorSequence name="Color">0 1 0.32549 0.0117647 0 1 1 0.12549 0.0117647 0 </ColorSequence>
						<bool name="DefinesCapabilities">false</bool>
						<float name="Drag">5</float>
						<token name="EmissionDirection">4</token>
						<bool name="Enabled">true</bool>
						<NumberRange name="FlipbookFramerate">1 1 </NumberRange>
						<string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
						<token name="FlipbookLayout">0</token>
						<token name="FlipbookMode">0</token>
						<bool name="FlipbookStartRandom">false</bool>
						<NumberRange name="Lifetime">0.35 1.15 </NumberRange>
						<float name="LightEmission">1</float>
						<float name="LightInfluence">0</float>
						<bool name="LockedToPart">true</bool>
						<string name="Name">OnFire</string>
						<token name="Orientation">0</token>
						<float name="Rate">100</float>
						<NumberRange name="RotSpeed">-90 90 </NumberRange>
						<NumberRange name="Rotation">-360 360 </NumberRange>
						<token name="Shape">0</token>
						<token name="ShapeInOut">0</token>
						<float name="ShapePartial">1</float>
						<token name="ShapeStyle">0</token>
						<NumberSequence name="Size">0 0 0 0.0905 0.5 0.25 1 1 0.5 </NumberSequence>
						<int64 name="SourceAssetId">-1</int64>
						<NumberRange name="Speed">0 2.75 </NumberRange>
						<Vector2 name="SpreadAngle">
							<X>90</X>
							<Y>-90</Y>
						</Vector2>
						<NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>rbxassetid://6677363346</url></Content>
						<float name="TimeScale">1</float>
						<NumberSequence name="Transparency">0 0.46875 0.41875 1 1 0 </NumberSequence>
						<float name="VelocityInheritance">0</float>
						<bool name="WindAffectsDrag">false</bool>
						<float name="ZOffset">2</float>
					</Properties>
				</Item>
				<Item class="ParticleEmitter" referent="RBX5f83f00601d046f39fcd14285af43dcd">
					<Properties>
						<Vector3 name="Acceleration">
							<X>0</X>
							<Y>7</Y>
							<Z>0</Z>
						</Vector3>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">1</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<ColorSequence name="Color">0 1 0.32549 0.0117647 0 0.800333 1 0.250987 0.00837819 0 1 1 0.0705882 0.00392157 0 </ColorSequence>
						<bool name="DefinesCapabilities">false</bool>
						<float name="Drag">8</float>
						<token name="EmissionDirection">1</token>
						<bool name="Enabled">true</bool>
						<NumberRange name="FlipbookFramerate">1 1 </NumberRange>
						<string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
						<token name="FlipbookLayout">0</token>
						<token name="FlipbookMode">0</token>
						<bool name="FlipbookStartRandom">false</bool>
						<NumberRange name="Lifetime">0.65 1.45 </NumberRange>
						<float name="LightEmission">0.800000012</float>
						<float name="LightInfluence">0</float>
						<bool name="LockedToPart">false</bool>
						<string name="Name">OnFireSparks</string>
						<token name="Orientation">0</token>
						<float name="Rate">50</float>
						<NumberRange name="RotSpeed">-300 300 </NumberRange>
						<NumberRange name="Rotation">-360 360 </NumberRange>
						<token name="Shape">0</token>
						<token name="ShapeInOut">0</token>
						<float name="ShapePartial">1</float>
						<token name="ShapeStyle">0</token>
						<NumberSequence name="Size">0 1 0.5 0.508 0.1 0.1 1 0 0 </NumberSequence>
						<int64 name="SourceAssetId">-1</int64>
						<NumberRange name="Speed">0.5 15 </NumberRange>
						<Vector2 name="SpreadAngle">
							<X>360</X>
							<Y>-360</Y>
						</Vector2>
						<NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>rbxassetid://6764615288</url></Content>
						<float name="TimeScale">1</float>
						<NumberSequence name="Transparency">0 0.46875 0.41875 1 1 0 </NumberSequence>
						<float name="VelocityInheritance">0.400000006</float>
						<bool name="WindAffectsDrag">false</bool>
						<float name="ZOffset">0</float>
					</Properties>
				</Item>
				<Item class="ParticleEmitter" referent="RBX39bdb1a85e0840ad98b8cd2cd081e9aa">
					<Properties>
						<Vector3 name="Acceleration">
							<X>0</X>
							<Y>10</Y>
							<Z>0</Z>
						</Vector3>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">1</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<ColorSequence name="Color">0 1 0.431373 0.027451 0 1 1 0 0 0 </ColorSequence>
						<bool name="DefinesCapabilities">false</bool>
						<float name="Drag">5</float>
						<token name="EmissionDirection">1</token>
						<bool name="Enabled">true</bool>
						<NumberRange name="FlipbookFramerate">1 1 </NumberRange>
						<string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
						<token name="FlipbookLayout">0</token>
						<token name="FlipbookMode">0</token>
						<bool name="FlipbookStartRandom">false</bool>
						<NumberRange name="Lifetime">0.5 2 </NumberRange>
						<float name="LightEmission">0.899999976</float>
						<float name="LightInfluence">0</float>
						<bool name="LockedToPart">false</bool>
						<string name="Name">OnFireWisps</string>
						<token name="Orientation">0</token>
						<float name="Rate">30</float>
						<NumberRange name="RotSpeed">-90 90 </NumberRange>
						<NumberRange name="Rotation">-360 360 </NumberRange>
						<token name="Shape">0</token>
						<token name="ShapeInOut">0</token>
						<float name="ShapePartial">1</float>
						<token name="ShapeStyle">0</token>
						<NumberSequence name="Size">0 0 0 0.00705 0.2 0.2 1 0 0 </NumberSequence>
						<int64 name="SourceAssetId">-1</int64>
						<NumberRange name="Speed">0 10 </NumberRange>
						<Vector2 name="SpreadAngle">
							<X>360</X>
							<Y>-360</Y>
						</Vector2>
						<NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>rbxassetid://6764612182</url></Content>
						<float name="TimeScale">1</float>
						<NumberSequence name="Transparency">0 0.46875 0.41875 1 1 0 </NumberSequence>
						<float name="VelocityInheritance">0.5</float>
						<bool name="WindAffectsDrag">false</bool>
						<float name="ZOffset">2</float>
					</Properties>
				</Item>
				<Item class="PointLight" referent="RBX946b1c4fc5d74fa2a3d186304e3262e1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">1</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<Color3 name="Color">
							<R>0.992156923</R>
							<G>0.572549045</G>
							<B>0.223529428</B>
						</Color3>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Enabled">true</bool>
						<string name="Name">PointLight</string>
						<float name="Range">8</float>
						<bool name="Shadows">true</bool>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="Part" referent="RBX4d060f8af797409982097e0d3dceff37">
					<Properties>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3330.93188</X>
							<Y>-229.222229</Y>
							<Z>-1661.54968</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">false</bool>
						<bool name="CanTouch">false</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="EnableFluidForces">true</bool>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<string name="Name">Impact</string>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">1</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<token name="formFactorRaw">1</token>
						<token name="shape">1</token>
						<Vector3 name="size">
							<X>38</X>
							<Y>0.0152000003</Y>
							<Z>38</Z>
						</Vector3>
					</Properties>
					<Item class="Decal" referent="RBX843ed1c71e424e018ca56c16c2ba61a8">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Decal</string>
							<Content name="NormalMap"><null></null></Content>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">486848096</int64>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>rbxassetid://8823963041</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Decal" referent="RBXb17ee800644a4018aeba0ac46d0e7525">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Decal</string>
							<Content name="NormalMap"><null></null></Content>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">486848096</int64>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>rbxassetid://8823955910</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
					<Item class="Part" referent="RBXf3dbfda06cdf4307bb19eb530eae9437">
						<Properties>
							<bool name="Anchored">false</bool>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AudioCanCollide">true</bool>
							<float name="BackParamA">-0.5</float>
							<float name="BackParamB">0.5</float>
							<token name="BackSurface">0</token>
							<token name="BackSurfaceInput">0</token>
							<float name="BottomParamA">-0.5</float>
							<float name="BottomParamB">0.5</float>
							<token name="BottomSurface">0</token>
							<token name="BottomSurfaceInput">0</token>
							<CoordinateFrame name="CFrame">
								<X>3330.93188</X>
								<Y>-229.222229</Y>
								<Z>-1661.54968</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<bool name="CanCollide">true</bool>
							<bool name="CanQuery">true</bool>
							<bool name="CanTouch">true</bool>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="CastShadow">true</bool>
							<string name="CollisionGroup">Default</string>
							<int name="CollisionGroupId">0</int>
							<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
							<PhysicalProperties name="CustomPhysicalProperties">
								<CustomPhysics>false</CustomPhysics>
							</PhysicalProperties>
							<bool name="DefinesCapabilities">false</bool>
							<bool name="EnableFluidForces">true</bool>
							<float name="FrontParamA">-0.5</float>
							<float name="FrontParamB">0.5</float>
							<token name="FrontSurface">0</token>
							<token name="FrontSurfaceInput">0</token>
							<float name="LeftParamA">-0.5</float>
							<float name="LeftParamB">0.5</float>
							<token name="LeftSurface">0</token>
							<token name="LeftSurfaceInput">0</token>
							<bool name="Locked">false</bool>
							<bool name="Massless">false</bool>
							<token name="Material">256</token>
							<string name="MaterialVariantSerialized"></string>
							<string name="Name">Inside</string>
							<CoordinateFrame name="PivotOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<float name="Reflectance">0</float>
							<float name="RightParamA">-0.5</float>
							<float name="RightParamB">0.5</float>
							<token name="RightSurface">0</token>
							<token name="RightSurfaceInput">0</token>
							<int name="RootPriority">0</int>
							<Vector3 name="RotVelocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<float name="TopParamA">-0.5</float>
							<float name="TopParamB">0.5</float>
							<token name="TopSurface">0</token>
							<token name="TopSurfaceInput">0</token>
							<float name="Transparency">1</float>
							<Vector3 name="Velocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<token name="formFactorRaw">1</token>
							<token name="shape">1</token>
							<Vector3 name="size">
								<X>9.66101646</X>
								<Y>0.00644067768</Y>
								<Z>9.66101646</Z>
							</Vector3>
						</Properties>
						<Item class="Decal" referent="RBXf271c33ec0ff466ea137d488faa961d9">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<Color3 name="Color3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<bool name="DefinesCapabilities">false</bool>
								<token name="Face">1</token>
								<Content name="MetalnessMap"><null></null></Content>
								<string name="Name">Decal</string>
								<Content name="NormalMap"><null></null></Content>
								<Content name="RoughnessMap"><null></null></Content>
								<int64 name="SourceAssetId">486848096</int64>
								<BinaryString name="Tags"></BinaryString>
								<Content name="Texture"><url>http://www.roblox.com/asset/?id=486848095</url></Content>
								<float name="Transparency">0</float>
								<Vector2 name="UVOffset">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<Vector2 name="UVScale">
									<X>1</X>
									<Y>1</Y>
								</Vector2>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
						<Item class="Decal" referent="RBX207f1118117f4fc2a0712c0f1c51749b">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<Color3 name="Color3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<bool name="DefinesCapabilities">false</bool>
								<token name="Face">1</token>
								<Content name="MetalnessMap"><null></null></Content>
								<string name="Name">Decal</string>
								<Content name="NormalMap"><null></null></Content>
								<Content name="RoughnessMap"><null></null></Content>
								<int64 name="SourceAssetId">486848096</int64>
								<BinaryString name="Tags"></BinaryString>
								<Content name="Texture"><url>rbxassetid://8823955910</url></Content>
								<float name="Transparency">0</float>
								<Vector2 name="UVOffset">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<Vector2 name="UVScale">
									<X>1</X>
									<Y>1</Y>
								</Vector2>
								<int name="ZIndex">2</int>
							</Properties>
						</Item>
						<Item class="Decal" referent="RBX06fc11f4549d4aeab86f22b1bab2e26c">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
								<Color3 name="Color3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<bool name="DefinesCapabilities">false</bool>
								<token name="Face">1</token>
								<Content name="MetalnessMap"><null></null></Content>
								<string name="Name">Decal</string>
								<Content name="NormalMap"><null></null></Content>
								<Content name="RoughnessMap"><null></null></Content>
								<int64 name="SourceAssetId">486848096</int64>
								<BinaryString name="Tags"></BinaryString>
								<Content name="Texture"><url>http://www.roblox.com/asset/?id=486848095</url></Content>
								<float name="Transparency">0</float>
								<Vector2 name="UVOffset">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<Vector2 name="UVScale">
									<X>1</X>
									<Y>1</Y>
								</Vector2>
								<int name="ZIndex">3</int>
							</Properties>
						</Item>
					</Item>
					<Item class="WeldConstraint" referent="RBX11ff6bc4470a448999b7a411efe8b883">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<CoordinateFrame name="CFrame0">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">WeldConstraint</string>
							<Ref name="Part0Internal">RBX4d060f8af797409982097e0d3dceff37</Ref>
							<Ref name="Part1Internal">RBX4d060f8af797409982097e0d3dceff37</Ref>
							<int64 name="SourceAssetId">-1</int64>
							<int name="State">3</int>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="WeldConstraint" referent="RBXb230c3ade2cf4ee49ef12dd07dd1005e">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<CoordinateFrame name="CFrame0">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<bool name="DefinesCapabilities">false</bool>
							<string name="Name">WeldConstraint</string>
							<Ref name="Part0Internal">RBXf3dbfda06cdf4307bb19eb530eae9437</Ref>
							<Ref name="Part1Internal">RBX4d060f8af797409982097e0d3dceff37</Ref>
							<int64 name="SourceAssetId">-1</int64>
							<int name="State">3</int>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX040bff943dfa4d8991b63bf807399edc">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Zone</string>
				<string name="ScriptGuid">{7B32D509-3DEB-485A-8525-7DDD9F7FFCBD}</string>
				<ProtectedString name="Source"><![CDATA[-- LOCAL
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local heartbeat = runService.Heartbeat
local localPlayer = runService:IsClient() and players.LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local httpService = game:GetService("HttpService")
local Enum_ = require(script.Enum)
local enum = Enum_.enums
local Janitor = require(script.Janitor)
local Signal = require(script.Signal)
local ZonePlusReference = require(script.ZonePlusReference)
local referenceObject = ZonePlusReference.getObject()
local zoneControllerModule = script.ZoneController
local trackerModule = zoneControllerModule.Tracker
local collectiveWorldModelModule = zoneControllerModule.CollectiveWorldModel
local ZoneController = require(zoneControllerModule)
local referenceLocation = (game:GetService("RunService"):IsClient() and "Client") or "Server"
local referencePresent = referenceObject and referenceObject:FindFirstChild(referenceLocation)
if referencePresent then
	return require(referenceObject.Value)
end

local Zone = {}
Zone.__index = Zone
if not referencePresent then
	ZonePlusReference.addToReplicatedStorage()
end
Zone.enum = enum



-- CONSTRUCTORS
function Zone.new(container)
	local self = {}
	setmetatable(self, Zone)
	
	-- Validate container
	local INVALID_TYPE_WARNING = "The zone container must be a model, folder, basepart or table!"
	local containerType = typeof(container)
	if not(containerType == "table" or containerType == "Instance") then
		error(INVALID_TYPE_WARNING)
	end

	-- Configurable
	self.accuracy = enum.Accuracy.High
	self.autoUpdate = true
	self.respectUpdateQueue = true
	--self.maxPartsAddition = 20
	--self.ignoreRecommendedMaxParts = false

	-- Variable
	local janitor = Janitor.new()
	self.janitor = janitor
	self._updateConnections = janitor:add(Janitor.new(), "destroy")
	self.container = container
	self.zoneParts = {}
	self.overlapParams = {}
	self.region = nil
	self.volume = nil
	self.boundMin = nil
	self.boundMax = nil
	self.recommendedMaxParts = nil
	self.zoneId = httpService:GenerateGUID()
	self.activeTriggers = {}
	self.occupants = {}
	self.trackingTouchedTriggers = {}
	self.enterDetection = enum.Detection.Centre
	self.exitDetection = enum.Detection.Centre
	self._currentEnterDetection = nil -- This will update automatically internally
	self._currentExitDetection = nil -- This will also update automatically internally
	self.totalPartVolume = 0
	self.allZonePartsAreBlocks = true
	self.trackedItems = {}
	self.settingsGroupName = nil
	self.worldModel = workspace
	self.onItemDetails = {}
	self.itemsToUntrack = {}

	-- This updates _currentEnterDetection and _currentExitDetection right away to prevent nil comparisons
	ZoneController.updateDetection(self)

	-- Signals
	self.updated = janitor:add(Signal.new(), "destroy")
	local triggerTypes = {
		"player",
		"part",
		"localPlayer",
		"item"
	}
	local triggerEvents = {
		"entered",
		"exited",
	}
	for _, triggerType in pairs(triggerTypes) do
		local activeConnections = 0
		local previousActiveConnections = 0
		for i, triggerEvent in pairs(triggerEvents) do
			-- this enables us to determine when a developer connects to an event
			-- so that we can act accoridngly (i.e. begin or end a checker loop)
			local signal = janitor:add(Signal.new(true), "destroy")
			local triggerEventUpper = triggerEvent:sub(1,1):upper()..triggerEvent:sub(2)
			local signalName = triggerType..triggerEventUpper
			self[signalName] = signal
			signal.connectionsChanged:Connect(function(increment)
				if triggerType == "localPlayer" and not localPlayer and increment == 1 then
					error(("Can only connect to 'localPlayer%s' on the client!"):format(triggerEventUpper))
				end
				previousActiveConnections = activeConnections
				activeConnections += increment
				if previousActiveConnections == 0 and activeConnections > 0 then
					-- At least 1 connection active, begin loop
					ZoneController._registerConnection(self, triggerType, triggerEventUpper)
				elseif previousActiveConnections > 0 and activeConnections == 0 then
					-- All connections have disconnected, end loop
					ZoneController._deregisterConnection(self, triggerType)
				end
			end)
		end
	end

	-- Setup touched receiver functions where applicable
	Zone.touchedConnectionActions = {}
	for _, triggerType in pairs(triggerTypes) do
		local methodName = ("_%sTouchedZone"):format(triggerType)
		local correspondingMethod = self[methodName]
		if correspondingMethod then
			self.trackingTouchedTriggers[triggerType] = {}
			Zone.touchedConnectionActions[triggerType] = function(touchedItem)
				correspondingMethod(self, touchedItem)
			end
		end
	end

	-- This constructs the zones boundaries, region, etc
	self:_update()

	-- Register/deregister zone
	ZoneController._registerZone(self)
	janitor:add(function()
		ZoneController._deregisterZone(self)
	end, true)
	
	return self
end

function Zone.fromRegion(cframe, size)
	local MAX_PART_SIZE = 2024
	local container = Instance.new("Model")
	local function createCube(cubeCFrame, cubeSize)
		if cubeSize.X > MAX_PART_SIZE or cubeSize.Y > MAX_PART_SIZE or cubeSize.Z > MAX_PART_SIZE then
			local quarterSize = cubeSize * 0.25
			local halfSize = cubeSize * 0.5
			createCube(cubeCFrame * CFrame.new(-quarterSize.X, -quarterSize.Y, -quarterSize.Z), halfSize)
			createCube(cubeCFrame * CFrame.new(-quarterSize.X, -quarterSize.Y, quarterSize.Z), halfSize)
			createCube(cubeCFrame * CFrame.new(-quarterSize.X, quarterSize.Y, -quarterSize.Z), halfSize)
			createCube(cubeCFrame * CFrame.new(-quarterSize.X, quarterSize.Y, quarterSize.Z), halfSize)
			createCube(cubeCFrame * CFrame.new(quarterSize.X, -quarterSize.Y, -quarterSize.Z), halfSize)
			createCube(cubeCFrame * CFrame.new(quarterSize.X, -quarterSize.Y, quarterSize.Z), halfSize)
			createCube(cubeCFrame * CFrame.new(quarterSize.X, quarterSize.Y, -quarterSize.Z), halfSize)
			createCube(cubeCFrame * CFrame.new(quarterSize.X, quarterSize.Y, quarterSize.Z), halfSize)
		else
			local part = Instance.new("Part")
			part.CFrame = cubeCFrame
			part.Size = cubeSize
			part.Anchored = true
			part.Parent = container
		end
	end
	createCube(cframe, size)
	local zone = Zone.new(container)
	zone:relocate()
	return zone
end



-- PRIVATE METHODS
function Zone:_calculateRegion(tableOfParts, dontRound)
	local bounds = {["Min"] = {}, ["Max"] = {}}
	for boundType, details in pairs(bounds) do
		details.Values = {}
		function details.parseCheck(v, currentValue)
			if boundType == "Min" then
				return (v <= currentValue)
			elseif boundType == "Max" then
				return (v >= currentValue)
			end
		end
		function details:parse(valuesToParse)
			for i,v in pairs(valuesToParse) do
				local currentValue = self.Values[i] or v
				if self.parseCheck(v, currentValue) then
					self.Values[i] = v
				end
			end
		end
	end
	for _, part in pairs(tableOfParts) do
		local sizeHalf = part.Size * 0.5
		local corners = {
			part.CFrame * CFrame.new(-sizeHalf.X, -sizeHalf.Y, -sizeHalf.Z),
			part.CFrame * CFrame.new(-sizeHalf.X, -sizeHalf.Y, sizeHalf.Z),
			part.CFrame * CFrame.new(-sizeHalf.X, sizeHalf.Y, -sizeHalf.Z),
			part.CFrame * CFrame.new(-sizeHalf.X, sizeHalf.Y, sizeHalf.Z),
			part.CFrame * CFrame.new(sizeHalf.X, -sizeHalf.Y, -sizeHalf.Z),
			part.CFrame * CFrame.new(sizeHalf.X, -sizeHalf.Y, sizeHalf.Z),
			part.CFrame * CFrame.new(sizeHalf.X, sizeHalf.Y, -sizeHalf.Z),
			part.CFrame * CFrame.new(sizeHalf.X, sizeHalf.Y, sizeHalf.Z),
		}
		for _, cornerCFrame in pairs(corners) do
			local x, y, z = cornerCFrame:GetComponents()
			local values = {x, y, z}
			bounds.Min:parse(values)
			bounds.Max:parse(values)
		end
	end
	local minBound = {}
	local maxBound = {}
	-- Rounding a regions coordinates to multiples of 4 ensures the region optimises the region
	-- by ensuring it aligns on the voxel grid
	local function roundToFour(to_round)
		local ROUND_TO = 4
		local divided = (to_round+ROUND_TO/2) / ROUND_TO
		local rounded = ROUND_TO * math.floor(divided)
		return rounded
	end
	for boundName, boundDetail in pairs(bounds) do
		for _, v in pairs(boundDetail.Values) do
			local newTable = (boundName == "Min" and minBound) or maxBound
			local newV = v
			if not dontRound then
				local roundOffset = (boundName == "Min" and -2) or 2
				newV = roundToFour(v+roundOffset) -- +-2 to ensures the zones region is not rounded down/up
			end
			table.insert(newTable, newV)
		end
	end
	local boundMin = Vector3.new(unpack(minBound))
	local boundMax = Vector3.new(unpack(maxBound))
	local region = Region3.new(boundMin, boundMax)
	return region, boundMin, boundMax
end

function Zone:_displayBounds()
	if not self.displayBoundParts then
		self.displayBoundParts = true
		local boundParts = {BoundMin = self.boundMin, BoundMax = self.boundMax}
		for boundName, boundCFrame in pairs(boundParts) do
			local part = Instance.new("Part")
			part.Anchored = true
			part.CanCollide = false
			part.Transparency = 0.5
			part.Size = Vector3.new(1,1,1)
			part.Color = Color3.fromRGB(255,0,0)
			part.CFrame = CFrame.new(boundCFrame)
			part.Name = boundName
			part.Parent = workspace
			self.janitor:add(part, "Destroy")
		end
	end
end

function Zone:_update()
	local container = self.container
	local zoneParts = {}
	local updateQueue = 0
	self._updateConnections:clean()

	local containerType = typeof(container)
	local holders = {}
	local INVALID_TYPE_WARNING = "The zone container must be a model, folder, basepart or table!"
	if containerType == "table" then
		for _, part in pairs(container) do
			if part:IsA("BasePart") then
				table.insert(zoneParts, part)
			end
		end
	elseif containerType == "Instance" then
		if container:IsA("BasePart") then
			table.insert(zoneParts, container)
		else
			table.insert(holders, container)
			for _, part in pairs(container:GetDescendants()) do
				if part:IsA("BasePart") then
					table.insert(zoneParts, part)
				else
					table.insert(holders, part)
				end
			end
		end
	end
	self.zoneParts = zoneParts
	self.overlapParams = {}
	
	local allZonePartsAreBlocksNew = true
	for _, zonePart in pairs(zoneParts) do
		local success, shapeName = pcall(function() return zonePart.Shape.Name end)
		if shapeName ~= "Block" then
			allZonePartsAreBlocksNew = false
		end
	end
	self.allZonePartsAreBlocks = allZonePartsAreBlocksNew
	
	local zonePartsWhitelist = OverlapParams.new()
	zonePartsWhitelist.FilterType = Enum.RaycastFilterType.Whitelist
	zonePartsWhitelist.MaxParts = #zoneParts
	zonePartsWhitelist.FilterDescendantsInstances = zoneParts
	self.overlapParams.zonePartsWhitelist = zonePartsWhitelist

	local zonePartsIgnorelist = OverlapParams.new()
	zonePartsIgnorelist.FilterType = Enum.RaycastFilterType.Blacklist
	zonePartsIgnorelist.FilterDescendantsInstances = zoneParts
	self.overlapParams.zonePartsIgnorelist = zonePartsIgnorelist
	
	-- this will call update on the zone when the container parts size or position changes, and when a
	-- child is removed or added from a holder (anything which isn't a basepart)
	local function update()
		if self.autoUpdate then
			local executeTime = os.clock()
			if self.respectUpdateQueue then
				updateQueue += 1
				executeTime += 0.1
			end
			local updateConnection
			updateConnection = runService.Heartbeat:Connect(function()
				if os.clock() >= executeTime then
					updateConnection:Disconnect()
					if self.respectUpdateQueue then
						updateQueue -= 1
					end
					if updateQueue == 0 and self.zoneId then
						self:_update()
					end
				end
			end)
		end
	end
	local partProperties = {"Size", "Position"}
	local function verifyDefaultCollision(instance)
		if instance.CollisionGroupId ~= 0 then
			error("Zone parts must belong to the 'Default' (0) CollisionGroup! Consider using zone:relocate() if you wish to move zones outside of workspace to prevent them interacting with other parts.")
		end
	end
	for _, part in pairs(zoneParts) do
		for _, prop in pairs(partProperties) do
			self._updateConnections:add(part:GetPropertyChangedSignal(prop):Connect(update), "Disconnect")
		end
		verifyDefaultCollision(part)
		self._updateConnections:add(part:GetPropertyChangedSignal("CollisionGroupId"):Connect(function()
			verifyDefaultCollision(part)
		end), "Disconnect")
	end
	local containerEvents = {"ChildAdded", "ChildRemoved"}
	for _, holder in pairs(holders) do
		for _, event in pairs(containerEvents) do
			self._updateConnections:add(self.container[event]:Connect(function(child)
				if child:IsA("BasePart") then
					update()
				end
			end), "Disconnect")
		end
	end
	
	local region, boundMin, boundMax = self:_calculateRegion(zoneParts)
	local exactRegion, _, _ = self:_calculateRegion(zoneParts, true)
	self.region = region
	self.exactRegion = exactRegion
	self.boundMin = boundMin
	self.boundMax = boundMax
	local rSize = region.Size
	self.volume = rSize.X*rSize.Y*rSize.Z
	
	-- Update: I was going to use this for the old part detection until the CanTouch property was released
	-- everything below is now irrelevant however I'll keep just in case I use again for future
	-------------------------------------------------------------------------------------------------
	-- When a zones region is determined, we also check for parts already existing within the zone
	-- these parts are likely never to move or interact with the zone, so we set the number of these
	-- to the baseline MaxParts value. 'recommendMaxParts' is then determined through the sum of this
	-- and maxPartsAddition. This ultimately optimises region checks as they can be generated with
	-- minimal MaxParts (i.e. recommendedMaxParts can be used instead of math.huge every time)
	--[[
	local result = self.worldModel:FindPartsInRegion3(region, nil, math.huge)
	local maxPartsBaseline = #result
	self.recommendedMaxParts = maxPartsBaseline + self.maxPartsAddition
	--]]
	
	self:_updateTouchedConnections()
	
	self.updated:Fire()
end

function Zone:_updateOccupants(trackerName, newOccupants)
	local previousOccupants = self.occupants[trackerName]
	if not previousOccupants then
		previousOccupants = {}
		self.occupants[trackerName] = previousOccupants
	end
	local signalsToFire = {}
	for occupant, prevItem in pairs(previousOccupants) do
		local newItem = newOccupants[occupant]
		if newItem == nil or newItem ~= prevItem then
			previousOccupants[occupant] = nil
			if not signalsToFire.exited then
				signalsToFire.exited = {}
			end
			table.insert(signalsToFire.exited, occupant)
		end
	end
	for occupant, _ in pairs(newOccupants) do
		if previousOccupants[occupant] == nil then
			local isAPlayer = occupant:IsA("Player")
			previousOccupants[occupant] = (isAPlayer and occupant.Character) or true
			if not signalsToFire.entered then
				signalsToFire.entered = {}
			end
			table.insert(signalsToFire.entered, occupant)
		end
	end 
	return signalsToFire
end

function Zone:_formTouchedConnection(triggerType)
	local touchedJanitorName = "_touchedJanitor"..triggerType
	local touchedJanitor = self[touchedJanitorName]
	if touchedJanitor then
		touchedJanitor:clean()
	else
		touchedJanitor = self.janitor:add(Janitor.new(), "destroy")
		self[touchedJanitorName] = touchedJanitor
	end
	self:_updateTouchedConnection(triggerType)
end

function Zone:_updateTouchedConnection(triggerType)
	local touchedJanitorName = "_touchedJanitor"..triggerType
	local touchedJanitor = self[touchedJanitorName]
	if not touchedJanitor then return end
	for _, basePart in pairs(self.zoneParts) do
		touchedJanitor:add(basePart.Touched:Connect(self.touchedConnectionActions[triggerType], self), "Disconnect")
	end
end

function Zone:_updateTouchedConnections()
	for triggerType, _ in pairs(self.touchedConnectionActions) do
		local touchedJanitorName = "_touchedJanitor"..triggerType
		local touchedJanitor = self[touchedJanitorName]
		if touchedJanitor then
			touchedJanitor:cleanup()
			self:_updateTouchedConnection(triggerType)
		end
	end
end

function Zone:_disconnectTouchedConnection(triggerType)
	local touchedJanitorName = "_touchedJanitor"..triggerType
	local touchedJanitor = self[touchedJanitorName]
	if touchedJanitor then
		touchedJanitor:cleanup()
		self[touchedJanitorName] = nil
	end
end

local function round(number, decimalPlaces)
	return math.round(number * 10^decimalPlaces) * 10^-decimalPlaces
end
function Zone:_partTouchedZone(part)
	local trackingDict = self.trackingTouchedTriggers["part"]
	if trackingDict[part] then return end
	local nextCheck = 0
	local verifiedEntrance = false
	local enterPosition = part.Position
	local enterTime = os.clock()
	local partJanitor = self.janitor:add(Janitor.new(), "destroy")
	trackingDict[part] = partJanitor
	local instanceClassesToIgnore = {Seat = true, VehicleSeat = true}
	local instanceNamesToIgnore = {HumanoidRootPart = true}
	if not (instanceClassesToIgnore[part.ClassName] or not instanceNamesToIgnore[part.Name])  then
		part.CanTouch = false
	end
	--
	local partVolume = round((part.Size.X * part.Size.Y * part.Size.Z), 5)
	self.totalPartVolume += partVolume
	--
	partJanitor:add(heartbeat:Connect(function()
		local clockTime = os.clock()
		if clockTime >= nextCheck then
			----
			local cooldown = enum.Accuracy.getProperty(self.accuracy)
			nextCheck = clockTime + cooldown
			----

			-- We initially perform a singular point check as this is vastly more lightweight than a large part check
			-- If the former returns false, perform a whole part check in case the part is on the outer bounds.
			local withinZone = self:findPoint(part.CFrame)
			if not withinZone then
				withinZone = self:findPart(part)
			end
			if not verifiedEntrance then
				if withinZone then
					verifiedEntrance = true
					self.partEntered:Fire(part)
				elseif (part.Position - enterPosition).Magnitude > 1.5 and clockTime - enterTime >= cooldown then
					-- Even after the part has exited the zone, we track it for a brief period of time based upon the criteria
					-- in the line above to ensure the .touched behaviours are not abused
					partJanitor:cleanup()
				end
			elseif not withinZone then
				verifiedEntrance = false
				enterPosition = part.Position
				enterTime = os.clock()
				self.partExited:Fire(part)
			end
		end
	end), "Disconnect")
	partJanitor:add(function()
		trackingDict[part] = nil
		part.CanTouch = true
		self.totalPartVolume = round((self.totalPartVolume - partVolume), 5)
	end, true)
end

local partShapeActions = {
	["Ball"] = function(part)
		return "GetPartBoundsInRadius", {part.Position, part.Size.X}
	end,
	["Block"] = function(part)
		return "GetPartBoundsInBox", {part.CFrame, part.Size}
	end,
	["Other"] = function(part)
		return "GetPartsInPart", {part}
	end,
}
function Zone:_getRegionConstructor(part, overlapParams)
	local success, shapeName = pcall(function() return part.Shape.Name end)
	local methodName, args
	if success and self.allZonePartsAreBlocks then
		local action = partShapeActions[shapeName]
		if action then
			methodName, args = action(part)
		end
	end
	if not methodName then
		methodName, args = partShapeActions.Other(part)
	end
	if overlapParams then
		table.insert(args, overlapParams)
	end
	return methodName, args
end



-- PUBLIC METHODS
function Zone:findLocalPlayer()
	if not localPlayer then
		error("Can only call 'findLocalPlayer' on the client!")
	end
	return self:findPlayer(localPlayer)
end

function Zone:_find(trackerName, item)
	ZoneController.updateDetection(self)
	local tracker = ZoneController.trackers[trackerName]
	local touchingZones = ZoneController.getTouchingZones(item, false, self._currentEnterDetection, tracker)
	for _, zone in pairs(touchingZones) do
		if zone == self then
			return true
		end
	end
	return false
end

function Zone:findPlayer(player)
	local character = player.Character
	local humanoid = character and character:FindFirstChildOfClass("Humanoid")
	if not humanoid then
		return false
	end
	return self:_find("player", player.Character)
end

function Zone:findItem(item)
	return self:_find("item", item)
end

function Zone:findPart(part)
	local methodName, args = self:_getRegionConstructor(part, self.overlapParams.zonePartsWhitelist)
	local touchingZoneParts = self.worldModel[methodName](self.worldModel, unpack(args))
	--local touchingZoneParts = self.worldModel:GetPartsInPart(part, self.overlapParams.zonePartsWhitelist)
	if #touchingZoneParts > 0 then
		return true, touchingZoneParts
	end
	return false
end

function Zone:getCheckerPart()
	local checkerPart = self.checkerPart
	if not checkerPart then
		checkerPart = self.janitor:add(Instance.new("Part"), "Destroy")
		checkerPart.Size = Vector3.new(0.1, 0.1, 0.1)
		checkerPart.Name = "ZonePlusCheckerPart"
		checkerPart.Anchored = true
		checkerPart.Transparency = 1
		checkerPart.CanCollide = false
		self.checkerPart = checkerPart
	end
	local checkerParent = self.worldModel
	if checkerParent == workspace then
		checkerParent = ZoneController.getWorkspaceContainer()
	end
	if checkerPart.Parent ~= checkerParent then
		checkerPart.Parent = checkerParent
	end
	return checkerPart
end

function Zone:findPoint(positionOrCFrame)
	local cframe = positionOrCFrame
	if typeof(positionOrCFrame) == "Vector3" then
		cframe = CFrame.new(positionOrCFrame)
	end
	local checkerPart = self:getCheckerPart()
	checkerPart.CFrame = cframe
	--checkerPart.Parent = self.worldModel
	local methodName, args = self:_getRegionConstructor(checkerPart, self.overlapParams.zonePartsWhitelist)
	local touchingZoneParts = self.worldModel[methodName](self.worldModel, unpack(args))
	--local touchingZoneParts = self.worldModel:GetPartsInPart(self.checkerPart, self.overlapParams.zonePartsWhitelist)
	if #touchingZoneParts > 0 then
		return true, touchingZoneParts
	end
	return false
end

function Zone:_getAll(trackerName)
	ZoneController.updateDetection(self)
	local itemsArray = {}
	local zonesAndOccupants = ZoneController._getZonesAndItems(trackerName, {self = true}, self.volume, false, self._currentEnterDetection)
	local occupantsDict = zonesAndOccupants[self]
	if occupantsDict then
		for item, _ in pairs(occupantsDict) do
			table.insert(itemsArray, item)
		end
	end
	return itemsArray
end

function Zone:getPlayers()
	return self:_getAll("player")
end

function Zone:getItems()
	return self:_getAll("item")
end

function Zone:getParts()
	-- This is designed for infrequent 'one off' use
	-- If you plan on checking for parts within a zone frequently, it's recommended you
	-- use the .partEntered and .partExited events instead.
	local partsArray = {}
	if self.activeTriggers["part"] then
		local trackingDict = self.trackingTouchedTriggers["part"]
		for part, _ in pairs(trackingDict) do
			table.insert(partsArray, part)
		end
		return partsArray
	end
	local partsInRegion = self.worldModel:GetPartBoundsInBox(self.region.CFrame, self.region.Size, self.overlapParams.zonePartsIgnorelist)
	for _, part in pairs(partsInRegion) do
		if self:findPart(part) then
			table.insert(partsArray, part)
		end
	end
	return partsArray
end

function Zone:getRandomPoint()
	local region = self.exactRegion
	local size = region.Size
	local cframe = region.CFrame
	local random = Random.new()
	local randomCFrame
	local success, touchingZoneParts
	local pointIsWithinZone
	repeat
		randomCFrame = cframe * CFrame.new(random:NextNumber(-size.X/2,size.X/2), random:NextNumber(-size.Y/2,size.Y/2), random:NextNumber(-size.Z/2,size.Z/2))
		success, touchingZoneParts = self:findPoint(randomCFrame)
		if success then
			pointIsWithinZone = true
		end
	until pointIsWithinZone
	local randomVector = randomCFrame.Position
	return randomVector, touchingZoneParts
end

function Zone:setAccuracy(enumIdOrName)
	local enumId = tonumber(enumIdOrName)
	if not enumId then
		enumId = enum.Accuracy[enumIdOrName]
		if not enumId then
			error(("'%s' is an invalid enumName!"):format(enumIdOrName))
		end
	else
		local enumName = enum.Accuracy.getName(enumId)
		if not enumName then
			error(("%s is an invalid enumId!"):format(enumId))
		end
	end
	self.accuracy = enumId
end

function Zone:setDetection(enumIdOrName)
	local enumId = tonumber(enumIdOrName)
	if not enumId then
		enumId = enum.Detection[enumIdOrName]
		if not enumId then
			error(("'%s' is an invalid enumName!"):format(enumIdOrName))
		end
	else
		local enumName = enum.Detection.getName(enumId)
		if not enumName then
			error(("%s is an invalid enumId!"):format(enumId))
		end
	end
	self.enterDetection = enumId
	self.exitDetection = enumId
end

function Zone:trackItem(instance)
	local isBasePart = instance:IsA("BasePart")
	local isCharacter = false
	if not isBasePart then
		isCharacter = instance:FindFirstChildOfClass("Humanoid") and instance:FindFirstChild("HumanoidRootPart")
	end

	assert(isBasePart or isCharacter, "Only BaseParts or Characters/NPCs can be tracked!")

	if self.trackedItems[instance] then
		return
	end
	if self.itemsToUntrack[instance] then
		self.itemsToUntrack[instance] = nil
	end

	local itemJanitor = self.janitor:add(Janitor.new(), "destroy")
	local itemDetail = {
		janitor = itemJanitor,
		item = instance,
		isBasePart = isBasePart,
		isCharacter = isCharacter,
	}
	self.trackedItems[instance] = itemDetail

	itemJanitor:add(instance.AncestryChanged:Connect(function()
		if not instance:IsDescendantOf(game) then
			self:untrackItem(instance)
		end
	end), "Disconnect")

	local Tracker = require(trackerModule)
	Tracker.itemAdded:Fire(itemDetail)
end

function Zone:untrackItem(instance)
	local itemDetail = self.trackedItems[instance]
	if itemDetail then
		itemDetail.janitor:destroy()
	end
	self.trackedItems[instance] = nil

	local Tracker = require(trackerModule)
	Tracker.itemRemoved:Fire(itemDetail)
end

function Zone:bindToGroup(settingsGroupName)
	self:unbindFromGroup()
	local group = ZoneController.getGroup(settingsGroupName) or ZoneController.setGroup(settingsGroupName)
	group._memberZones[self.zoneId] = self
	self.settingsGroupName = settingsGroupName
end

function Zone:unbindFromGroup()
	if self.settingsGroupName then
		local group = ZoneController.getGroup(self.settingsGroupName)
		if group then
			group._memberZones[self.zoneId] = nil
		end
		self.settingsGroupName = nil
	end
end

function Zone:relocate()
	if self.hasRelocated then
		return
	end

	local CollectiveWorldModel = require(collectiveWorldModelModule)
	local worldModel = CollectiveWorldModel.setupWorldModel(self)
	self.worldModel = worldModel
	self.hasRelocated = true
	
	local relocationContainer = self.container
	if typeof(relocationContainer) == "table" then
		relocationContainer = Instance.new("Folder")
		for _, zonePart in pairs(self.zoneParts) do
			zonePart.Parent = relocationContainer
		end
	end
	self.relocationContainer = self.janitor:add(relocationContainer, "Destroy", "RelocationContainer")
	relocationContainer.Parent = worldModel
end

function Zone:_onItemCallback(eventName, desiredValue, instance, callbackFunction)
	local detail = self.onItemDetails[instance]
	if not detail then
		detail = {}
		self.onItemDetails[instance] = detail
	end
	if #detail == 0 then
		self.itemsToUntrack[instance] = true
	end
	table.insert(detail, instance)
	self:trackItem(instance)

	local function triggerCallback()
		callbackFunction()
		if self.itemsToUntrack[instance] then
			self.itemsToUntrack[instance] = nil
			self:untrackItem(instance)
		end
	end

	local inZoneAlready = self:findItem(instance)
	if inZoneAlready == desiredValue then
		triggerCallback()
	else
		local connection
		connection = self[eventName]:Connect(function(item)
			if connection and item == instance then
				connection:Disconnect()
				connection = nil
				triggerCallback()
			end
		end)
		--[[
		if typeof(expireAfterSeconds) == "number" then
			task.delay(expireAfterSeconds, function()
				if connection ~= nil then
					print("EXPIRE!")
					connection:Disconnect()
					connection = nil
					triggerCallback()
				end
			end)
		end
		--]]
	end
end

function Zone:onItemEnter(...)
	self:_onItemCallback("itemEntered", true, ...)
end

function Zone:onItemExit(...)
	self:_onItemCallback("itemExited", false, ...)
end

function Zone:destroy()
	self:unbindFromGroup()
	self.janitor:destroy()
end
Zone.Destroy = Zone.destroy



return Zone]]></ProtectedString>
				<int64 name="SourceAssetId">6245329519</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX7f123a229d2c4ed7baf1ec1d4791d7c6">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Enum</string>
					<string name="ScriptGuid">{6136E538-E469-472B-8DD0-090F43B13BF7}</string>
					<ProtectedString name="Source"><![CDATA[-- Custom enum implementation that provides an effective way to compare, send
-- and store values. Instead of returning a userdata value, enum items return
-- their corresponding itemValue (an integer) when indexed. Enum items can
-- also associate a 'property', specified as the third element, which can be
-- retrieved by doing ``enum.getProperty(ITEM_NAME_OR_VALUE)``
-- This ultimately means groups of data can be easily categorised, efficiently
-- transmitted over networks and saved without throwing errors.
-- Ben Horton (ForeverHD)



-- LOCAL
local Enum = {}
local enums = {}
Enum.enums = enums



-- METHODS
function Enum.createEnum(enumName, details)
	assert(typeof(enumName) == "string", "bad argument #1 - enums must be created using a string name!")
	assert(typeof(details) == "table", "bad argument #2 - enums must be created using a table!")
	assert(not enums[enumName], ("enum '%s' already exists!"):format(enumName))
	
	local enum = {}
	local usedNames = {}
	local usedValues = {}
	local usedProperties = {}
	local enumMetaFunctions = {
		getName = function(valueOrProperty)
			valueOrProperty = tostring(valueOrProperty)
			local index = usedValues[valueOrProperty]
			if not index then
				index = usedProperties[valueOrProperty]
			end
			if index then
				return details[index][1]
			end
		end,
		getValue = function(nameOrProperty)
			nameOrProperty = tostring(nameOrProperty)
			local index = usedNames[nameOrProperty]
			if not index then
				index = usedProperties[nameOrProperty]
			end
			if index then
				return details[index][2]
			end
		end,
		getProperty = function(nameOrValue)
			nameOrValue = tostring(nameOrValue)
			local index = usedNames[nameOrValue]
			if not index then
				index = usedValues[nameOrValue]
			end
			if index then
				return details[index][3]
			end
		end
	}
	for i, detail in pairs(details) do
		assert(typeof(detail) == "table", ("bad argument #2.%s - details must only be comprised of tables!"):format(i))
		local name = detail[1]
		assert(typeof(name) == "string", ("bad argument #2.%s.1 - detail name must be a string!"):format(i))
		assert(typeof(not usedNames[name]), ("bad argument #2.%s.1 - the detail name '%s' already exists!"):format(i, name))
		assert(typeof(not enumMetaFunctions[name]), ("bad argument #2.%s.1 - that name is reserved."):format(i, name))
		usedNames[tostring(name)] = i
		local value = detail[2]
		local valueString = tostring(value)
		--assert(typeof(value) == "number" and math.ceil(value)/value == 1, ("bad argument #2.%s.2 - detail value must be an integer!"):format(i))
		assert(typeof(not usedValues[valueString]), ("bad argument #2.%s.2 - the detail value '%s' already exists!"):format(i, valueString))
		usedValues[valueString] = i
		local property = detail[3]
		if property then
			assert(typeof(not usedProperties[property]), ("bad argument #2.%s.3 - the detail property '%s' already exists!"):format(i, tostring(property)))
			usedProperties[tostring(property)] = i
		end
		enum[name] = value
		setmetatable(enum, {
			__index = function(_, index)
				return(enumMetaFunctions[index])
			end
		})
	end
	
	enums[enumName] = enum
	return enum
end

function Enum.getEnums()
	return enums
end



-- SETUP ENUMS
local createEnum = Enum.createEnum
for _, childModule in pairs(script:GetChildren()) do
	if childModule:IsA("ModuleScript") then
		local enumDetail = require(childModule)
		createEnum(childModule.Name, enumDetail)
	end
end

--[[
-- Example enum
createEnum("Color", {
	{"White", 1, Color3.fromRGB(255, 255, 255)},
	{"Black", 2, Color3.fromRGB(0, 0, 0)},
})
--]]



return Enum
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX9bf13308f176496abdcc793c69ee6a78">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Accuracy</string>
						<string name="ScriptGuid">{EFD7C4CF-644E-4724-B573-82580CF4572B}</string>
						<ProtectedString name="Source"><![CDATA[-- enumName, enumValue, additionalProperty
-- in this case, additionalProperty is the delay between each check
return {
	{"Low", 	1,	1.0},
	{"Medium",	2,	0.5},
	{"High",	3,	0.1},
	{"Precise",	4,	0.0},
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX997ee4d508a34648bc6706c71b04baf1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Detection</string>
						<string name="ScriptGuid">{946491E0-FD61-4E3C-AF25-9971A7B2DFA6}</string>
						<ProtectedString name="Source"><![CDATA[-- Important note: Precision checks currently only for 'players' and the 'localplayer', not 'parts'.

-- enumName, enumValue, additionalProperty
return {
	{"WholeBody", 1}, -- Multiple checks will be casted over an entire players character
	{"Centre", 2}, -- A singular check will be performed on the players HumanoidRootPart
	--{"Automatic", 3}, -- REMOVED DUE TO UNECESSARY COMPLEXITY. ZonePlus will dynamically switch between 'WholeBody' and 'Centre' depending upon the number of players in a server (this typically only occurs for servers with 100+ players when volume checks begin to exceed 0.5% in script performance).
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXf83fcd264c9e407bbc7dba651b1f48a9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Janitor</string>
					<string name="ScriptGuid">{7A99F269-96C6-4625-A990-46372F767F20}</string>
					<ProtectedString name="Source"><![CDATA[-- Janitor
-- Original by Validark
-- Modifications by pobammer
-- roblox-ts support by OverHash and Validark
-- LinkToInstance fixed by Elttob.

local RunService = game:GetService("RunService")
local Heartbeat = RunService.Heartbeat

local IndicesReference = newproxy(true)
getmetatable(IndicesReference).__tostring = function()
	return "IndicesReference"
end

local LinkToInstanceIndex = newproxy(true)
getmetatable(LinkToInstanceIndex).__tostring = function()
	return "LinkToInstanceIndex"
end

local METHOD_NOT_FOUND_ERROR = "Object %s doesn't have method %s, are you sure you want to add it? Traceback: %s"
--local NOT_A_PROMISE = "Invalid argument #1 to 'Janitor:AddPromise' (Promise expected, got %s (%s))"

local Janitor = {
	ClassName = "Janitor";
	__index = {
		CurrentlyCleaning = true;
		[IndicesReference] = nil;
	};
}

local TypeDefaults = {
	["function"] = true;
	RBXScriptConnection = "Disconnect";
}

--[[**
	Instantiates a new Janitor object.
	@returns [t:Janitor]
**--]]
function Janitor.new()
	return setmetatable({
		CurrentlyCleaning = false;
		[IndicesReference] = nil;
	}, Janitor)
end

--[[**
	Determines if the passed object is a Janitor.
	@param [t:any] Object The object you are checking.
	@returns [t:boolean] Whether or not the object is a Janitor.
**--]]
function Janitor.Is(Object)
	return type(Object) == "table" and getmetatable(Object) == Janitor
end

Janitor.is = Janitor.Is

--[[**
	Adds an `Object` to Janitor for later cleanup, where `MethodName` is the key of the method within `Object` which should be called at cleanup time. If the `MethodName` is `true` the `Object` itself will be called instead. If passed an index it will occupy a namespace which can be `Remove()`d or overwritten. Returns the `Object`.
	@param [t:any] Object The object you want to clean up.
	@param [t:string|true?] MethodName The name of the method that will be used to clean up. If not passed, it will first check if the object's type exists in TypeDefaults, and if that doesn't exist, it assumes `Destroy`.
	@param [t:any?] Index The index that can be used to clean up the object manually.
	@returns [t:any] The object that was passed.
**--]]
function Janitor.__index:Add(Object, MethodName, Index)
	if Index == nil then
		Index = newproxy(false)
	end

	if Index then
		self:Remove(Index)

		local This = self[IndicesReference]
		if not This then
			This = {}
			self[IndicesReference] = This
		end

		This[Index] = Object
	end
	--[[
	if Promise.is(Object) then
		local Id = newproxy(false)
		if Object:getStatus() == Promise.Status.Started then
			local NewPromise = self:Add(Promise.resolve(Object), "cancel", Id)
			NewPromise:finallyCall(self.Remove, self, Id)
			return NewPromise, Id
		else
			return Object
		end
	end--]]

	MethodName = MethodName or TypeDefaults[typeof(Object)] or "Destroy"
	if type(Object) ~= "function" and not Object[MethodName] then
		warn(string.format(METHOD_NOT_FOUND_ERROR, tostring(Object), tostring(MethodName), debug.traceback(nil, 2)))
	end

	self[Object] = MethodName
	return Object, Index
end

Janitor.__index.Give = Janitor.__index.Add

-- My version of Promise has PascalCase, but I converted it to use lowerCamelCase for this release since obviously that's important to do.

--[[**
	Adds a promise to the janitor. If the janitor is cleaned up and the promise is not completed, the promise will be cancelled.
	@param [t:Promise] PromiseObject The promise you want to add to the janitor.
	@returns [t:Promise]
**--]]
--[[
function Janitor.__index:AddPromise(PromiseObject)
	if not Promise.is(PromiseObject) then
		error(string.format(NOT_A_PROMISE, typeof(PromiseObject), tostring(PromiseObject)))
	end

	if PromiseObject:getStatus() == Promise.Status.Started then
		local Id = newproxy(false)
		local NewPromise = self:Add(Promise.resolve(PromiseObject), "cancel", Id)
		NewPromise:finallyCall(self.Remove, self, Id)
		return NewPromise, Id
	else
		return PromiseObject
	end
end
--]]

--Janitor.__index.GivePromise = Janitor.__index.AddPromise

-- This will assume whether or not the object is a Promise or a regular object.
function Janitor.__index:AddObject(Object)
	local Id = newproxy(false)
	--[[
	if Promise.is(Object) then
		if Object:getStatus() == Promise.Status.Started then
			local NewPromise = self:Add(Promise.resolve(Object), "cancel", Id)
			NewPromise:finallyCall(self.Remove, self, Id)
			return NewPromise, Id
		else
			return Object
		end
	else
		return self:Add(Object, false, Id), Id
	end---]]
	return self:Add(Object, false, Id), Id
end

Janitor.__index.GiveObject = Janitor.__index.AddObject

--[[**
	Cleans up whatever `Object` was set to this namespace by the 3rd parameter of `:Add()`.
	@param [t:any] Index The index you want to remove.
	@returns [t:Janitor] The same janitor, for chaining reasons.
**--]]
function Janitor.__index:Remove(Index)
	local This = self[IndicesReference]

	if This then
		local Object = This[Index]

		if Object then
			local MethodName = self[Object]

			if MethodName then
				if MethodName == true then
					Object()
				else
					local ObjectMethod = Object[MethodName]
					if ObjectMethod then
						ObjectMethod(Object)
					end
				end

				self[Object] = nil
			end

			This[Index] = nil
		end
	end

	return self
end

--[[**
	Gets whatever object is stored with the given index, if it exists. This was added since Maid allows getting the job using `__index`.
	@param [t:any] Index The index that the object is stored under.
	@returns [t:any?] This will return the object if it is found, but it won't return anything if it doesn't exist.
**--]]
function Janitor.__index:Get(Index)
	local This = self[IndicesReference]
	if This then
		return This[Index]
	end
end

--[[**
	Calls each Object's `MethodName` (or calls the Object if `MethodName == true`) and removes them from the Janitor. Also clears the namespace. This function is also called when you call a Janitor Object (so it can be used as a destructor callback).
	@returns [t:void]
**--]]
function Janitor.__index:Cleanup()
	if not self.CurrentlyCleaning then
		self.CurrentlyCleaning = nil
		for Object, MethodName in next, self do
			if Object == IndicesReference then
				continue
			end

			-- Weird decision to rawset directly to the janitor in Agent. This should protect against it though.
			local TypeOf = type(Object)
			if TypeOf == "string" or TypeOf == "number" then
				self[Object] = nil
				continue
			end

			if MethodName == true then
				Object()
			else
				local ObjectMethod = Object[MethodName]
				if ObjectMethod then
					ObjectMethod(Object)
				end
			end

			self[Object] = nil
		end

		local This = self[IndicesReference]
		if This then
			for Index in next, This do
				This[Index] = nil
			end

			self[IndicesReference] = {}
		end

		self.CurrentlyCleaning = false
	end
end

Janitor.__index.Clean = Janitor.__index.Cleanup

--[[**
	Calls `:Cleanup()` and renders the Janitor unusable.
	@returns [t:void]
**--]]
function Janitor.__index:Destroy()
	self:Cleanup()
	--table.clear(self)
	--setmetatable(self, nil)
end

Janitor.__call = Janitor.__index.Cleanup

--- Makes the Janitor clean up when the instance is destroyed
-- @param Instance Instance The Instance the Janitor will wait for to be Destroyed
-- @returns Disconnectable table to stop Janitor from being cleaned up upon Instance Destroy (automatically cleaned up by Janitor, btw)
-- @author Corecii
local Disconnect = {Connected = true}
Disconnect.__index = Disconnect
function Disconnect:Disconnect()
	if self.Connected then
		self.Connected = false
		self.Connection:Disconnect()
	end
end

function Disconnect:__tostring()
	return "Disconnect<" .. tostring(self.Connected) .. ">"
end

--[[**
	"Links" this Janitor to an Instance, such that the Janitor will `Cleanup` when the Instance is `Destroyed()` and garbage collected. A Janitor may only be linked to one instance at a time, unless `AllowMultiple` is true. When called with a truthy `AllowMultiple` parameter, the Janitor will "link" the Instance without overwriting any previous links, and will also not be overwritable. When called with a falsy `AllowMultiple` parameter, the Janitor will overwrite the previous link which was also called with a falsy `AllowMultiple` parameter, if applicable.
	@param [t:Instance] Object The instance you want to link the Janitor to.
	@param [t:boolean?] AllowMultiple Whether or not to allow multiple links on the same Janitor.
	@returns [t:RbxScriptConnection] A pseudo RBXScriptConnection that can be disconnected.
**--]]
function Janitor.__index:LinkToInstance(Object, AllowMultiple)
	local Connection
	local IndexToUse = AllowMultiple and newproxy(false) or LinkToInstanceIndex
	local IsNilParented = Object.Parent == nil
	local ManualDisconnect = setmetatable({}, Disconnect)

	local function ChangedFunction(_DoNotUse, NewParent)
		if ManualDisconnect.Connected then
			_DoNotUse = nil
			IsNilParented = NewParent == nil

			if IsNilParented then
				coroutine.wrap(function()
					Heartbeat:Wait()
					if not ManualDisconnect.Connected then
						return
					elseif not Connection.Connected then
						self:Cleanup()
					else
						while IsNilParented and Connection.Connected and ManualDisconnect.Connected do
							Heartbeat:Wait()
						end

						if ManualDisconnect.Connected and IsNilParented then
							self:Cleanup()
						end
					end
				end)()
			end
		end
	end

	Connection = Object.AncestryChanged:Connect(ChangedFunction)
	ManualDisconnect.Connection = Connection

	if IsNilParented then
		ChangedFunction(nil, Object.Parent)
	end

	Object = nil
	return self:Add(ManualDisconnect, "Disconnect", IndexToUse)
end

--[[**
	Links several instances to a janitor, which is then returned.
	@param [t:...Instance] ... All the instances you want linked.
	@returns [t:Janitor] A janitor that can be used to manually disconnect all LinkToInstances.
**--]]
function Janitor.__index:LinkToInstances(...)
	local ManualCleanup = Janitor.new()
	for _, Object in ipairs({...}) do
		ManualCleanup:Add(self:LinkToInstance(Object, true), "Disconnect")
	end

	return ManualCleanup
end

for FunctionName, Function in next, Janitor.__index do
	local NewFunctionName = string.sub(string.lower(FunctionName), 1, 1) .. string.sub(FunctionName, 2)
	Janitor.__index[NewFunctionName] = Function
end

return Janitor]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXf5a540de7e7c4b25a374cbf693b865c2">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">OldSignal</string>
					<string name="ScriptGuid">{0F48C7C2-D646-44B3-9667-57E6E6155446}</string>
					<ProtectedString name="Source"><![CDATA[local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local heartbeat = RunService.Heartbeat
local Signal = {}
Signal.__index = Signal
Signal.ClassName = "Signal"
Signal.totalConnections = 0



-- CONSTRUCTOR
function Signal.new(createConnectionsChangedSignal)
	local self = setmetatable({}, Signal)
	
	if createConnectionsChangedSignal then
		self.connectionsChanged = Signal.new()
	end

	self.connections = {}
	self.totalConnections = 0
	self.waiting = {}
	self.totalWaiting = 0

	return self
end



-- METHODS
function Signal:Fire(...)
	for _, connection in pairs(self.connections) do
		--connection.Handler(...)
		task.spawn(connection.Handler, ...)
	end
	if self.totalWaiting > 0 then
		local packedArgs = table.pack(...)
		for waitingId, _ in pairs(self.waiting) do
			self.waiting[waitingId] = packedArgs
		end
	end
end
Signal.fire = Signal.Fire

function Signal:Connect(handler)
	if not (type(handler) == "function") then
		error(("connect(%s)"):format(typeof(handler)), 2)
	end
	
	local signal = self
	local connectionId = HttpService:GenerateGUID(false)
	local connection = {}
	connection.Connected = true
	connection.ConnectionId = connectionId
	connection.Handler = handler
	self.connections[connectionId] = connection

	function connection:Disconnect()
		signal.connections[connectionId] = nil
		connection.Connected = false
		signal.totalConnections -= 1
		if signal.connectionsChanged then
			signal.connectionsChanged:Fire(-1)
		end
	end
	connection.Destroy = connection.Disconnect
	connection.destroy = connection.Disconnect
	connection.disconnect = connection.Disconnect
	self.totalConnections += 1
	if self.connectionsChanged then
		self.connectionsChanged:Fire(1)
	end

	return connection
end
Signal.connect = Signal.Connect

function Signal:Wait()
	local waitingId = HttpService:GenerateGUID(false)
	self.waiting[waitingId] = true
	self.totalWaiting += 1
	repeat heartbeat:Wait() until self.waiting[waitingId] ~= true
	self.totalWaiting -= 1
	local args = self.waiting[waitingId]
	self.waiting[waitingId] = nil
	return unpack(args)
end
Signal.wait = Signal.Wait

function Signal:Destroy()
	if self.bindableEvent then
		self.bindableEvent:Destroy()
		self.bindableEvent = nil
	end
	if self.connectionsChanged then
		self.connectionsChanged:Fire(-self.totalConnections)
		self.connectionsChanged:Destroy()
		self.connectionsChanged = nil
	end
	self.totalConnections = 0
	for connectionId, connection in pairs(self.connections) do
		self.connections[connectionId] = nil
	end
end
Signal.destroy = Signal.Destroy
Signal.Disconnect = Signal.Destroy
Signal.disconnect = Signal.Destroy



return Signal]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXd0914aaa8be94f799f201d3fbb8c1abb">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Signal</string>
					<string name="ScriptGuid">{3F0A69AE-A888-4302-80FC-2002B2DB6BB7}</string>
					<ProtectedString name="Source"><![CDATA[--------------------------------------------------------------------------------
--               Batched Yield-Safe Signal Implementation                     --
-- This is a Signal class which has effectively identical behavior to a       --
-- normal RBXScriptSignal, with the only difference being a couple extra      --
-- stack frames at the bottom of the stack trace when an error is thrown.     --
-- This implementation caches runner coroutines, so the ability to yield in   --
-- the signal handlers comes at minimal extra cost over a naive signal        --
-- implementation that either always or never spawns a thread.                --
--                                                                            --
-- API:                                                                       --
--   local Signal = require(THIS MODULE)                                      --
--   local sig = Signal.new()                                                 --
--   local connection = sig:Connect(function(arg1, arg2, ...) ... end)        --
--   sig:Fire(arg1, arg2, ...)                                                --
--   connection:Disconnect()                                                  --
--   sig:DisconnectAll()                                                      --
--   local arg1, arg2, ... = sig:Wait()                                       --
--                                                                            --
-- Licence:                                                                   --
--   Licenced under the MIT licence.                                          --
--                                                                            --
-- Authors:                                                                   --
--   stravant - July 31st, 2021 - Created the file.                           --
--------------------------------------------------------------------------------

-- The currently idle thread to run the next handler on
local freeRunnerThread = nil

-- Function which acquires the currently idle handler runner thread, runs the
-- function fn on it, and then releases the thread, returning it to being the
-- currently idle one.
-- If there was a currently idle runner thread already, that's okay, that old
-- one will just get thrown and eventually GCed.
local function acquireRunnerThreadAndCallEventHandler(fn, ...)
	local acquiredRunnerThread = freeRunnerThread
	freeRunnerThread = nil
	fn(...)
	-- The handler finished running, this runner thread is free again.
	freeRunnerThread = acquiredRunnerThread
end

-- Coroutine runner that we create coroutines of. The coroutine can be 
-- repeatedly resumed with functions to run followed by the argument to run
-- them with.
local function runEventHandlerInFreeThread(...)
	acquireRunnerThreadAndCallEventHandler(...)
	while true do
		acquireRunnerThreadAndCallEventHandler(coroutine.yield())
	end
end

-- Connection class
local Connection = {}
Connection.__index = Connection

function Connection.new(signal, fn)
	return setmetatable({
		_connected = true,
		_signal = signal,
		_fn = fn,
		_next = false,
	}, Connection)
end

function Connection:Disconnect()
	assert(self._connected, "Can't disconnect a connection twice.", 2)
	self._connected = false

	-- Unhook the node, but DON'T clear it. That way any fire calls that are
	-- currently sitting on this node will be able to iterate forwards off of
	-- it, but any subsequent fire calls will not hit it, and it will be GCed
	-- when no more fire calls are sitting on it.
    local signal = self._signal
	if signal._handlerListHead == self then
		signal._handlerListHead = self._next
	else
		local prev = signal._handlerListHead
		while prev and prev._next ~= self do
			prev = prev._next
		end
		if prev then
			prev._next = self._next
		end
	end

    if signal.connectionsChanged then
		signal.totalConnections -= 1
        signal.connectionsChanged:Fire(-1)
    end
end

-- Make Connection strict
setmetatable(Connection, {
	__index = function(tb, key)
		error(("Attempt to get Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end,
	__newindex = function(tb, key, value)
		error(("Attempt to set Connection::%s (not a valid member)"):format(tostring(key)), 2)
	end
})

-- Signal class
local Signal = {}
Signal.__index = Signal

function Signal.new(createConnectionsChangedSignal)
	local self = setmetatable({
		_handlerListHead = false,	
	}, Signal)
    if createConnectionsChangedSignal then
        self.totalConnections = 0
		self.connectionsChanged = Signal.new()
	end
    return self
end

function Signal:Connect(fn)
	local connection = Connection.new(self, fn)
	if self._handlerListHead then
		connection._next = self._handlerListHead
		self._handlerListHead = connection
	else
		self._handlerListHead = connection
	end

	if self.connectionsChanged then
        self.totalConnections += 1
		self.connectionsChanged:Fire(1)
	end
	return connection
end

-- Disconnect all handlers. Since we use a linked list it suffices to clear the
-- reference to the head handler.
function Signal:DisconnectAll()
	self._handlerListHead = false

    if self.connectionsChanged then
		self.connectionsChanged:Fire(-self.totalConnections)
		self.connectionsChanged:Destroy()
		self.connectionsChanged = nil
		self.totalConnections = 0
	end
end
Signal.Destroy = Signal.DisconnectAll
Signal.destroy = Signal.DisconnectAll

-- Signal:Fire(...) implemented by running the handler functions on the
-- coRunnerThread, and any time the resulting thread yielded without returning
-- to us, that means that it yielded to the Roblox scheduler and has been taken
-- over by Roblox scheduling, meaning we have to make a new coroutine runner.
function Signal:Fire(...)
	local item = self._handlerListHead
	while item do
		if item._connected then
			if not freeRunnerThread then
				freeRunnerThread = coroutine.create(runEventHandlerInFreeThread)
			end
			task.spawn(freeRunnerThread, item._fn, ...)
		end
		item = item._next
	end
end

-- Implement Signal:Wait() in terms of a temporary connection using
-- a Signal:Connect() which disconnects itself.
function Signal:Wait()
	local waitingCoroutine = coroutine.running()
	local cn;
	cn = self:Connect(function(...)
		cn:Disconnect()
		task.spawn(waitingCoroutine, ...)
	end)
	return coroutine.yield()
end


return Signal]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXc814f840fbff48b7b08d2964b1566afc">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">VERSION</string>
					<string name="ScriptGuid">{D3EEB039-0846-4B5C-95AC-4FB0CEA2EADD}</string>
					<ProtectedString name="Source">-- v3.2.0</ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXf93a7cc872d84fa3a62e4ae8787fbdc3">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ZoneController</string>
					<string name="ScriptGuid">{5656169C-8216-44F0-A0C9-93C68CE84BED}</string>
					<ProtectedString name="Source"><![CDATA[-- CONFIG
local WHOLE_BODY_DETECTION_LIMIT = 729000 -- This is roughly the volume where Region3 checks begin to exceed 0.5% in Script Performance



-- LOCAL
local Janitor = require(script.Parent.Janitor)
local Enum_ = require(script.Parent.Enum)
local Signal = require(script.Parent.Signal)
local Tracker = require(script.Tracker)
local CollectiveWorldModel = require(script.CollectiveWorldModel)
local enum = Enum_.enums
local players = game:GetService("Players")
local activeZones = {}
local activeZonesTotalVolume = 0
local activeTriggers = {}
local registeredZones = {}
local activeParts = {}
local activePartToZone = {}
local allParts = {}
local allPartToZone = {}
local activeConnections = 0
local runService = game:GetService("RunService")
local heartbeat = runService.Heartbeat
local heartbeatConnections = {}
local localPlayer = runService:IsClient() and players.LocalPlayer



-- PUBLIC
local ZoneController = {}
local trackers = {}
trackers.player = Tracker.new("player")
trackers.item = Tracker.new("item")
ZoneController.trackers = trackers



-- LOCAL FUNCTIONS
local function dictLength(dictionary)
	local count = 0
	for _, _ in pairs(dictionary) do
		count += 1
	end
	return count
end

local function fillOccupants(zonesAndOccupantsTable, zone, occupant)
	local occupantsDict = zonesAndOccupantsTable[zone]
	if not occupantsDict then
		occupantsDict = {}
		zonesAndOccupantsTable[zone] = occupantsDict
	end
	local prevCharacter = occupant:IsA("Player") and occupant.Character
	occupantsDict[occupant] = (prevCharacter or true)
end

local heartbeatActions = {
	["player"] = function(recommendedDetection)
		return ZoneController._getZonesAndItems("player", activeZones, activeZonesTotalVolume, true, recommendedDetection)
	end,
	["localPlayer"] = function(recommendedDetection)
		local zonesAndOccupants = {}
		local character = localPlayer.Character
		if not character then
			return zonesAndOccupants
		end
		local touchingZones = ZoneController.getTouchingZones(character, true, recommendedDetection, trackers.player)
		for _, zone in pairs(touchingZones) do
			if zone.activeTriggers["localPlayer"] then
				fillOccupants(zonesAndOccupants, zone, localPlayer)
			end
		end
		return zonesAndOccupants
	end,
	["item"] = function(recommendedDetection)
		return ZoneController._getZonesAndItems("item", activeZones, activeZonesTotalVolume, true, recommendedDetection)
	end,
}



-- PRIVATE FUNCTIONS
function ZoneController._registerZone(zone)
   	registeredZones[zone] = true
	local registeredJanitor = zone.janitor:add(Janitor.new(), "destroy")
	zone._registeredJanitor = registeredJanitor
	registeredJanitor:add(zone.updated:Connect(function()
		ZoneController._updateZoneDetails()
	end), "Disconnect")
   ZoneController._updateZoneDetails()
end

function ZoneController._deregisterZone(zone)
	registeredZones[zone] = nil
	zone._registeredJanitor:destroy()
	zone._registeredJanitor = nil
	ZoneController._updateZoneDetails()
end

function ZoneController._registerConnection(registeredZone, registeredTriggerType)
	local originalItems = dictLength(registeredZone.activeTriggers)
	activeConnections += 1
	if originalItems == 0 then
		activeZones[registeredZone] = true
		ZoneController._updateZoneDetails()
	end
	local currentTriggerCount = activeTriggers[registeredTriggerType]
	activeTriggers[registeredTriggerType] = (currentTriggerCount and currentTriggerCount+1) or 1
	registeredZone.activeTriggers[registeredTriggerType] = true
	if registeredZone.touchedConnectionActions[registeredTriggerType] then
		registeredZone:_formTouchedConnection(registeredTriggerType)
	end
	if heartbeatActions[registeredTriggerType] then
		ZoneController._formHeartbeat(registeredTriggerType)
	end
end

-- This decides what to do if detection is 'Automatic'
-- This is placed in ZoneController instead of the Zone object due to the ZoneControllers all-knowing group-minded logic
function ZoneController.updateDetection(zone)
	local detectionTypes = {
		["enterDetection"] = "_currentEnterDetection",
		["exitDetection"] = "_currentExitDetection",
	}
	for detectionType, currentDetectionName in pairs(detectionTypes) do
		local detection = zone[detectionType]
		local combinedTotalVolume = Tracker.getCombinedTotalVolumes()
		if detection == enum.Detection.Automatic then
			if combinedTotalVolume > WHOLE_BODY_DETECTION_LIMIT then
				detection = enum.Detection.Centre
			else
				detection = enum.Detection.WholeBody
			end
		end
		zone[currentDetectionName] = detection
	end
end

function ZoneController._formHeartbeat(registeredTriggerType)
	local heartbeatConnection = heartbeatConnections[registeredTriggerType]
	if heartbeatConnection then return end
	-- This will only ever connect once per triggerType per server
	-- This means instead of initiating a loop per-zone we can handle everything within
	-- a singular connection. This is particularly beneficial for player/item-orinetated
	-- checking, where a check only needs to be cast once per interval, as apposed
	-- to every zone per interval
	-- I utilise heartbeat with os.clock() to provide precision (where needed) and flexibility
	local nextCheck = 0
	heartbeatConnection = heartbeat:Connect(function()
		local clockTime = os.clock()
		if clockTime >= nextCheck then
			local lowestAccuracy
			local lowestDetection
			for zone, _ in pairs(activeZones) do
				if zone.activeTriggers[registeredTriggerType] then
					local zAccuracy = zone.accuracy
					if lowestAccuracy == nil or zAccuracy < lowestAccuracy then
						lowestAccuracy = zAccuracy
					end
					ZoneController.updateDetection(zone)
					local zDetection = zone._currentEnterDetection
					if lowestDetection == nil or zDetection < lowestDetection then
						lowestDetection = zDetection
					end
				end
			end
			local highestAccuracy = lowestAccuracy
			local zonesAndOccupants = heartbeatActions[registeredTriggerType](lowestDetection)

			-- If a zone belongs to a settingsGroup with 'onlyEnterOnceExitedAll = true' , and the occupant already exists in a member group, then
			-- ignore all incoming occupants for the other zones (preventing the enteredSignal from being fired until the occupant has left
			-- all other zones within the same settingGroup)
			local occupantsToBlock = {}
			local zonesToPotentiallyIgnore = {}
			for zone, newOccupants in pairs(zonesAndOccupants) do
				local settingsGroup = (zone.settingsGroupName and ZoneController.getGroup(zone.settingsGroupName))
				if settingsGroup and settingsGroup.onlyEnterOnceExitedAll == true then
					--local currentOccupants = zone.occupants[registeredTriggerType]
					--if currentOccupants then
						for newOccupant, _ in pairs(newOccupants) do
							--if currentOccupants[newOccupant] then
								local groupDetail = occupantsToBlock[zone.settingsGroupName]
								if not groupDetail then
									groupDetail = {}
									occupantsToBlock[zone.settingsGroupName] = groupDetail
								end
								groupDetail[newOccupant] = zone
							--end
						end
						zonesToPotentiallyIgnore[zone] = newOccupants
					--end
				end
			end
			for zone, newOccupants in pairs(zonesToPotentiallyIgnore) do
				local groupDetail = occupantsToBlock[zone.settingsGroupName]
				if groupDetail then
					for newOccupant, _ in pairs(newOccupants) do
						local occupantToKeepZone = groupDetail[newOccupant]
						if occupantToKeepZone and occupantToKeepZone ~= zone then
							newOccupants[newOccupant] = nil
						end
					end
				end
			end

			-- This deduces what signals should be fired
			local collectiveSignalsToFire = {{}, {}}
			for zone, _ in pairs(activeZones) do
				if zone.activeTriggers[registeredTriggerType] then
					local zAccuracy = zone.accuracy
					local occupantsDict = zonesAndOccupants[zone] or {}
					local occupantsPresent = false
					for k,v in pairs(occupantsDict) do
						occupantsPresent = true
						break
					end
					if occupantsPresent and zAccuracy > highestAccuracy then
						highestAccuracy = zAccuracy
					end
					local signalsToFire = zone:_updateOccupants(registeredTriggerType, occupantsDict)
					collectiveSignalsToFire[1][zone] = signalsToFire.exited
					collectiveSignalsToFire[2][zone] = signalsToFire.entered
				end
			end

			-- This ensures all exited signals and called before entered signals
			local indexToSignalType = {"Exited", "Entered"}
			for index, zoneAndOccupants in pairs(collectiveSignalsToFire) do
				local signalType = indexToSignalType[index]
				local signalName = registeredTriggerType..signalType
				for zone, occupants in pairs(zoneAndOccupants) do
					local signal = zone[signalName]
					if signal then
						for _, occupant in pairs(occupants) do
							signal:Fire(occupant)
						end
					end
				end
			end

			local cooldown = enum.Accuracy.getProperty(highestAccuracy)
			nextCheck = clockTime + cooldown
		end
	end)
	heartbeatConnections[registeredTriggerType] = heartbeatConnection
end

function ZoneController._deregisterConnection(registeredZone, registeredTriggerType)
	activeConnections -= 1
	if activeTriggers[registeredTriggerType] == 1 then
		activeTriggers[registeredTriggerType] = nil
		local heartbeatConnection = heartbeatConnections[registeredTriggerType]
		if heartbeatConnection then
			heartbeatConnections[registeredTriggerType] = nil
			heartbeatConnection:Disconnect()
		end
	else
		activeTriggers[registeredTriggerType] -= 1
	end
	registeredZone.activeTriggers[registeredTriggerType] = nil
	if dictLength(registeredZone.activeTriggers) == 0 then
		activeZones[registeredZone] = nil
		ZoneController._updateZoneDetails()
	end
	if registeredZone.touchedConnectionActions[registeredTriggerType] then
		registeredZone:_disconnectTouchedConnection(registeredTriggerType)
	end
end

function ZoneController._updateZoneDetails()
	activeParts = {}
	activePartToZone = {}
	allParts = {}
	allPartToZone = {}
	activeZonesTotalVolume = 0
	for zone, _ in pairs(registeredZones) do
		local isActive = activeZones[zone]
		if isActive then
			activeZonesTotalVolume += zone.volume
		end
		for _, zonePart in pairs(zone.zoneParts) do
			if isActive then
				table.insert(activeParts, zonePart)
				activePartToZone[zonePart] = zone
			end
			table.insert(allParts, zonePart)
			allPartToZone[zonePart] = zone
		end
	end
end

function ZoneController._getZonesAndItems(trackerName, zonesDictToCheck, zoneCustomVolume, onlyActiveZones, recommendedDetection)
	local totalZoneVolume = zoneCustomVolume
	if not totalZoneVolume then
		for zone, _ in pairs(zonesDictToCheck) do
			totalZoneVolume += zone.volume
		end
	end
	local zonesAndOccupants = {}
	local tracker = trackers[trackerName]
	if tracker.totalVolume < totalZoneVolume then
		-- If the volume of all *characters/items* within the server is *less than* the total
		-- volume of all active zones (i.e. zones which listen for .playerEntered)
		-- then it's more efficient cast checks within each character and
		-- then determine the zones they belong to
		for _, item in pairs(tracker.items) do
			local touchingZones = ZoneController.getTouchingZones(item, onlyActiveZones, recommendedDetection, tracker)
			for _, zone in pairs(touchingZones) do
				if not onlyActiveZones or zone.activeTriggers[trackerName] then
					local finalItem = item
					if trackerName == "player" then
						finalItem = players:GetPlayerFromCharacter(item)
					end
					if finalItem then
						fillOccupants(zonesAndOccupants, zone, finalItem)
					end
				end
			end
		end
	else
		-- If the volume of all *active zones* within the server is *less than* the total
		-- volume of all characters/items, then it's more efficient to perform the
		-- checks directly within each zone to determine players inside
		for zone, _ in pairs(zonesDictToCheck) do
			if not onlyActiveZones or zone.activeTriggers[trackerName] then
				local result = CollectiveWorldModel:GetPartBoundsInBox(zone.region.CFrame, zone.region.Size, tracker.whitelistParams)
				local finalItemsDict = {}
				for _, itemOrChild in pairs(result) do
					local correspondingItem = tracker.partToItem[itemOrChild]
					if not finalItemsDict[correspondingItem] then
						finalItemsDict[correspondingItem] = true
					end
				end
				for item, _ in pairs(finalItemsDict) do
					if trackerName == "player" then
						local player = players:GetPlayerFromCharacter(item)
						if zone:findPlayer(player) then
							fillOccupants(zonesAndOccupants, zone, player)
						end
					elseif zone:findItem(item) then
						fillOccupants(zonesAndOccupants, zone, item)
					end
				end
			end
		end
	end
	return zonesAndOccupants
end



-- PUBLIC FUNCTIONS
function ZoneController.getZones()
	local registeredZonesArray = {}
	for zone, _ in pairs(registeredZones) do
		table.insert(registeredZonesArray, zone)
	end
	return registeredZonesArray
end

--[[
-- the player touched events which utilise active zones at the moment may change to the new CanTouch method for parts in the future
-- hence im disabling this as it may be depreciated quite soon
function ZoneController.getActiveZones()
	local zonesArray = {}
	for zone, _ in pairs(activeZones) do
		table.insert(zonesArray, zone)
	end
	return zonesArray
end
--]]

function ZoneController.getTouchingZones(item, onlyActiveZones, recommendedDetection, tracker)
	local exitDetection, finalDetection
	if tracker then
		exitDetection = tracker.exitDetections[item]
		tracker.exitDetections[item] = nil
	end
	finalDetection = exitDetection or recommendedDetection

	local itemSize, itemCFrame
	local itemIsBasePart = item:IsA("BasePart")
	local itemIsCharacter = not itemIsBasePart
	local bodyPartsToCheck = {}
	if itemIsBasePart then
		itemSize, itemCFrame = item.Size, item.CFrame
		table.insert(bodyPartsToCheck, item)
	elseif finalDetection == enum.Detection.WholeBody then
		itemSize, itemCFrame = Tracker.getCharacterSize(item)
		bodyPartsToCheck = item:GetChildren()
	else
		local hrp = item:FindFirstChild("HumanoidRootPart")
		if hrp then
			itemSize, itemCFrame = hrp.Size, hrp.CFrame
			table.insert(bodyPartsToCheck, hrp)
		end
	end
	if not itemSize or not itemCFrame then return {} end

	--[[
	local part = Instance.new("Part")
	part.Size = itemSize
	part.CFrame = itemCFrame
	part.Anchored = true
	part.CanCollide = false
	part.Color = Color3.fromRGB(255, 0, 0)
	part.Transparency = 0.4
	part.Parent = workspace
	game:GetService("Debris"):AddItem(part, 2)
	--]]
	local partsTable = (onlyActiveZones and activeParts) or allParts
	local partToZoneDict = (onlyActiveZones and activePartToZone) or allPartToZone

	local boundParams = OverlapParams.new()
	boundParams.FilterType = Enum.RaycastFilterType.Whitelist
	boundParams.MaxParts = #partsTable
	boundParams.FilterDescendantsInstances = partsTable

	-- This retrieves the bounds (the rough shape) of all parts touching the item/character
	-- If the corresponding zone is made up of *entirely* blocks then the bound will
	-- be the actual shape of the part.
	local touchingPartsDictionary = {}
	local zonesDict = {}
	local boundParts = CollectiveWorldModel:GetPartBoundsInBox(itemCFrame, itemSize, boundParams)
	local boundPartsThatRequirePreciseChecks = {}
	for _, boundPart in pairs(boundParts) do
		local correspondingZone = partToZoneDict[boundPart]
		if correspondingZone and correspondingZone.allZonePartsAreBlocks then
			zonesDict[correspondingZone] = true
			touchingPartsDictionary[boundPart] = correspondingZone
		else
			table.insert(boundPartsThatRequirePreciseChecks, boundPart)
		end
	end

	-- If the bound parts belong to a zone that isn't entirely made up of blocks, then
	-- we peform additional checks using GetPartsInPart which enables shape
	-- geometries to be precisely determined for non-block baseparts.
	local totalRemainingBoundParts = #boundPartsThatRequirePreciseChecks
	local precisePartsCount = 0
	if totalRemainingBoundParts > 0 then
		
		local preciseParams = OverlapParams.new()
		preciseParams.FilterType = Enum.RaycastFilterType.Whitelist
		preciseParams.MaxParts = totalRemainingBoundParts
		preciseParams.FilterDescendantsInstances = boundPartsThatRequirePreciseChecks

		local character = item
		for _, bodyPart in pairs(bodyPartsToCheck) do
			local endCheck = false
			if not bodyPart:IsA("BasePart") or (itemIsCharacter and Tracker.bodyPartsToIgnore[bodyPart.Name]) then
				continue
			end
			local preciseParts = CollectiveWorldModel:GetPartsInPart(bodyPart, preciseParams)
			for _, precisePart in pairs(preciseParts) do
				if not touchingPartsDictionary[precisePart] then
					local correspondingZone = partToZoneDict[precisePart]
					if correspondingZone then
						zonesDict[correspondingZone] = true
						touchingPartsDictionary[precisePart] = correspondingZone
						precisePartsCount += 1
					end
					if precisePartsCount == totalRemainingBoundParts then
						endCheck = true
						break
					end
				end
			end
			if endCheck then
				break
			end
		end
	end
	
	local touchingZonesArray = {}
	local newExitDetection
	for zone, _ in pairs(zonesDict) do
		if newExitDetection == nil or zone._currentExitDetection < newExitDetection then
			newExitDetection = zone._currentExitDetection
		end
		table.insert(touchingZonesArray, zone)
	end
	if newExitDetection and tracker then
		tracker.exitDetections[item] = newExitDetection
	end
	return touchingZonesArray, touchingPartsDictionary
end

local settingsGroups = {}
function ZoneController.setGroup(settingsGroupName, properties)
	local group = settingsGroups[settingsGroupName]
	if not group then
		group = {}
		settingsGroups[settingsGroupName] = group
	end
	

	-- PUBLIC PROPERTIES --
	group.onlyEnterOnceExitedAll = true
	
	-- PRIVATE PROPERTIES --
	group._name = settingsGroupName
	group._memberZones = {}


	if typeof(properties) == "table" then
		for k, v in pairs(properties) do
			group[k] = v
		end
	end
	return group
end

function ZoneController.getGroup(settingsGroupName)
	return settingsGroups[settingsGroupName]
end

local workspaceContainer
local workspaceContainerName = string.format("ZonePlus%sContainer", (runService:IsClient() and "Client") or "Server")
function ZoneController.getWorkspaceContainer()
	local container = workspaceContainer or workspace:FindFirstChild(workspaceContainerName)
	if not container then
		container = Instance.new("Folder")
		container.Name = workspaceContainerName
		container.Parent = workspace
		workspaceContainer = container
	end
	return container
end



return ZoneController]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX465b51d0011e44afb2ee55f364e60f8c">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">CollectiveWorldModel</string>
						<string name="ScriptGuid">{E4591D07-15CD-460B-B9D0-7CD77E1D5DFC}</string>
						<ProtectedString name="Source"><![CDATA[local CollectiveWorldModel = {}
local worldModel
local runService = game:GetService("RunService")



-- FUNCTIONS
function CollectiveWorldModel.setupWorldModel(zone)
	if worldModel then
		return worldModel
	end
	local location = (runService:IsClient() and "ReplicatedStorage") or "ServerStorage"
	worldModel = Instance.new("WorldModel")
	worldModel.Name = "ZonePlusWorldModel"
	worldModel.Parent = game:GetService(location)
	return worldModel
end



-- METHODS
function CollectiveWorldModel:_getCombinedResults(methodName, ...)
	local results = workspace[methodName](workspace, ...)
	if worldModel then
		local additionalResults = worldModel[methodName](worldModel, ...)
		for _, result in pairs(additionalResults) do
			table.insert(results, result)
		end
	end
	return results
end

function CollectiveWorldModel:GetPartBoundsInBox(cframe, size, overlapParams)
	return self:_getCombinedResults("GetPartBoundsInBox", cframe, size, overlapParams)
end

function CollectiveWorldModel:GetPartBoundsInRadius(position, radius, overlapParams)
	return self:_getCombinedResults("GetPartBoundsInRadius", position, radius, overlapParams)
end

function CollectiveWorldModel:GetPartsInPart(part, overlapParams)
	return self:_getCombinedResults("GetPartsInPart", part, overlapParams)
end



return CollectiveWorldModel]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX1fc900e2ea464280a3f5d1b8c2f1d405">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Tracker</string>
						<string name="ScriptGuid">{EBD468C6-0FDD-4767-B336-133C384555DE}</string>
						<ProtectedString name="Source"><![CDATA[-- This enables data on volumes, HumanoidRootParts, etc to be handled on an event-basis, instead of being retrieved every interval

-- LOCAL
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local heartbeat = runService.Heartbeat
local Signal = require(script.Parent.Parent.Signal)
local Janitor = require(script.Parent.Parent.Janitor)



-- PUBLIC
local Tracker = {}
Tracker.__index = Tracker
local trackers = {}
Tracker.trackers = trackers
Tracker.itemAdded = Signal.new()
Tracker.itemRemoved = Signal.new()
Tracker.bodyPartsToIgnore = {
	-- We ignore these due to their insignificance (e.g. we ignore the lower and
	-- upper torso because the HumanoidRootPart also covers these areas)
	-- This ultimately reduces the burden on the player region checks
	UpperTorso = true,
	LowerTorso = true,
	Torso = true,
	LeftHand = true,
	RightHand = true,
	LeftFoot = true,
	RightFoot = true,
}



-- FUNCTIONS
function Tracker.getCombinedTotalVolumes()
	local combinedVolume = 0
	for tracker, _ in pairs(trackers) do
		combinedVolume += tracker.totalVolume
	end
	return combinedVolume
end

function Tracker.getCharacterSize(character)
	local head = character and character:FindFirstChild("Head")
	local hrp = character and character:FindFirstChild("HumanoidRootPart")
	if not(hrp and head) then return nil end
	if not head:IsA("BasePart") then
		head = hrp
	end
	local headY = head.Size.Y
	local hrpSize = hrp.Size
	local charSize = (hrpSize * Vector3.new(2, 2, 1)) + Vector3.new(0, headY, 0)
	local charCFrame = hrp.CFrame * CFrame.new(0, headY/2 - hrpSize.Y/2, 0)
	return charSize, charCFrame
end



-- CONSTRUCTOR
function Tracker.new(name)
	local self = {}
	setmetatable(self, Tracker)
	
	self.name = name
	self.totalVolume = 0
	self.parts = {}
	self.partToItem = {}
	self.items = {}
	self.whitelistParams = nil
	self.characters = {}
	self.baseParts = {}
	self.exitDetections = {}
	self.janitor = Janitor.new()

	if name == "player" then
		local function updatePlayerCharacters()
			local characters = {}
			for _, player in pairs(players:GetPlayers()) do
				local character = player.Character
				if character then
					characters[character] = true
				end
			end
			self.characters = characters
		end
		
		local function playerAdded(player)
			local function charAdded(character)
				local humanoid = character:WaitForChild("Humanoid", 3)
				if humanoid then
					updatePlayerCharacters()
					self:update()
					for _, valueInstance in pairs(humanoid:GetChildren()) do
						if valueInstance:IsA("NumberValue") then
							valueInstance.Changed:Connect(function()
								self:update()
							end)
						end
					end
				end
			end
			if player.Character then
				charAdded(player.Character)
			end
			player.CharacterAdded:Connect(charAdded)
			player.CharacterRemoving:Connect(function(removingCharacter)
				self.exitDetections[removingCharacter] = nil
			end)
		end
		
		players.PlayerAdded:Connect(playerAdded)
		for _, player in pairs(players:GetPlayers()) do
			playerAdded(player)
		end
		
		players.PlayerRemoving:Connect(function(player)
			updatePlayerCharacters()
			self:update()
		end)


	elseif name == "item" then
		local function updateItem(itemDetail, newValue)
			if itemDetail.isCharacter then
				self.characters[itemDetail.item] = newValue
			elseif itemDetail.isBasePart then
				self.baseParts[itemDetail.item] = newValue
			end
			self:update()
		end
		Tracker.itemAdded:Connect(function(itemDetail)
			updateItem(itemDetail, true)
		end)
		Tracker.itemRemoved:Connect(function(itemDetail)
			self.exitDetections[itemDetail.item] = nil
			updateItem(itemDetail, nil)
		end)
	end

	trackers[self] = true
	task.defer(self.update, self)
	return self
end



-- METHODS
function Tracker:_preventMultiFrameUpdates(methodName, ...)
	-- This prevents the funtion being called twice within a single frame
	-- If called more than once, the function will initally be delayed again until the next frame, then all others cancelled
	self._preventMultiDetails = self._preventMultiDetails or {}
	local detail = self._preventMultiDetails[methodName]
	if not detail then
		detail = {
			calling = false,
			callsThisFrame = 0,
			updatedThisFrame = false,
		}
		self._preventMultiDetails[methodName] = detail
	end

	detail.callsThisFrame += 1
	if detail.callsThisFrame == 1 then
		local args = table.pack(...)
		task.defer(function()
			local newCallsThisFrame = detail.callsThisFrame
			detail.callsThisFrame = 0
			if newCallsThisFrame > 1 then
				self[methodName](self, unpack(args))
			end
		end)
		return false
	end
	return true
end

function Tracker:update()
	if self:_preventMultiFrameUpdates("update") then
		return
	end
	
	self.totalVolume = 0
	self.parts = {}
	self.partToItem = {}
	self.items = {}
	
	-- This tracks the bodyparts of a character
	for character, _ in pairs(self.characters) do
		local charSize = Tracker.getCharacterSize(character)
		if not charSize then
			continue
		end
		local rSize = charSize
		local charVolume = rSize.X*rSize.Y*rSize.Z
		self.totalVolume += charVolume
		
		local characterJanitor = self.janitor:add(Janitor.new(), "destroy", "trackCharacterParts-"..self.name)
		local function updateTrackerOnParentChanged(instance)
			characterJanitor:add(instance.AncestryChanged:Connect(function()
				if not instance:IsDescendantOf(game) then
					if instance.Parent == nil and characterJanitor ~= nil then
						characterJanitor:destroy()
						characterJanitor = nil
						self:update()
					end
				end
			end), "Disconnect")
		end

		for _, part in pairs(character:GetChildren()) do
			if part:IsA("BasePart") and not Tracker.bodyPartsToIgnore[part.Name] then
				self.partToItem[part] = character
				table.insert(self.parts, part)
				updateTrackerOnParentChanged(part)
			end
		end
		updateTrackerOnParentChanged(character)
		table.insert(self.items, character)
	end

	-- This tracks any additional baseParts
	for additionalPart, _ in pairs(self.baseParts) do
		local rSize = additionalPart.Size
		local partVolume = rSize.X*rSize.Y*rSize.Z
		self.totalVolume += partVolume
		self.partToItem[additionalPart] = additionalPart
		table.insert(self.parts, additionalPart)
		table.insert(self.items, additionalPart)
	end
	
	-- This creates the whitelist so that
	self.whitelistParams = OverlapParams.new()
	self.whitelistParams.FilterType = Enum.RaycastFilterType.Whitelist
	self.whitelistParams.MaxParts = #self.parts
	self.whitelistParams.FilterDescendantsInstances = self.parts
end



return Tracker]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX411d35765bd44040a1444df39a1fe8ca">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ZonePlusReference</string>
					<string name="ScriptGuid">{E63240B9-CB5D-4A1F-9D47-097128722474}</string>
					<ProtectedString name="Source"><![CDATA[-- This module enables you to place Zone wherever you like within the data model while
-- still enabling third-party applications (such as HDAdmin/Nanoblox) to locate it
-- This is necessary to prevent two ZonePlus applications initiating at runtime which would
-- diminish it's overall efficiency

local replicatedStorage = game:GetService("ReplicatedStorage")
local ZonePlusReference = {}

function ZonePlusReference.addToReplicatedStorage()
    local existingItem = replicatedStorage:FindFirstChild(script.Name)
    if existingItem then
        return false
    end
    local objectValue = Instance.new("ObjectValue")
    objectValue.Name = script.Name
    objectValue.Value = script.Parent
    objectValue.Parent = replicatedStorage
    local locationValue = Instance.new("BoolValue")
    locationValue.Name = (game:GetService("RunService"):IsClient() and "Client") or "Server"
    locationValue.Value = true
    locationValue.Parent = objectValue
    return objectValue
end

function ZonePlusReference.getObject()
    local objectValue = replicatedStorage:FindFirstChild(script.Name)
    if objectValue then
        return objectValue
    end
    return false
end

return ZonePlusReference]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX02b2720196a6486f9516242fc4623f3a">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Misc</string>
				<string name="ScriptGuid">{BC9110E5-B2B5-461B-88C8-59468EDE31FB}</string>
				<ProtectedString name="Source"><![CDATA[local cs = game:GetService("CollectionService")
local LocalizationService = game:GetService("LocalizationService")
local Players = game:GetService("Players")

local SOURCE_LOCALE = "en"
local translator = nil


local Misc = {}

Misc.StrongKnockback = function(target, strength1, strength2, duration, Origin)
	local EffectVelocity = Instance.new("BodyVelocity", target)
	EffectVelocity.MaxForce = Vector3.new(1.2, 2.5, 1.2) * 1000000;
	EffectVelocity.Velocity = Vector3.new(1.2, 2.5, 1.2) * Origin.CFrame.LookVector * math.random(strength1, strength2)

	game.Debris:AddItem(EffectVelocity, duration)
end

Misc.TweenNumber = function(TextInstance, NumberVal, Duration, DesiredValue, BeforeText, AfterText)
	local part = NumberVal

	local tweenInfo = TweenInfo.new(
		1,
		Enum.EasingStyle.Linear, 
		Enum.EasingDirection.Out, 
		1, 
		false, 
		0 
	)

	local tween = game.TweenService:Create(part, tweenInfo, {Value = DesiredValue})

	tween:Play()

	part.Changed:Connect(function(val)
		if not BeforeText and not AfterText then
			TextInstance.Text = tonumber(math.round(val))
		elseif BeforeText and not AfterText then
			TextInstance.Text = BeforeText..tonumber(math.round(val))
		elseif not BeforeText and AfterText then
			TextInstance.Text = tonumber(math.round(val))..AfterText
		elseif BeforeText and AfterText then
			TextInstance.Text = BeforeText..tonumber(math.round(val))..AfterText
		end
	end)
end

Misc.InsertDisabled = function(Target, Duration)
	local disabled = Instance.new("BoolValue")
	disabled.Name = "Disabled"
	
	disabled.Parent = Target
	
	game.Debris:AddItem(disabled, Duration)
end

Misc.UpKnockback = function(target, strength1, strength2, duration, Origin)
	local EffectVelocity = Instance.new("BodyVelocity", target)
	EffectVelocity.MaxForce = Vector3.new(1, 1, 1) * 1000000;
	EffectVelocity.Velocity = Vector3.new(1, 1, 1) * Origin.CFrame.UpVector * math.random(strength1, strength2)

	game.Debris:AddItem(EffectVelocity, duration)
end

Misc.Ragdoll = function(Target, Duration)

	local ragVal = Instance.new("BoolValue")
	ragVal.Name = "Ragdoll"
	
	Misc.InsertDisabled(Target, Duration)
	
	ragVal.Parent = Target

	game.Debris:AddItem(ragVal, Duration)
end




return Misc
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBXe501f14ecc0f41ac99ac19d7e7b48b98">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">ModuleRock</string>
				<string name="ScriptGuid">{3983A2DB-A508-4D97-8620-74CD4B42690F}</string>
				<ProtectedString name="Source"><![CDATA[local module = {}

return module
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBXe5d0ffaaa88e420fbc6a092289797338">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Debris</string>
				<string name="ScriptGuid">{39F35E89-CBBB-4095-8201-0E6919530A97}</string>
				<ProtectedString name="Source"><![CDATA[local DebrisModule = {}

local ts = game:GetService("TweenService")
local cs = game:GetService("CollectionService")
local rs = game:GetService("ReplicatedStorage")
local PS = game:GetService("PhysicsService")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")

local RS = rs

local partCacheMod = require(rs.Modules.PartCache)
local BoltModule = require(rs.Modules.LightningBolt)
local SparksModule = require(rs.Modules.LightningBolt.LightningSparks)

local cacheFolder = workspace:WaitForChild("Debris")

local floor = cs:GetTagged("Floor")

local partCache = partCacheMod.new(Instance.new("Part"), 1000, cacheFolder)

local function GetXAndZPositions(Angle, Radius)
	local X = math.cos(Angle) * Radius 
	local Z = math.sin(Angle) * Radius
	return X, Z
end

local function CreateCircle(Part, Number)
	local Attachments = { }
	local FullCircle = 2 * math.pi
	local Radius = 7

	for i = 1, Number do
		local Attachment = Instance.new('Attachment')
		Attachment.Parent = Part

		local Angle = i * (FullCircle / Number)
		local X, Z = GetXAndZPositions(Angle, Radius)

		local Position = ( Part.CFrame * CFrame.new(X, 0, Z) ).Position
		local LookAt = Part.Position

		Attachment.WorldCFrame = CFrame.lookAt(Position, LookAt)
		table.insert(Attachments, Attachment)
	end
	return Attachments
end

function DebrisModule.lightningWaves(TargetPosition, Amount, Color)
	local PartMarker = Instance.new('Part')
	PartMarker.Name = 'Marker'
	PartMarker.Position = TargetPosition
	PartMarker.Anchored = true
	PartMarker.CanCollide = false
	PartMarker.CanTouch = false
	PartMarker.Transparency = 1
	PartMarker.Size = Vector3.new(1, 1, 1)
	PartMarker.Parent = workspace.Debris

	local Marker = Instance.new("Attachment")
	Marker.Parent = PartMarker

	local Circle = CreateCircle(PartMarker, Amount or 8)
	
	for _ = 1, math.random(5, 15) do
		local Lightning = BoltModule.new(Marker, Circle[math.random(#Circle)], 22)
		Lightning.MinRadius = 1
		Lightning.MaxRadius = 2
		Lightning.AnimationSpeed = 7
		Lightning.FadeLength = 0.7
		Lightning.PulseLength = 1
		Lightning.Thickness = math.random(0.5, 1.5)
		Lightning.PulseSpeed = math.random(8, 10)
		Lightning.Color = Color or Color3.fromRGB(203, 255, 254)
		SparksModule.new(Lightning)

		task.wait(0.02)
	end
end

function DebrisModule.sphereExp(targetPosition : Vector3, initialSize : number, targetSize : number, color : Color3)
	local Sphere = Instance.new('Part')
	Sphere.Anchored = true
	Sphere.CanCollide, Sphere.CastShadow, Sphere.CanTouch, Sphere.CanQuery = false, false, false, false
	Sphere.Size = Vector3.new(initialSize, initialSize, initialSize)
	Sphere.Position = targetPosition
	Sphere.Color = color
	Sphere.Material = Enum.Material.ForceField
	Sphere.Shape = Enum.PartType.Ball
	Sphere.Parent = workspace.Debris
	game:GetService("TweenService"):Create(Sphere, TweenInfo.new(0.75, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Size = Vector3.new(targetSize, targetSize, targetSize), Transparency = 1}):Play()
	Debris:AddItem(Sphere, 0.5)
end

function DebrisModule.lightningExplosion(Target, Amount, Color)
	coroutine.wrap(function()
		for _ = 1, Amount do
			local Attachment = Instance.new('Attachment')
			Attachment.WorldCFrame = Target.CFrame * CFrame.new(math.random(-45, 45), math.random(10, 25), math.random(-45, 45))
			Attachment.Parent = workspace.Terrain
			
			local Attachment1 = Instance.new('Attachment')
			Attachment1.Parent = Target
			local Bolt = BoltModule.new(Attachment1, Attachment, 11)
			Bolt.PulseSpeed = 4.25
			Bolt.PulseLength = 0.7
			--Bolt.FadeLength = 0.0001
			Bolt.Thickness = Random.new():NextNumber(0.6, 0.85)
			Bolt.MinThicknessMultiplier, Bolt.MaxThicknessMultiplier = 0.65, 1
			Bolt.AnimationSpeed = 6.25
			Bolt.MaxRadius = 10
			Bolt.MinTransparency, Bolt.MaxTransparency = 0, 1
			Bolt.ContractFrom = 1
			Bolt.Color = Color
			
			game.Debris:AddItem(Attachment, 2)
			game.Debris:AddItem(Attachment1, 2)
			
			task.wait(0.025)
		end
	end)()
end

function DebrisModule.BnWImpact()
	local ColorCorrection = Instance.new('ColorCorrectionEffect')
	ColorCorrection.Brightness = 0.1
	ColorCorrection.Saturation = -1
	ColorCorrection.Contrast = -5
	ColorCorrection.Parent = game.Lighting

	task.wait(0.05)
	ColorCorrection.Contrast = 1

	task.wait(0.05)
	ts:Create(ColorCorrection, TweenInfo.new(0.35, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Saturation = 0, Contrast = 0, Brightness = 0}):Play()
	Debris:AddItem(ColorCorrection, 0.35)
end

function DebrisModule.Shockwave(targetPos : Vector3, initialSize : number, targetSize : number)
	local Shockwave = script.Shockwave:Clone()
	Shockwave.Size = Vector3.new(4, initialSize, initialSize)
	Shockwave.Position = targetPos
	Shockwave.Parent = workspace.Debris
	ts:Create(Shockwave, TweenInfo.new(1, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Size = Vector3.new(4, targetSize, targetSize), Orientation = Shockwave.Orientation + Vector3.new(0, 240, 0)}):Play()
	task.wait(0.2)
	ts:Create(Shockwave, TweenInfo.new(0.35, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = Vector3.new(0, targetSize, targetSize), Transparency = 1}):Play()
	Debris:AddItem(Shockwave, 0.5)
end

function DebrisModule.BlockExplosion(TargetCFrame, sizeMin, sizeMax, minAmount, maxAmount, onFire, Ice)
	
	local folder = workspace.Debris
	
	local random = Random.new(math.random(-20000, 20000))
	
	for partAdd = 1, math.random(minAmount, maxAmount) do
		local size = random:NextNumber(sizeMin, sizeMax)
		
		local origin = TargetCFrame.Position
		local direction = Vector3.new(0,-100,0)

		local floor = cs:GetTagged("Floor")

		local Params = RaycastParams.new()
		Params.FilterDescendantsInstances = floor
		Params.FilterType = Enum.RaycastFilterType.Whitelist

		local raycastResult = workspace:Raycast(origin, direction, Params)
		
		local ray = Ray.new(origin + Vector3.new(0, 3, 0), Vector3.new(0, -50, 0))
		local hit, vec2Pos, surfaceNormal = workspace:FindPartOnRayWithWhitelist(ray, floor)
		
		if hit then
			local hitPart = hit
			
			local Effect = partCache:GetPart() --script:WaitForChild("Block"):Clone()
			Effect.Transparency = 0
			Effect.Anchored = false
			
			Effect.Material = hitPart.Material
			Effect.Color = hitPart.Color
			Effect.Size = Vector3.new(size,size,size)

			Effect.CFrame = TargetCFrame * CFrame.Angles(math.rad(math.random(-180, 180)), math.rad(math.random(15, 165)), math.rad(math.random(-180, 180)))
			
			Effect.CanCollide = true
			Effect.CanTouch = false
			Effect.CanQuery = false
			
			if Ice then
				Effect.Material = Enum.Material.Sand
				Effect.BrickColor = BrickColor.new("Lily white")
			end
			
			if onFire then
				local fireFX1 = rs.FX.OnFire.OnFire:Clone()
				local fireFX2 = rs.FX.OnFire.OnFireWisps:Clone()
				local fireFX3 = rs.FX.OnFire.OnFireSparks:Clone()
				local fireLight = rs.FX.OnFire.PointLight:Clone()
				
				fireFX1.Parent = Effect
				fireFX2.Parent = Effect
				fireFX3.Parent = Effect
				fireLight.Parent = Effect
				
				task.delay(2, function()
					ts:Create(fireLight, TweenInfo.new(0.9, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Brightness = 0, Range = 0})
					fireFX1.Enabled = false
					fireFX2.Enabled = false
					fireFX3.Enabled = false
				end)
				
				game.Debris:AddItem(fireFX1, 3.5)
				game.Debris:AddItem(fireFX2, 3.5)
				game.Debris:AddItem(fireFX3, 3.5)
				game.Debris:AddItem(fireLight, 3.5)
			end
			
			local db = false
			
			task.delay(2.9, function()
				local endTween = ts:Create(Effect, TweenInfo.new(0.6, Enum.EasingStyle.Back), {Size = Vector3.new(0,0,0)}):Play()
			end)

			local EffectVelocity = Instance.new("BodyVelocity", Effect)
			EffectVelocity.MaxForce = Vector3.new(0.5, 2, 0.5) * 100000;
			EffectVelocity.Velocity = Vector3.new(0.5, 2, 0.5) * Effect.CFrame.LookVector * math.random(50, 70)

			game.Debris:AddItem(EffectVelocity, 0.3)
			task.delay(3.5, function()
				partCache:ReturnPart(Effect)
			end)
		end
	end
end

function DebrisModule.TreeDestruction(Tree, Tag, Hitbox)
	
	local function removalFX(Target)
		local bigCircle = RS.FX:FindFirstChild("BigCircle"):Clone()
		local Balls = RS.FX:FindFirstChild("Balls"):Clone()
		local Lines = RS.FX:FindFirstChild("Lines"):Clone()

		local attachment = Instance.new("Attachment")

		bigCircle.Parent = attachment
		Balls.Parent = Target
		Lines.Parent = Target

		attachment.Parent = Target

		Balls:Emit(30)
		Lines:Emit(20)

		task.delay(1.5, function()
			attachment:Destroy()
			Balls:Destroy()
			Lines:Destroy()
		end)
	end

	local function neonFlash(Target, originalMaterial, OriginalBrickColor)
		task.delay(0.05, function()
			local sfxStart = RS.Sounds:FindFirstChild("DebrisRemoving"):Clone()
			sfxStart.Parent = Target
			sfxStart:Play()

			Target.Material = Enum.Material.Neon
			Target.BrickColor = BrickColor.new("Persimmon")
			task.wait(0.05)
			Target.Material = originalMaterial
			Target.BrickColor = OriginalBrickColor

			task.delay(0.1, function()
				Target.Material = Enum.Material.Neon
				Target.BrickColor = BrickColor.new("Persimmon")
				task.wait(0.05)
				Target.Material = originalMaterial
				Target.BrickColor = OriginalBrickColor

				task.delay(0.1, function()
					Target.Material = Enum.Material.Neon
					Target.BrickColor = BrickColor.new("Persimmon")
					task.wait(0.05)
					Target.Material = originalMaterial
					Target.BrickColor = OriginalBrickColor
					task.delay(0.1, function()
						Target.Material = Enum.Material.Neon
						Target.BrickColor = BrickColor.new("Persimmon")
					end)
				end)
			end)
		end)
	end

	local function neonFlashSpawning(Target, originalMaterial, OriginalBrickColor)
		task.delay(0.05, function()
			local sfxStart = RS.Sounds:FindFirstChild("DebrisSpawning"):Clone()
			sfxStart.Volume = 0.07
			sfxStart.Parent = Target
			sfxStart:Play()

			Target.Material = Enum.Material.Neon
			Target.BrickColor = BrickColor.new("Shamrock")
			task.wait(0.05)
			Target.Material = originalMaterial
			Target.BrickColor = OriginalBrickColor

			task.delay(0.1, function()
				Target.Material = Enum.Material.Neon
				Target.BrickColor = BrickColor.new("Shamrock")
				task.wait(0.05)
				Target.Material = originalMaterial
				Target.BrickColor = OriginalBrickColor

				task.delay(0.1, function()
					Target.Material = Enum.Material.Neon
					Target.BrickColor = BrickColor.new("Shamrock")
					task.wait(0.05)
					Target.Material = originalMaterial
					Target.BrickColor = OriginalBrickColor
					task.delay(0.1, function()
						Target.Material = Enum.Material.Neon
						Target.BrickColor = BrickColor.new("Shamrock")
						task.wait(0.05)
						Target.Material = originalMaterial
						Target.BrickColor = OriginalBrickColor
					end)
				end)
			end)
		end)
	end
	
	--print("1")
	
	if cs:HasTag(Tree, "Tree") or cs:HasTag(Tree, "Bush") then
		--warn("2")
		local tag

		local target = Tree
		if cs:HasTag(target, "Tree") then
			tag = "Tree"
			cs:RemoveTag(target, tag)
		end
		
		if cs:HasTag(target, "Bush") then
			tag = "Bush"
			cs:RemoveTag(target, tag)
		end

		local Clone = target:Clone()
		Clone.Parent = RS.DebrisCache

		target.Parent = workspace.Debris

		task.delay(15, function()


			for i, v in pairs(Clone:GetChildren()) do
				local originalSize = Instance.new("Vector3Value")
				originalSize.Value = v.Size
				originalSize.Parent = v

				game.Debris:AddItem(originalSize, 1)

				local args = {
					Size = originalSize.Value;
					Transparency = 0
				}

				local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Elastic, Enum.EasingDirection.In)

				v.Size = Vector3.new(0.05, 0.05, 0.05)
				v.Transparency = 1

				if Clone.Parent ~= workspace then
					Clone.Parent = workspace
					cs:AddTag(Clone, tag)
					cs:RemoveTag(Clone, Tag)
				end

				local tween = ts:Create(v, tweenInfo, args):Play()

				neonFlashSpawning(v, v.Material, v.BrickColor)

				task.delay(0.45, function()
					local endSfx = RS.Sounds:FindFirstChild("Pop"):Clone()
					endSfx.Parent = v
					endSfx:Play()
				end)
			end
		end)

		cs:AddTag(target, Tag)

		--if hit.Name == "Log" then
			local sfx = RS.Sounds:FindFirstChild("FallingTree"):Clone()
			sfx.Parent = Tree.Log
			sfx:Play()
		--end

		local args = {
			Size = Vector3.new(0.005, 0.005, 0.005);
			Transparency = 1
		}

		local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Elastic, Enum.EasingDirection.In)

		game.Debris:AddItem(target, 8)

		for i, v in pairs(target:GetChildren()) do
			PS:SetPartCollisionGroup(v, "Debris")

			if v:FindFirstChildWhichIsA("Weld") then
				v:FindFirstChildWhichIsA("Weld"):Destroy()
			end
			if v:FindFirstAncestorWhichIsA("WeldConstraint") then
				v:FindFirstAncestorWhichIsA("WeldConstraint"):Destroy()
			end
			if v:FindFirstAncestorWhichIsA("Motor6D") then
				v:FindFirstAncestorWhichIsA("Motor6D"):Destroy()
			end

			--Combat.StrongKnockback(v, 40, 65, 0.2, hitPart)
			--Misc.UpKnockback(v, 40, 65, 0.1, Hitbox)

			v.Anchored = false
			v.CanCollide = true
			v.CanTouch = false
			v.CanQuery = false
			
			
			
			local breakFX = RS.FX:FindFirstChild("DebrisBreak"):Clone()
			breakFX.Color = ColorSequence.new(v.Color)
			breakFX.Parent = v
			breakFX:Emit(40)
			task.delay(0.1, function()
				v:SetNetworkOwner(nil)
			end)

			task.delay(5, function()
				v.Anchored = true
				local tween = ts:Create(v, tweenInfo, args)
				tween:Play()
				task.delay(0.45, function()
					removalFX(v)
					local endSfx = RS.Sounds:FindFirstChild("Pop"):Clone()
					endSfx.Parent = v
					endSfx:Play()
				end)
				neonFlash(v, v.Material, v.BrickColor)
			end)
		end
	end
	
end

function DebrisModule.Ground(Pos, Distance, Size, filter, MaxRocks, Ice, despawnTime)
	local random = Random.new()

	local angle = 30
	local otherAngle = 360/MaxRocks
	local params = RaycastParams.new()
	params.FilterType = Enum.RaycastFilterType.Blacklist
	params.FilterDescendantsInstances = filter or {game.Players.LocalPlayer.Character, cacheFolder, workspace.Debris}
	local size
	size = Size or Vector3.new(2, 2, 2)
	local pos = Pos
	despawnTime = despawnTime or 3

	local fxPart = Instance.new("Part")
	fxPart.Transparency = 1
	fxPart.Anchored = true
	fxPart.Position = Pos
	fxPart.Size = Vector3.new()

	fxPart.Parent = workspace.Debris

	local ray = workspace:Raycast(Pos + Vector3.new(0, 1, 0), Vector3.new(0, -25, 0), params)
	if ray then
		local dustFX = script.Dust:Clone()
		dustFX.Color = ColorSequence.new(ray.Instance.Color)

		dustFX.Parent = fxPart
		dustFX:Emit(dustFX:GetAttribute("EmitCount"))
	end



	game.Debris:AddItem(fxPart, 3)

	local function OuterRocksLoop ()
		for i = 1, MaxRocks do
			local cf = CFrame.new(Pos)
			local newCF = cf * CFrame.fromEulerAnglesXYZ(0, math.rad(angle), 0) * CFrame.new(Distance/2 + Distance/2.7, 10, 0)
			local ray = workspace:Raycast(newCF.Position, Vector3.new(0, -20, 0), params)
			angle += otherAngle
			if ray then
				local part = partCache:GetPart()
				local hoof = partCache:GetPart()

				part.CFrame = CFrame.new(ray.Position - Vector3.new(0, 0.5, 0), Pos) * CFrame.fromEulerAnglesXYZ(random:NextNumber(-.25, .5), random:NextNumber(-.25, .25), random:NextNumber(-.25, .25))
				part.Size = Vector3.new(size.X * 1.3, size.Y/1.4, size.Z * 1.3) * random:NextNumber(1, 1.5)

				hoof.Size = Vector3.new(part.Size.X * 1.01, part.Size.Y * 0.25, part.Size.Z * 1.01)
				hoof.CFrame = part.CFrame * CFrame.new(0, part.Size.Y/2 - hoof.Size.Y / 2.1, 0)

				part.Parent = cacheFolder
				hoof.Parent = cacheFolder

				if ray.Instance.Material == Enum.Material.Concrete or ray.Instance.Material == Enum.Material.Air or ray.Instance.Material == Enum.Material.Wood or ray.Instance.Material == Enum.Material.Neon or ray.Instance.Material == Enum.Material.WoodPlanks then
					part.Material = ray.Instance.Material	
					hoof.Material = ray.Instance.Material	
				else
					part.Material = Enum.Material.Concrete
					hoof.Material = ray.Instance.Material	
				end

				part.BrickColor = BrickColor.new("Dark grey")
				part.Anchored = true
				part.CanTouch = false
				part.CanCollide = false

				hoof.BrickColor = ray.Instance.BrickColor
				hoof.Anchored = true
				hoof.CanTouch = false
				hoof.CanCollide = false

				if Ice then
					part.BrickColor = BrickColor.new("Pastel light blue")
					hoof.BrickColor = BrickColor.new("Lily white")
					part.Material = Enum.Material.Ice
					hoof.Material = Enum.Material.Sand
				end

				task.delay(despawnTime, function()
					ts:Create(part,TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),{Size = Vector3.new(.01, .01, .01)}):Play()
					ts:Create(hoof,TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),{Size = Vector3.new(.01, .01, .01), CFrame = part.CFrame * CFrame.new(0, part.Size.Y/2 - part.Size.Y / 2.1, 0)}):Play()

					task.delay(0.6, function()
						partCache:ReturnPart(part)
						partCache:ReturnPart(hoof)
					end)
				end)
			end		
		end
	end

	local function InnerRocksLoop ()
		for i = 1, MaxRocks do
			local cf = CFrame.new(Pos)
			local newCF = cf * CFrame.fromEulerAnglesXYZ(0, math.rad(angle), 0) * CFrame.new(Distance/2 + Distance/10, 10, 0)
			local ray = game.Workspace:Raycast(newCF.Position, Vector3.new(0, -20, 0), params)
			angle += otherAngle
			if ray then
				local part = partCache:GetPart()
				local hoof = partCache:GetPart()

				part.CFrame = CFrame.new(ray.Position - Vector3.new(0, size.Y * 0.4, 0), Pos) * CFrame.fromEulerAnglesXYZ(random:NextNumber(-1,-0.3),random:NextNumber(-0.15,0.15),random:NextNumber(-.15,.15))
				part.Size = Vector3.new(size.X * 1.3, size.Y * 0.7, size.Z * 1.3) * random:NextNumber(1, 1.5)

				hoof.Size = Vector3.new(part.Size.X * 1.01, part.Size.Y * 0.25, part.Size.Z * 1.01)
				hoof.CFrame = part.CFrame * CFrame.new(0, part.Size.Y/2 - hoof.Size.Y / 2.1, 0)

				part.Parent = cacheFolder
				hoof.Parent = cacheFolder

				if ray.Instance.Material == Enum.Material.Concrete or ray.Instance.Material == Enum.Material.Air or ray.Instance.Material == Enum.Material.Wood or ray.Instance.Material == Enum.Material.Neon or ray.Instance.Material == Enum.Material.WoodPlanks then
					part.Material = ray.Instance.Material	
					hoof.Material = ray.Instance.Material	
				else
					part.Material = Enum.Material.Concrete --ray.Instance.Material	
					hoof.Material = ray.Instance.Material	
				end

				part.BrickColor = BrickColor.new("Dark grey") --ray.Instance.BrickColor
				part.Anchored = true
				part.CanTouch = false
				part.CanCollide = false

				hoof.BrickColor = ray.Instance.BrickColor
				hoof.Anchored = true
				hoof.CanTouch = false
				hoof.CanCollide = false

				if Ice then
					part.BrickColor = BrickColor.new("Pastel light blue")
					hoof.BrickColor = BrickColor.new("Lily white")
					part.Material = Enum.Material.Ice
					hoof.Material = Enum.Material.Sand
				end

				task.delay(despawnTime, function()
					ts:Create(part,TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),{Size = Vector3.new(.01, .01, .01)}):Play()
					ts:Create(hoof,TweenInfo.new(0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),{Size = Vector3.new(.01, .01, .01), CFrame = part.CFrame * CFrame.new(0, part.Size.Y/2 - part.Size.Y / 2.1, 0)}):Play()

					task.delay(0.6, function()
						partCache:ReturnPart(part)
						partCache:ReturnPart(hoof)
					end)
				end)
			end		
		end
	end
	InnerRocksLoop()
	OuterRocksLoop()
end

function DebrisModule.SideRocks(cf2, duration, size, spread)
	local random = Random.new(math.random(-math.huge, math.huge))
	local sizeVariation = random:NextNumber(0.9, 1.05)
	
	local angle = 180
	local params = RaycastParams.new()
	params.FilterType = Enum.RaycastFilterType.Whitelist
	params.FilterDescendantsInstances = {floor}
	local rockf = workspace.Debris
	for i= 1,2 do
		local cf = cf2
		local newcf = cf * CFrame.fromEulerAnglesXYZ(0, math.rad(angle), 0) * CFrame.new(spread, 0, 0)
		local ray = game.Workspace:Raycast(newcf.Position, Vector3.new(0,-10,0), params)
		if ray then			
			local part = partCache:GetPart()
			part.Transparency = 0
			part.CanCollide = false
			part.CFrame = newcf * CFrame.new(Vector3.new(0,.5,0))
			part.Size = Vector3.new(size, size, size) * sizeVariation
			part.Position = ray.Position
			part.Material = ray.Instance.Material
			part.BrickColor = ray.Instance.BrickColor
			part.Anchored = true
			part.Orientation = Vector3.new(math.random(-180,180), math.random(-180,180), math.random(-180,180))
			angle += 180
			part.Parent = rockf
			
			task.delay(duration,function()
				local twi = TweenInfo.new(0.7)
				local goal = {Size = Vector3.new(.01,.01,.01)}
				local tween = ts:Create(part,twi,goal)
				tween:Play()

				task.delay(0.71, function()
					if part then
						partCache:ReturnPart(part)
					end
				end)
			end)
		end
	end
end

return DebrisModule
]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="Sound" referent="RBX660d59c41ae343f68c916e8cc9691389">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="IsMutedForCapture">false</bool>
					<NumberRange name="LoopRegion">0 60000 </NumberRange>
					<bool name="Looped">false</bool>
					<string name="Name">Break</string>
					<bool name="PlayOnRemove">false</bool>
					<NumberRange name="PlaybackRegion">0 60000 </NumberRange>
					<bool name="PlaybackRegionsEnabled">false</bool>
					<float name="PlaybackSpeed">3</float>
					<bool name="Playing">false</bool>
					<float name="RollOffMaxDistance">200</float>
					<float name="RollOffMinDistance">10</float>
					<token name="RollOffMode">0</token>
					<Ref name="SoundGroup">null</Ref>
					<Content name="SoundId"><url>rbxassetid://3744391247</url></Content>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<double name="TimePosition">0</double>
					<float name="Volume">0.25</float>
				</Properties>
				<Item class="EqualizerSoundEffect" referent="RBXd308d3aac006459a8d37752e79dc656f">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Enabled">true</bool>
						<float name="HighGain">0</float>
						<float name="LowGain">-15</float>
						<float name="MidGain">-5</float>
						<string name="Name">EqualizerSoundEffect</string>
						<int name="Priority">0</int>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="ParticleEmitter" referent="RBX542b58444e2243c3858c6ea24b40c23a">
				<Properties>
					<Vector3 name="Acceleration">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<float name="Brightness">0.699999988</float>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<ColorSequence name="Color">0 0.423529 0.345098 0.294118 0 1 0.423529 0.345098 0.294118 0 </ColorSequence>
					<bool name="DefinesCapabilities">false</bool>
					<float name="Drag">0</float>
					<token name="EmissionDirection">1</token>
					<bool name="Enabled">false</bool>
					<NumberRange name="FlipbookFramerate">1 1 </NumberRange>
					<string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
					<token name="FlipbookLayout">0</token>
					<token name="FlipbookMode">0</token>
					<bool name="FlipbookStartRandom">false</bool>
					<NumberRange name="Lifetime">1.5 1.5 </NumberRange>
					<float name="LightEmission">0</float>
					<float name="LightInfluence">0</float>
					<bool name="LockedToPart">false</bool>
					<string name="Name">BreakFX</string>
					<token name="Orientation">0</token>
					<float name="Rate">100</float>
					<NumberRange name="RotSpeed">0 0 </NumberRange>
					<NumberRange name="Rotation">0 0 </NumberRange>
					<token name="Shape">0</token>
					<token name="ShapeInOut">0</token>
					<float name="ShapePartial">1</float>
					<token name="ShapeStyle">0</token>
					<NumberSequence name="Size">0 1 1 1 3 1.25 </NumberSequence>
					<int64 name="SourceAssetId">-1</int64>
					<NumberRange name="Speed">5 5 </NumberRange>
					<Vector2 name="SpreadAngle">
						<X>1000</X>
						<Y>1000</Y>
					</Vector2>
					<NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>rbxassetid://1084987899</url></Content>
					<float name="TimeScale">1</float>
					<NumberSequence name="Transparency">0 1 0 0.267 0.8 0.075 1 1 0 </NumberSequence>
					<float name="VelocityInheritance">0</float>
					<bool name="WindAffectsDrag">false</bool>
					<float name="ZOffset">0</float>
				</Properties>
			</Item>
			<Item class="MeshPart" referent="RBX5bf22258191b48eabd7a670cbd561906">
				<Properties>
					<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
					<bool name="Anchored">false</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AudioCanCollide">true</bool>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>3458.43188</X>
						<Y>-228.222229</Y>
						<Z>-1766.54968</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CanQuery">true</bool>
					<bool name="CanTouch">true</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="CastShadow">true</bool>
					<string name="CollisionGroup">Default</string>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="DoubleSided">false</bool>
					<bool name="EnableFluidForces">true</bool>
					<token name="FluidFidelityInternal">0</token>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<bool name="HasJointOffset">false</bool>
					<bool name="HasSkinnedMesh">false</bool>
					<bool name="InertiaMigrated">true</bool>
					<Vector3 name="InitialSize">
						<X>2</X>
						<Y>2</Y>
						<Z>2</Z>
					</Vector3>
					<Vector3 name="JointOffset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">true</bool>
					<token name="Material">256</token>
					<string name="MaterialVariantSerialized"></string>
					<Content name="MeshId"><url>rbxassetid://3110114862</url></Content>
					<string name="Name">Block</string>
					<SharedString name="PhysicalConfigData">oa+n2IgSm65Ni/7mWk7lOw==</SharedString>
					<BinaryString name="PhysicsData"></BinaryString>
					<CoordinateFrame name="PivotOffset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<float name="Reflectance">0</float>
					<token name="RenderFidelity">1</token>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<Content name="TextureID"><null></null></Content>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="UnscaledCofm">
						<X>0.0161541775</X>
						<Y>-0.000456363487</Y>
						<Z>-0.0103288107</Z>
					</Vector3>
					<Vector3 name="UnscaledVolInertiaDiags">
						<X>4.26618767</X>
						<Y>4.34022045</Y>
						<Z>4.27539062</Z>
					</Vector3>
					<Vector3 name="UnscaledVolInertiaOffDiags">
						<X>-0.0180805922</X>
						<Y>0.0424546003</Y>
						<Z>0.0176622272</Z>
					</Vector3>
					<float name="UnscaledVolume">5.55050659</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<int name="VertexCount">0</int>
					<Vector3 name="size">
						<X>10</X>
						<Y>10</Y>
						<Z>10</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="Part" referent="RBXc8de27bf11d8418fb094b61a4c9ce7ba">
				<Properties>
					<bool name="Anchored">false</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AudioCanCollide">true</bool>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>2863.76489</X>
						<Y>-227.729782</Y>
						<Z>-1878.73645</Z>
						<R00>1</R00>
						<R01>7.45057971e-09</R01>
						<R02>2.56603343e-19</R02>
						<R10>-7.45057971e-09</R10>
						<R11>1</R11>
						<R12>-4.41650538e-09</R12>
						<R20>-3.31621307e-17</R20>
						<R21>4.41650538e-09</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">true</bool>
					<bool name="CanQuery">true</bool>
					<bool name="CanTouch">true</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="CastShadow">true</bool>
					<string name="CollisionGroup">Default</string>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="EnableFluidForces">true</bool>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">256</token>
					<string name="MaterialVariantSerialized"></string>
					<string name="Name">Part</string>
					<CoordinateFrame name="PivotOffset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<float name="Reflectance">0</float>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<token name="formFactorRaw">1</token>
					<token name="shape">1</token>
					<Vector3 name="size">
						<X>1</X>
						<Y>1</Y>
						<Z>1</Z>
					</Vector3>
				</Properties>
				<Item class="BlockMesh" referent="RBXe2c0a9ef5f67456bb88fed50f123b5d2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Bevel">0</float>
						<float name="Bevel Roundness">0</float>
						<float name="Bulge">0</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="DefinesCapabilities">false</bool>
						<string name="Name">Mesh</string>
						<Vector3 name="Offset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<Vector3 name="Scale">
							<X>1</X>
							<Y>1</Y>
							<Z>1</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Vector3 name="VertexColor">
							<X>1</X>
							<Y>1</Y>
							<Z>1</Z>
						</Vector3>
					</Properties>
				</Item>
			</Item>
			<Item class="MeshPart" referent="RBX194f43191a6945188034a9b2a43854b6">
				<Properties>
					<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
					<bool name="Anchored">true</bool>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AudioCanCollide">true</bool>
					<float name="BackParamA">-0.5</float>
					<float name="BackParamB">0.5</float>
					<token name="BackSurface">0</token>
					<token name="BackSurfaceInput">0</token>
					<float name="BottomParamA">-0.5</float>
					<float name="BottomParamB">0.5</float>
					<token name="BottomSurface">0</token>
					<token name="BottomSurfaceInput">0</token>
					<CoordinateFrame name="CFrame">
						<X>3544.60718</X>
						<Y>-228.722229</Y>
						<Z>-1111.37537</Z>
						<R00>9.23861421e-07</R00>
						<R01>1</R01>
						<R02>-3.26018412e-09</R02>
						<R10>-1</R10>
						<R11>9.23861421e-07</R11>
						<R12>6.24920801e-07</R12>
						<R20>6.24920801e-07</R20>
						<R21>3.25960148e-09</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<bool name="CanCollide">false</bool>
					<bool name="CanQuery">false</bool>
					<bool name="CanTouch">false</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="CastShadow">false</bool>
					<string name="CollisionGroup">Default</string>
					<int name="CollisionGroupId">0</int>
					<Color3uint8 name="Color3uint8">4293651435</Color3uint8>
					<PhysicalProperties name="CustomPhysicalProperties">
						<CustomPhysics>false</CustomPhysics>
					</PhysicalProperties>
					<bool name="DefinesCapabilities">false</bool>
					<bool name="DoubleSided">true</bool>
					<bool name="EnableFluidForces">true</bool>
					<token name="FluidFidelityInternal">0</token>
					<float name="FrontParamA">-0.5</float>
					<float name="FrontParamB">0.5</float>
					<token name="FrontSurface">0</token>
					<token name="FrontSurfaceInput">0</token>
					<bool name="HasJointOffset">false</bool>
					<bool name="HasSkinnedMesh">false</bool>
					<bool name="InertiaMigrated">true</bool>
					<Vector3 name="InitialSize">
						<X>0.232500076</X>
						<Y>14.8791008</Y>
						<Z>14.8791962</Z>
					</Vector3>
					<Vector3 name="JointOffset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<float name="LeftParamA">-0.5</float>
					<float name="LeftParamB">0.5</float>
					<token name="LeftSurface">0</token>
					<token name="LeftSurfaceInput">0</token>
					<bool name="Locked">false</bool>
					<bool name="Massless">false</bool>
					<token name="Material">288</token>
					<string name="MaterialVariantSerialized"></string>
					<Content name="MeshId"><url>rbxassetid://3354830324</url></Content>
					<string name="Name">Shockwave</string>
					<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
					<BinaryString name="PhysicsData"></BinaryString>
					<CoordinateFrame name="PivotOffset">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
						<R00>1</R00>
						<R01>0</R01>
						<R02>0</R02>
						<R10>0</R10>
						<R11>1</R11>
						<R12>0</R12>
						<R20>0</R20>
						<R21>0</R21>
						<R22>1</R22>
					</CoordinateFrame>
					<float name="Reflectance">0</float>
					<token name="RenderFidelity">1</token>
					<float name="RightParamA">-0.5</float>
					<float name="RightParamB">0.5</float>
					<token name="RightSurface">0</token>
					<token name="RightSurfaceInput">0</token>
					<int name="RootPriority">0</int>
					<Vector3 name="RotVelocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<int64 name="SourceAssetId">6594513093</int64>
					<BinaryString name="Tags"></BinaryString>
					<Content name="TextureID"><null></null></Content>
					<float name="TopParamA">-0.5</float>
					<float name="TopParamB">0.5</float>
					<token name="TopSurface">0</token>
					<token name="TopSurfaceInput">0</token>
					<float name="Transparency">0.75</float>
					<Vector3 name="UnscaledCofm">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<Vector3 name="UnscaledVolInertiaDiags">
						<X>1899.25891</X>
						<Y>949.867432</Y>
						<Z>949.855286</Z>
					</Vector3>
					<Vector3 name="UnscaledVolInertiaOffDiags">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<float name="UnscaledVolume">51.4729729</float>
					<Vector3 name="Velocity">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<int name="VertexCount">0</int>
					<Vector3 name="size">
						<X>1</X>
						<Y>10</Y>
						<Z>10</Z>
					</Vector3>
				</Properties>
			</Item>
			<Item class="ParticleEmitter" referent="RBXf66f153fefd748a5b504ad6c16f6afcf">
				<Properties>
					<Vector3 name="Acceleration">
						<X>0</X>
						<Y>0</Y>
						<Z>0</Z>
					</Vector3>
					<BinaryString name="AttributesSerialize">AQAAAAkAAABFbWl0Q291bnQGAAAAAACARkA=</BinaryString>
					<float name="Brightness">1.5</float>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<ColorSequence name="Color">0 0.74902 0.721569 0.580392 0 1 0.74902 0.721569 0.580392 0 </ColorSequence>
					<bool name="DefinesCapabilities">false</bool>
					<float name="Drag">5</float>
					<token name="EmissionDirection">1</token>
					<bool name="Enabled">false</bool>
					<NumberRange name="FlipbookFramerate">1 1 </NumberRange>
					<string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
					<token name="FlipbookLayout">0</token>
					<token name="FlipbookMode">0</token>
					<bool name="FlipbookStartRandom">false</bool>
					<NumberRange name="Lifetime">2 3 </NumberRange>
					<float name="LightEmission">0</float>
					<float name="LightInfluence">0</float>
					<bool name="LockedToPart">false</bool>
					<string name="Name">Dust</string>
					<token name="Orientation">0</token>
					<float name="Rate">35</float>
					<NumberRange name="RotSpeed">-90 90 </NumberRange>
					<NumberRange name="Rotation">-360 360 </NumberRange>
					<token name="Shape">0</token>
					<token name="ShapeInOut">0</token>
					<float name="ShapePartial">1</float>
					<token name="ShapeStyle">0</token>
					<NumberSequence name="Size">0 2 0 1 8 2 </NumberSequence>
					<int64 name="SourceAssetId">-1</int64>
					<NumberRange name="Speed">30 40 </NumberRange>
					<Vector2 name="SpreadAngle">
						<X>360</X>
						<Y>360</Y>
					</Vector2>
					<NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
					<BinaryString name="Tags"></BinaryString>
					<Content name="Texture"><url>rbxassetid://9232117588</url></Content>
					<float name="TimeScale">1</float>
					<NumberSequence name="Transparency">0 1 0 0.2 0.75 0 1 1 0 </NumberSequence>
					<float name="VelocityInheritance">0</float>
					<bool name="WindAffectsDrag">false</bool>
					<float name="ZOffset">0</float>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX5bb617afb9884d7a80a8ab5700312d3f">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">LightningBolt</string>
				<string name="ScriptGuid">{7665A730-2F45-48EB-85B7-8920B214F576}</string>
				<ProtectedString name="Source"><![CDATA[--Procedural Lightning Module. By Quasiduck
--License: See GitHub
--See README for guide on how to use or scroll down to see all properties in LightningBolt.new
--All properties update in real-time except PartCount which requires a new LightningBolt to change
--i.e. You can change a property at any time and it will still update the look of the bolt

local clock = os.clock






local function DiscretePulse(input, s, k, f, t, min, max) --input should be between 0 and 1. See https://www.desmos.com/calculator/hg5h4fpfim for demonstration.
	return math.clamp( (k)/(2*f) - math.abs( (input - t*s + 0.5*(k)) / (f) ), min, max )
end

local function NoiseBetween(x, y, z, min, max)
	return min + (max - min)*(math.noise(x, y, z) + 0.5)
end

local function CubicBezier(p0, p1, p2, p3, t)
	return p0*(1 - t)^3 + p1*3*t*(1 - t)^2 + p2*3*(1 - t)*t^2 + p3*t^3
end

local BoltPart = Instance.new("Part")
BoltPart.TopSurface, BoltPart.BottomSurface = 0, 0
BoltPart.Anchored, BoltPart.CanCollide = true, false
BoltPart.Shape = "Cylinder"
BoltPart.Name = "BoltPart"
BoltPart.CanTouch = false
BoltPart.CastShadow = false
BoltPart.CanQuery = false
BoltPart.Material = Enum.Material.Neon
BoltPart.Color = Color3.new(1, 1, 1)
BoltPart.Transparency = 1

local rng = Random.new()
local xInverse = CFrame.lookAt(Vector3.new(), Vector3.new(1, 0, 0)):inverse()

local ActiveBranches = {}

local LightningBolt = {}
LightningBolt.__index = LightningBolt

--Small tip: You don't need to use actual Roblox Attachments below. You can also create "fake" ones as follows:
--[[
local A1, A2 = {}, {}
A1.WorldPosition, A1.WorldAxis = chosenPos1, chosenAxis1
A2.WorldPosition, A2.WorldAxis = chosenPos2, chosenAxis2
local NewBolt = LightningBolt.new(A1, A2, 40)
--]]

function LightningBolt.new(Attachment0, Attachment1, PartCount)
	local self = setmetatable({}, LightningBolt)
	
	--Main (default) Properties--
	
		--Bolt Appearance Properties--
			self.Enabled = true --Hides bolt without destroying any parts when false
			self.Attachment0, self.Attachment1 = Attachment0, Attachment1 --Bolt originates from Attachment0 and ends at Attachment1
			self.CurveSize0, self.CurveSize1 = 0, 0 --Works similarly to beams. See https://dk135eecbplh9.cloudfront.net/assets/blt160ad3fdeadd4ff2/BeamCurve1.png
			self.MinRadius, self.MaxRadius = 0, 2.4 --Governs the amplitude of fluctuations throughout the bolt
			self.Frequency = 1 --Governs the frequency of fluctuations throughout the bolt. Lower this to remove jittery-looking lightning
			self.AnimationSpeed = 7 --Governs how fast the bolt oscillates (i.e. how fast the fluctuating wave travels along bolt)
			self.Thickness = 1 --The thickness of the bolt
			self.MinThicknessMultiplier, self.MaxThicknessMultiplier = 0.2, 1 --Multiplies Thickness value by a fluctuating random value between MinThicknessMultiplier and MaxThicknessMultiplier along the Bolt
	
		--Bolt Kinetic Properties--
			--Allows for fading in (or out) of the bolt with time. Can also create a "projectile" bolt
			--Recommend setting AnimationSpeed to 0 if used as projectile (for better aesthetics)
			--Works by passing a "wave" function which travels from left to right where the wave height represents opacity (opacity being 1 - Transparency)
			--See https://www.desmos.com/calculator/hg5h4fpfim to help customise the shape of the wave with the below properties
			self.MinTransparency, self.MaxTransparency = 0, 1 --See https://www.desmos.com/calculator/hg5h4fpfim
			self.PulseSpeed = 2 --Bolt arrives at Attachment1 1/PulseSpeed seconds later. See https://www.desmos.com/calculator/hg5h4fpfim
			self.PulseLength = 1000000 --See https://www.desmos.com/calculator/hg5h4fpfim
			self.FadeLength = 0.2 --See https://www.desmos.com/calculator/hg5h4fpfim
			self.ContractFrom = 0.5 --Parts shorten or grow once their Transparency exceeds this value. Set to a value above 1 to turn effect off. See https://imgur.com/OChA441
	
		--Bolt Color Properties--
			self.Color = Color3.new(1, 1, 1) --Can be a Color3 or ColorSequence
			self.ColorOffsetSpeed = 3 --Sets speed at which ColorSequence travels along Bolt
	
	--
	
	self.Parts = {} --The BoltParts which make up the Bolt
	
	
	local a0, a1 = Attachment0, Attachment1
	local parent = workspace.CurrentCamera
	local p0, p1, p2, p3 = a0.WorldPosition, a0.WorldPosition + a0.WorldAxis*self.CurveSize0, a1.WorldPosition - a1.WorldAxis*self.CurveSize1, a1.WorldPosition
	local PrevPoint, bezier0 = p0, p0
	local MainBranchN = PartCount or 30
	
	for i = 1, MainBranchN do
		local t1 = i/MainBranchN
		local bezier1 = CubicBezier(p0, p1, p2, p3, t1)
		local NextPoint = i ~= MainBranchN and (CFrame.lookAt(bezier0, bezier1)).Position or bezier1
		local BPart = BoltPart:Clone()
		BPart.Size = Vector3.new((NextPoint - PrevPoint).Magnitude, 0, 0)
		BPart.CFrame = CFrame.lookAt(0.5*(PrevPoint + NextPoint), NextPoint)*xInverse
		BPart.Parent = parent
		BPart.Locked, BPart.CastShadow = true, false
		self.Parts[i] = BPart
		PrevPoint, bezier0 = NextPoint, bezier1
	end
	
	self.PartsHidden = false
	self.DisabledTransparency = 1
	self.StartT = clock()
	self.RanNum = math.random()*100
	self.RefIndex = #ActiveBranches + 1
	
	ActiveBranches[self.RefIndex] = self
	
	return self
end

function LightningBolt:Destroy()
	ActiveBranches[self.RefIndex] = nil
	
	for i = 1, #self.Parts do
		self.Parts[i]:Destroy()
		
		if i%100 == 0 then wait() end
	end
	
	self = nil
end

local offsetAngle = math.cos(math.rad(90))

game:GetService("RunService").Heartbeat:Connect(function ()
	
	for _, ThisBranch in pairs(ActiveBranches) do
		if ThisBranch.Enabled == true then
			ThisBranch.PartsHidden = false
			local MinOpa, MaxOpa = 1 - ThisBranch.MaxTransparency, 1 - ThisBranch.MinTransparency
			local MinRadius, MaxRadius = ThisBranch.MinRadius, ThisBranch.MaxRadius
			local thickness = ThisBranch.Thickness
			local Parts = ThisBranch.Parts
			local PartsN = #Parts
			local RanNum = ThisBranch.RanNum
			local StartT = ThisBranch.StartT
			local spd = ThisBranch.AnimationSpeed
			local freq = ThisBranch.Frequency
			local MinThick, MaxThick = ThisBranch.MinThicknessMultiplier, ThisBranch.MaxThicknessMultiplier
			local a0, a1, CurveSize0, CurveSize1 = ThisBranch.Attachment0, ThisBranch.Attachment1, ThisBranch.CurveSize0, ThisBranch.CurveSize1
			local p0, p1, p2, p3 = a0.WorldPosition, a0.WorldPosition + a0.WorldAxis*CurveSize0, a1.WorldPosition - a1.WorldAxis*CurveSize1, a1.WorldPosition
			local timePassed = clock() - StartT
			local PulseLength, PulseSpeed, FadeLength = ThisBranch.PulseLength, ThisBranch.PulseSpeed, ThisBranch.FadeLength
			local Color = ThisBranch.Color
			local ColorOffsetSpeed = ThisBranch.ColorOffsetSpeed
			local contractf = 1 - ThisBranch.ContractFrom
			local PrevPoint, bezier0 = p0, p0
			
			if timePassed < (PulseLength + 1) / PulseSpeed then
				
				for i = 1, PartsN do
					--local spd = NoiseBetween(i/PartsN, 1.5, 0.1*i/PartsN, -MinAnimationSpeed, MaxAnimationSpeed) --Can enable to have an alternative animation which doesn't shift the noisy lightning "Texture" along the bolt
					local BPart = Parts[i]
					local t1 = i/PartsN
					local Opacity = DiscretePulse(t1, PulseSpeed, PulseLength, FadeLength, timePassed, MinOpa, MaxOpa)
					local bezier1 = CubicBezier(p0, p1, p2, p3, t1)
					local time = -timePassed --minus to ensure bolt waves travel from a0 to a1
					local input, input2 = (spd*time) + freq*10*t1 - 0.2 + RanNum*4, 5*((spd*0.01*time) / 10 + freq*t1) + RanNum*4
					local noise0 = NoiseBetween(5*input, 1.5, 5*0.2*input2, 0, 0.1*2*math.pi) + NoiseBetween(0.5*input, 1.5, 0.5*0.2*input2, 0, 0.9*2*math.pi)
					local noise1 = NoiseBetween(3.4, input2, input, MinRadius, MaxRadius)*math.exp(-5000*(t1 - 0.5)^10)
					local thicknessNoise = NoiseBetween(2.3, input2, input, MinThick, MaxThick)
					local NextPoint = i ~= PartsN and (CFrame.new(bezier0, bezier1)*CFrame.Angles(0, 0, noise0)*CFrame.Angles(math.acos(math.clamp(NoiseBetween(input2, input, 2.7, offsetAngle, 1), -1, 1)), 0, 0)*CFrame.new(0, 0, -noise1)).Position or bezier1
					
					if Opacity > contractf then
						BPart.Size = Vector3.new((NextPoint - PrevPoint).Magnitude, thickness*thicknessNoise*Opacity, thickness*thicknessNoise*Opacity)
						BPart.CFrame = CFrame.lookAt(0.5*(PrevPoint + NextPoint), NextPoint)*xInverse
						BPart.Transparency = 1 - Opacity
					elseif Opacity > contractf - 1/(PartsN*FadeLength) then
						local interp = (1 - (Opacity - (contractf - 1/(PartsN*FadeLength)))*PartsN*FadeLength)*(t1 < timePassed*PulseSpeed - 0.5*PulseLength and 1 or -1)
						BPart.Size = Vector3.new((1 - math.abs(interp))*(NextPoint - PrevPoint).Magnitude, thickness*thicknessNoise*Opacity, thickness*thicknessNoise*Opacity)
						BPart.CFrame = CFrame.lookAt(PrevPoint + (NextPoint - PrevPoint)*(math.max(0, interp) + 0.5*(1 - math.abs(interp))), NextPoint)*xInverse
						BPart.Transparency = 1 - Opacity
					else
						BPart.Transparency = 1
					end
					
					if typeof(Color) == "Color3" then
						BPart.Color = Color
					else --ColorSequence
						t1 = (RanNum + t1 - timePassed*ColorOffsetSpeed)%1
						local keypoints = Color.Keypoints 
						for i = 1, #keypoints - 1 do --convert colorsequence onto lightning
							if keypoints[i].Time < t1 and t1 < keypoints[i+1].Time then
								BPart.Color = keypoints[i].Value:lerp(keypoints[i+1].Value, (t1 - keypoints[i].Time)/(keypoints[i+1].Time - keypoints[i].Time))
								break
							end
						end
					end
					
					PrevPoint, bezier0 = NextPoint, bezier1
				end
				
			else
				
				ThisBranch:Destroy()
				
			end
			
		else --Enabled = false
			
			if ThisBranch.PartsHidden == false then
				ThisBranch.PartsHidden = true
				local datr = ThisBranch.DisabledTransparency
				for i = 1, #ThisBranch.Parts do
					ThisBranch.Parts[i].Transparency = datr
				end
			end
			
		end
	end
	
end)

return LightningBolt]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXb2cd2a1f38894bfb9a21b1bce065644b">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LightningSparks</string>
					<string name="ScriptGuid">{897400D7-AD2C-4BF0-8F30-4D296A3389C5}</string>
					<ProtectedString name="Source"><![CDATA[--Adds sparks effect to a Lightning Bolt
local LightningBolt = require(script.Parent)

local ActiveSparks = {}


local rng = Random.new()
local LightningSparks = {}
LightningSparks.__index = LightningSparks

function LightningSparks.new(LightningBolt, MaxSparkCount)
	local self = setmetatable({}, LightningSparks)
	
	--Main (default) properties--
	
		self.Enabled = true --Stops spawning sparks when false
		self.LightningBolt = LightningBolt --Bolt which sparks fly out of
		self.MaxSparkCount = MaxSparkCount or 10 --Max number of sparks visible at any given instance
		self.MinSpeed, self.MaxSpeed = 4, 6 --Min and max PulseSpeeds of sparks
		self.MinDistance, self.MaxDistance = 3, 6 --Governs how far sparks travel away from main bolt
		self.MinPartsPerSpark, self.MaxPartsPerSpark = 8, 10 --Adjustable
	
	--
	
	self.SparksN = 0
	self.SlotTable = {}
	self.RefIndex = #ActiveSparks + 1
	
	ActiveSparks[self.RefIndex] = self
	
	return self
end

function LightningSparks:Destroy()
	ActiveSparks[self.RefIndex] = nil
	
	for i, v in pairs(self.SlotTable) do
		if v.Parts[1].Parent == nil then
			self.SlotTable[i] = nil --Removes reference to prevent memory leak
		end
	end
	
	self = nil
end

function RandomVectorOffset(v, maxAngle) --returns uniformly-distributed random unit vector no more than maxAngle radians away from v
    return (CFrame.lookAt(Vector3.new(), v)*CFrame.Angles(0, 0, rng:NextNumber(0, 2*math.pi))*CFrame.Angles(math.acos(rng:NextNumber(math.cos(maxAngle), 1)), 0, 0)).LookVector
end 

game:GetService("RunService").Heartbeat:Connect(function ()
	
	for _, ThisSpark in pairs(ActiveSparks) do
		
		if ThisSpark.Enabled == true and ThisSpark.SparksN < ThisSpark.MaxSparkCount then
			
			local Bolt = ThisSpark.LightningBolt
			
			if Bolt.Parts[1].Parent == nil then
				ThisSpark:Destroy()
				return 
			end
			
			local BoltParts = Bolt.Parts
			local BoltPartsN = #BoltParts
				
			local opaque_parts = {}
			
			for part_i = 1, #BoltParts do --Fill opaque_parts table
				
				if BoltParts[part_i].Transparency < 0.3 then --minimum opacity required to be able to generate a spark there
					opaque_parts[#opaque_parts + 1] = (part_i - 0.5) / BoltPartsN
				end
				
			end
			
			local minSlot, maxSlot 
			
			if #opaque_parts ~= 0 then
				minSlot, maxSlot = math.ceil(opaque_parts[1]*ThisSpark.MaxSparkCount), math.ceil(opaque_parts[#opaque_parts]*ThisSpark.MaxSparkCount)
			end
			
			for _ = 1, rng:NextInteger(1, ThisSpark.MaxSparkCount - ThisSpark.SparksN) do
				
				if #opaque_parts == 0 then break end
				
				local available_slots = {}
				
				for slot_i = minSlot, maxSlot do --Fill available_slots table
					
					if ThisSpark.SlotTable[slot_i] == nil then --check slot doesn't have existing spark
						available_slots[#available_slots + 1] = slot_i
					end
					
				end
				
				if #available_slots ~= 0 then 
					
					local ChosenSlot = available_slots[rng:NextInteger(1, #available_slots)]
					local localTrng = rng:NextNumber(-0.5, 0.5)
					local ChosenT = (ChosenSlot - 0.5 + localTrng)/ThisSpark.MaxSparkCount
					
					local dist, ChosenPart = 10, 1
					
					for opaque_i = 1, #opaque_parts do
						local testdist = math.abs(opaque_parts[opaque_i] - ChosenT)
						if testdist < dist then
							dist, ChosenPart = testdist, math.floor((opaque_parts[opaque_i]*BoltPartsN + 0.5) + 0.5)
						end
					end
					
					local Part = BoltParts[ChosenPart]
					
					--Make new spark--
					
					local A1, A2 = {}, {}
					A1.WorldPosition = Part.Position + localTrng*Part.CFrame.RightVector*Part.Size.X
					A2.WorldPosition = A1.WorldPosition + RandomVectorOffset(Part.CFrame.RightVector, math.pi/4)*rng:NextNumber(ThisSpark.MinDistance, ThisSpark.MaxDistance)
					A1.WorldAxis = (A2.WorldPosition - A1.WorldPosition).Unit
					A2.WorldAxis = A1.WorldAxis
					local NewSpark = LightningBolt.new(A1, A2, rng:NextInteger(ThisSpark.MinPartsPerSpark, ThisSpark.MaxPartsPerSpark))
					
					--NewSpark.MaxAngleOffset = math.rad(70)
					NewSpark.MinRadius, NewSpark.MaxRadius = 0, 0.8
					NewSpark.AnimationSpeed = 0
					NewSpark.Thickness = Part.Size.Y / 2
					NewSpark.MinThicknessMultiplier, NewSpark.MaxThicknessMultiplier = 1, 1
					NewSpark.PulseLength = 0.5
					NewSpark.PulseSpeed = rng:NextNumber(ThisSpark.MinSpeed, ThisSpark.MaxSpeed)
					NewSpark.FadeLength = 0.25
					local cH, cS, cV = Color3.toHSV(Part.Color)
					NewSpark.Color = Color3.fromHSV(cH, 0.5, cV)
					
					ThisSpark.SlotTable[ChosenSlot] = NewSpark
					
					--
					
				end
				
			end
			
		end
		
		
		
		--Update SparksN--
		
		local slotsInUse = 0
		
		for i, v in pairs(ThisSpark.SlotTable) do
			if v.Parts[1].Parent ~= nil then
				slotsInUse = slotsInUse + 1
			else
				ThisSpark.SlotTable[i] = nil --Removes reference to prevent memory leak
			end
		end
		
		ThisSpark.SparksN = slotsInUse
		
		--
	end
	
end)

return LightningSparks]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX339b2ff198664e31b8e3bfc7e203ac17">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LightningExplosion</string>
					<string name="ScriptGuid">{D459B90C-63DA-45B8-9F8B-0E00E5ECD0D8}</string>
					<ProtectedString name="Source"><![CDATA[--Properties do not update in realtime here
--i.e. You can't change explosion properties at any time beyond the initial function execution
local LightningBolt = require(script.Parent)
local LightningSparks = require(script.Parent.LightningSparks)

local rng_v = Random.new()
local clock = os.clock

function RandomVectorOffsetBetween(v, minAngle, maxAngle) --returns uniformly-distributed random unit vector no more than maxAngle radians away from v and no less than minAngle radians
    return (CFrame.lookAt(Vector3.new(), v)*CFrame.Angles(0, 0, rng_v:NextNumber(0, 2*math.pi))*CFrame.Angles(math.acos(rng_v:NextNumber(math.cos(maxAngle), math.cos(minAngle))), 0, 0)).LookVector
end


local ActiveExplosions = {}


local LightningExplosion = {}
LightningExplosion.__index = LightningExplosion

function LightningExplosion.new(Position, Size, NumBolts, Color, BoltColor, UpVector)
	local self = setmetatable({}, LightningExplosion)
	
	--Main (default) Properties--
	
		self.Size = Size or 1 --Value between 0 and 1 (1 for largest)
		self.NumBolts = NumBolts or 14 --Number of lightning bolts shot out from explosion
		self.Color = Color or ColorSequence.new(Color3.new(1, 0, 0), Color3.new(0, 0, 1)) --Can be a Color3 or ColorSequence
		self.BoltColor = BoltColor or Color3.new(0.3, 0.3, 1) --Can be a Color3 or ColorSequence
		self.UpVector = UpVector or Vector3.new(0, 1, 0) --Can be used to "rotate" the explosion
	
	--
	
	local parent = workspace.CurrentCamera
	
	local part = Instance.new("Part")
	part.Name = "LightningExplosion"
	part.Anchored = true
	part.CanCollide = false
	part.Locked = true
	part.CastShadow = false
	part.Transparency = 1
	part.Size = Vector3.new(0.05, 0.05, 0.05)
	part.CFrame = CFrame.lookAt(Position + Vector3.new(0, 0.5, 0), Position + Vector3.new(0, 0.5, 0) + self.UpVector)*CFrame.lookAt(Vector3.new(), Vector3.new(0, 1, 0)):inverse()
	part.Parent = parent
	
	local attach = Instance.new("Attachment")
	attach.Parent = part
	attach.CFrame = CFrame.new()
	
	local partEmit1 = script.ExplosionBrightspot:Clone()
	local partEmit2 = script.GlareEmitter:Clone()
	local partEmit3 = script.PlasmaEmitter:Clone()
	
	local size = math.clamp(self.Size, 0, 1)
	
	partEmit2.Size = NumberSequence.new(30*size)
	partEmit3.Size = NumberSequence.new(18*size)
	partEmit3.Speed = NumberRange.new(100*size)
	
	partEmit1.Parent = attach
	partEmit2.Parent = attach
	partEmit3.Parent = attach
	
	local color = self.Color
	
	if typeof(color) == "Color3" then
		partEmit2.Color, partEmit3.Color = ColorSequence.new(color), ColorSequence.new(color)
		local cH, cS, cV = Color3.toHSV(color)
		partEmit1.Color = ColorSequence.new(Color3.fromHSV(cH, 0.5, cV))
	else --ColorSequence
		partEmit2.Color, partEmit3.Color = color, color
		local keypoints = color.Keypoints 
		for i = 1, #keypoints do
			local cH, cS, cV = Color3.toHSV(keypoints[i].Value)
			keypoints[i] = ColorSequenceKeypoint.new(keypoints[i].Time, Color3.fromHSV(cH, 0.5, cV))
		end
		partEmit1.Color = ColorSequence.new(keypoints)
	end
	
	partEmit1.Enabled, partEmit2.Enabled, partEmit3.Enabled =  false,false,false
	
	local bolts = {}
	
	for i = 1, self.NumBolts do
		local A1, A2 = {}, {}

		A1.WorldPosition, A1.WorldAxis = attach.WorldPosition, RandomVectorOffsetBetween(self.UpVector, math.rad(65), math.rad(80))
		A2.WorldPosition, A2.WorldAxis = attach.WorldPosition + A1.WorldAxis*rng_v:NextNumber(20, 40)*1.4*size, RandomVectorOffsetBetween(-self.UpVector, math.rad(70), math.rad(110))
		--local curve0, curve1 = rng_v:NextNumber(0, 10)*size, rng_v:NextNumber(0, 10)*size
		local NewBolt = LightningBolt.new(A1, A2, 10)
		NewBolt.AnimationSpeed = 0
		NewBolt.Thickness = 1 --*size
		NewBolt.Color = self.BoltColor
		NewBolt.PulseLength = 0.8
		NewBolt.ColorOffsetSpeed = 20
		NewBolt.Frequency = 2
		NewBolt.MinRadius, NewBolt.MaxRadius = 0, 4*size
		NewBolt.FadeLength = 0.4
		NewBolt.PulseSpeed = 5
		NewBolt.MinThicknessMultiplier, NewBolt.MaxThicknessMultiplier = 0.7, 1

		local NewSparks = LightningSparks.new(NewBolt, 5)
		NewSparks.MinDistance, NewSparks.MaxDistance = 7.5, 10
		
		NewBolt.Velocity = (A2.WorldPosition - A1.WorldPosition).Unit*0.1*size
		--NewBolt.v0, NewBolt.v1 = rng_v:NextNumber(0, 5)*size, rng_v:NextNumber(0, 5)*size
		
		bolts[#bolts + 1] = NewBolt
	end
	
	self.Bolts = bolts
	self.Attachment = attach
	self.Part = part
	self.StartT = clock()
	self.RefIndex = #ActiveExplosions + 1

	ActiveExplosions[self.RefIndex] = self

	return self
end

function LightningExplosion:Destroy()
	ActiveExplosions[self.RefIndex] = nil
	self.Part:Destroy()
	
	for i = 1, #self.Bolts do
		self.Bolts[i] = nil
	end
	
	self = nil
end

game:GetService("RunService").Heartbeat:Connect(function ()
	
	for _, ThisExplosion in pairs(ActiveExplosions) do
		
		local timePassed = clock() - ThisExplosion.StartT
		local attach = ThisExplosion.Attachment
		
		if timePassed < 0.7 then 
			
			if timePassed > 0.2 then
				attach.ExplosionBrightspot.Enabled, attach.GlareEmitter.Enabled, attach.PlasmaEmitter.Enabled = false, false, false
			end
			
			for i = 1, #ThisExplosion.Bolts do 
				
				local currBolt = ThisExplosion.Bolts[i]
				currBolt.Attachment1.WorldPosition = currBolt.Attachment1.WorldPosition + currBolt.Velocity
				--currBolt.CurveSize0, currBolt.CurveSize1 = currBolt.CurveSize0 + currBolt.v0, currBolt.CurveSize1 + currBolt.v1
				
			end
			
		else
			
			ThisExplosion:Destroy()
			
		end
		
	end
	
end)




return LightningExplosion]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ParticleEmitter" referent="RBX0580e27c0466429297a411dd6e3d0b01">
					<Properties>
						<Vector3 name="Acceleration">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">1</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<ColorSequence name="Color">0 0 1 0 0 1 0 1 0 0 </ColorSequence>
						<bool name="DefinesCapabilities">false</bool>
						<float name="Drag">0</float>
						<token name="EmissionDirection">1</token>
						<bool name="Enabled">false</bool>
						<NumberRange name="FlipbookFramerate">1 1 </NumberRange>
						<string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
						<token name="FlipbookLayout">0</token>
						<token name="FlipbookMode">0</token>
						<bool name="FlipbookStartRandom">false</bool>
						<NumberRange name="Lifetime">0.2 0.2 </NumberRange>
						<float name="LightEmission">1</float>
						<float name="LightInfluence">0</float>
						<bool name="LockedToPart">false</bool>
						<string name="Name">ExplosionBrightspot</string>
						<token name="Orientation">0</token>
						<float name="Rate">1000</float>
						<NumberRange name="RotSpeed">0 0 </NumberRange>
						<NumberRange name="Rotation">0 360 </NumberRange>
						<token name="Shape">0</token>
						<token name="ShapeInOut">0</token>
						<float name="ShapePartial">1</float>
						<token name="ShapeStyle">0</token>
						<NumberSequence name="Size">0 10 0 0.116564 0.210526 0.210526 0.342025 9.52632 0.473684 0.478528 0.842105 0.842105 0.673313 9.78947 0 0.792945 1.63158 1.63158 1 10 0 </NumberSequence>
						<int64 name="SourceAssetId">-1</int64>
						<NumberRange name="Speed">0 0 </NumberRange>
						<Vector2 name="SpreadAngle">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=243098098</url></Content>
						<float name="TimeScale">1</float>
						<NumberSequence name="Transparency">0 0 0 1 0 0 </NumberSequence>
						<float name="VelocityInheritance">0</float>
						<bool name="WindAffectsDrag">false</bool>
						<float name="ZOffset">2</float>
					</Properties>
				</Item>
				<Item class="ParticleEmitter" referent="RBX62dde99fb60940a3a1517fd65d1600ee">
					<Properties>
						<Vector3 name="Acceleration">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">1</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<ColorSequence name="Color">0 0 1 0 0 1 0 1 0 0 </ColorSequence>
						<bool name="DefinesCapabilities">false</bool>
						<float name="Drag">0</float>
						<token name="EmissionDirection">1</token>
						<bool name="Enabled">false</bool>
						<NumberRange name="FlipbookFramerate">1 1 </NumberRange>
						<string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
						<token name="FlipbookLayout">0</token>
						<token name="FlipbookMode">0</token>
						<bool name="FlipbookStartRandom">false</bool>
						<NumberRange name="Lifetime">0.1 0.1 </NumberRange>
						<float name="LightEmission">1</float>
						<float name="LightInfluence">0</float>
						<bool name="LockedToPart">false</bool>
						<string name="Name">GlareEmitter</string>
						<token name="Orientation">0</token>
						<float name="Rate">5555</float>
						<NumberRange name="RotSpeed">0 0 </NumberRange>
						<NumberRange name="Rotation">0 360 </NumberRange>
						<token name="Shape">0</token>
						<token name="ShapeInOut">0</token>
						<float name="ShapePartial">1</float>
						<token name="ShapeStyle">0</token>
						<NumberSequence name="Size">0 30 0 1 30 0 </NumberSequence>
						<int64 name="SourceAssetId">-1</int64>
						<NumberRange name="Speed">0 0 </NumberRange>
						<Vector2 name="SpreadAngle">
							<X>360</X>
							<Y>360</Y>
						</Vector2>
						<NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>http://www.roblox.com/asset/?id=243660364</url></Content>
						<float name="TimeScale">1</float>
						<NumberSequence name="Transparency">0 1 0 0.5 0.74375 0 1 1 0 </NumberSequence>
						<float name="VelocityInheritance">0</float>
						<bool name="WindAffectsDrag">false</bool>
						<float name="ZOffset">15</float>
					</Properties>
				</Item>
				<Item class="ParticleEmitter" referent="RBX2a715a85cb184cb3b69bab73f52be983">
					<Properties>
						<Vector3 name="Acceleration">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<float name="Brightness">1</float>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<ColorSequence name="Color">0 0 1 0 0 1 0 1 0 0 </ColorSequence>
						<bool name="DefinesCapabilities">false</bool>
						<float name="Drag">0</float>
						<token name="EmissionDirection">1</token>
						<bool name="Enabled">false</bool>
						<NumberRange name="FlipbookFramerate">1 1 </NumberRange>
						<string name="FlipbookIncompatible">Particle texture must be 1024 by 1024 to use flipbooks.</string>
						<token name="FlipbookLayout">0</token>
						<token name="FlipbookMode">0</token>
						<bool name="FlipbookStartRandom">false</bool>
						<NumberRange name="Lifetime">0.1 0.2 </NumberRange>
						<float name="LightEmission">1</float>
						<float name="LightInfluence">1</float>
						<bool name="LockedToPart">false</bool>
						<string name="Name">PlasmaEmitter</string>
						<token name="Orientation">0</token>
						<float name="Rate">10000</float>
						<NumberRange name="RotSpeed">0 0 </NumberRange>
						<NumberRange name="Rotation">0 360 </NumberRange>
						<token name="Shape">0</token>
						<token name="ShapeInOut">0</token>
						<float name="ShapePartial">1</float>
						<token name="ShapeStyle">0</token>
						<NumberSequence name="Size">0 18 0 1 18 0 </NumberSequence>
						<int64 name="SourceAssetId">-1</int64>
						<NumberRange name="Speed">100 100 </NumberRange>
						<Vector2 name="SpreadAngle">
							<X>90</X>
							<Y>90</Y>
						</Vector2>
						<NumberSequence name="Squash">0 0 0 1 0 0 </NumberSequence>
						<BinaryString name="Tags"></BinaryString>
						<Content name="Texture"><url>rbxasset://textures/particles/sparkles_main.dds</url></Content>
						<float name="TimeScale">1</float>
						<NumberSequence name="Transparency">0 0 0 1 0.3 0 </NumberSequence>
						<float name="VelocityInheritance">0</float>
						<bool name="WindAffectsDrag">false</bool>
						<float name="ZOffset">5</float>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXea3d6f9d58084a979cafbb414249e35e">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">PartCache</string>
				<string name="ScriptGuid">{94616E29-E818-4D76-A262-8AE83A7361BC}</string>
				<ProtectedString name="Source"><![CDATA[--!strict

--[[
	PartCache V4.0 by Xan the Dragon // Eti the Spirit -- RBX 18406183
	Update V4.0 has added Luau Strong Type Enforcement.
	
	Creating parts is laggy, especially if they are supposed to be there for a split second and/or need to be made frequently.
	This module aims to resolve this lag by pre-creating the parts and CFraming them to a location far away and out of sight.
	When necessary, the user can get one of these parts and CFrame it to where they need, then return it to the cache when they are done with it.
	
	According to someone instrumental in Roblox's backend technology, zeuxcg (https://devforum.roblox.com/u/zeuxcg/summary)...
		>> CFrame is currently the only "fast" property in that you can change it every frame without really heavy code kicking in. Everything else is expensive.
		
		- https://devforum.roblox.com/t/event-that-fires-when-rendering-finishes/32954/19
	
	This alone should ensure the speed granted by this module.
		
		
	HOW TO USE THIS MODULE:
	
	Look at the bottom of my thread for an API! https://devforum.roblox.com/t/partcache-for-all-your-quick-part-creation-needs/246641
--]]
local table = require(script:WaitForChild("Table"))

-----------------------------------------------------------
-------------------- MODULE DEFINITION --------------------
-----------------------------------------------------------

local PartCacheStatic = {}
PartCacheStatic.__index = PartCacheStatic
PartCacheStatic.__type = "PartCache" -- For compatibility with TypeMarshaller

-- TYPE DEFINITION: Part Cache Instance
export type PartCache = {
	Open: {[number]: BasePart},
	InUse: {[number]: BasePart},
	CurrentCacheParent: Instance,
	Template: BasePart,
	ExpansionSize: number
}

-----------------------------------------------------------
----------------------- STATIC DATA -----------------------
-----------------------------------------------------------					

-- A CFrame that's really far away. Ideally. You are free to change this as needed.
local CF_REALLY_FAR_AWAY = CFrame.new(0, 10e8, 0)

-- Format params: methodName, ctorName
local ERR_NOT_INSTANCE = "Cannot statically invoke method '%s' - It is an instance method. Call it on an instance of this class created via %s"

-- Format params: paramName, expectedType, actualType
local ERR_INVALID_TYPE = "Invalid type for parameter '%s' (Expected %s, got %s)"

-----------------------------------------------------------
------------------------ UTILITIES ------------------------
-----------------------------------------------------------

--Similar to assert but warns instead of errors.
local function assertwarn(requirement: boolean, messageIfNotMet: string)
	if requirement == false then
		warn(messageIfNotMet)
	end
end

--Dupes a part from the template.
local function MakeFromTemplate(template: BasePart, currentCacheParent: Instance): BasePart
	local part: BasePart = template:Clone()
	-- ^ Ignore W000 type mismatch between Instance and BasePart. False alert.
	
	part.CFrame = CF_REALLY_FAR_AWAY
	part.Anchored = true
	part.TopSurface = Enum.SurfaceType.Smooth
	part.BottomSurface = Enum.SurfaceType.Smooth
	
	--game:GetService("PhysicsService"):SetPartCollisionGroup(part, "Debris")
	part.CanCollide = false
	
	part.Parent = currentCacheParent
	return part
end

function PartCacheStatic.new(template: BasePart, numPrecreatedParts: number?, currentCacheParent: Instance?): PartCache
	local newNumPrecreatedParts: number = numPrecreatedParts or 5
	local newCurrentCacheParent: Instance = currentCacheParent or workspace
	
	--PrecreatedParts value.
	--Same thing. Ensure it's a number, ensure it's not negative, warn if it's really huge or 0.
	assert(numPrecreatedParts > 0, "PrecreatedParts can not be negative!")
	assertwarn(numPrecreatedParts ~= 0, "PrecreatedParts is 0! This may have adverse effects when initially using the cache.")
	assertwarn(template.Archivable, "The template's Archivable property has been set to false, which prevents it from being cloned. It will temporarily be set to true.")
	
	local oldArchivable = template.Archivable
	template.Archivable = true
	local newTemplate: BasePart = template:Clone()
	-- ^ Ignore W000 type mismatch between Instance and BasePart. False alert.
	
	template.Archivable = oldArchivable
	template = newTemplate
	
	local object: PartCache = {
		Open = {},
		InUse = {},
		CurrentCacheParent = newCurrentCacheParent,
		Template = template,
		ExpansionSize = 100
	}
	setmetatable(object, PartCacheStatic)
	
	-- Below: Ignore type mismatch nil | number and the nil | Instance mismatch on the table.insert line.
	for _ = 1, newNumPrecreatedParts do
		table.insert(object.Open, MakeFromTemplate(template, object.CurrentCacheParent))
	end
	object.Template.Parent = nil
	
	return object
	-- ^ Ignore mismatch here too
end

-- Gets a part from the cache, or creates one if no more are available.
function PartCacheStatic:GetPart(): BasePart
	assert(getmetatable(self) == PartCacheStatic, ERR_NOT_INSTANCE:format("GetPart", "PartCache.new"))
	
	if #self.Open == 0 then
		warn("No parts available in the cache! Creating [" .. self.ExpansionSize .. "] new part instance(s) - this amount can be edited by changing the ExpansionSize property of the PartCache instance... (This cache now contains a grand total of " .. tostring(#self.Open + #self.InUse + self.ExpansionSize) .. " parts.)")
		for i = 1, self.ExpansionSize, 1 do
			table.insert(self.Open, MakeFromTemplate(self.Template, self.CurrentCacheParent))
		end
	end
	local part = self.Open[#self.Open]
	self.Open[#self.Open] = nil
	table.insert(self.InUse, part)
	return part
end

-- Returns a part to the cache.
function PartCacheStatic:ReturnPart(part: BasePart)
	assert(getmetatable(self) == PartCacheStatic, ERR_NOT_INSTANCE:format("ReturnPart", "PartCache.new"))
	
	local index = table.indexOf(self.InUse, part)
	if index ~= nil then
		table.remove(self.InUse, index)
		table.insert(self.Open, part)
		part.CFrame = CF_REALLY_FAR_AWAY
		part.Anchored = true
	else
		error("Attempted to return part \"" .. part.Name .. "\" (" .. part:GetFullName() .. ") to the cache, but it's not in-use! Did you call this on the wrong part?")
	end
end

-- Sets the parent of all cached parts.
function PartCacheStatic:SetCacheParent(newParent: Instance)
	assert(getmetatable(self) == PartCacheStatic, ERR_NOT_INSTANCE:format("SetCacheParent", "PartCache.new"))
	assert(newParent:IsDescendantOf(workspace) or newParent == workspace, "Cache parent is not a descendant of Workspace! Parts should be kept where they will remain in the visible world.")
	
	self.CurrentCacheParent = newParent
	for i = 1, #self.Open do
		self.Open[i].Parent = newParent
	end
	for i = 1, #self.InUse do
		self.InUse[i].Parent = newParent
	end
end

-- Adds numParts more parts to the cache.
function PartCacheStatic:Expand(numParts: number): ()
	assert(getmetatable(self) == PartCacheStatic, ERR_NOT_INSTANCE:format("Expand", "PartCache.new"))
	if numParts == nil then
		numParts = self.ExpansionSize
	end
	
	for i = 1, numParts do
		table.insert(self.Open, MakeFromTemplate(self.Template, self.CurrentCacheParent))
	end
end

-- Destroys this cache entirely. Use this when you don't need this cache object anymore.
function PartCacheStatic:Dispose()
	assert(getmetatable(self) == PartCacheStatic, ERR_NOT_INSTANCE:format("Dispose", "PartCache.new"))
	for i = 1, #self.Open do
		self.Open[i]:Destroy()
	end
	for i = 1, #self.InUse do
		self.InUse[i]:Destroy()
	end
	self.Template:Destroy()
	self.Open = {}
	self.InUse = {}
	self.CurrentCacheParent = nil
	
	self.GetPart = nil
	self.ReturnPart = nil
	self.SetCacheParent = nil
	self.Expand = nil
	self.Dispose = nil
end

return PartCacheStatic]]></ProtectedString>
				<int64 name="SourceAssetId">2904807375</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXc366920a96b7402a9019ae31c3657722">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Table</string>
					<string name="ScriptGuid">{A1341DDB-5857-47A4-A4A5-33EB38BAABA6}</string>
					<ProtectedString name="Source"><![CDATA[--!nocheck
--^ It works. Just get the type checker to shut up so that people don't send bug reports :P

--[[
	To use: local table = require(this)
	(Yes, override table.)

	Written by EtiTheSpirit. Adds custom functions to the `table` value provided by roblox (in normal cases, this would simply modify `table`, but Roblox has disabled that so we need to use a proxy)
	
	CHANGES:
		3 December 2019 @ 11:07 PM CST:
			+ Added table.join
			
			
		21 November 2019 @ 6:50 PM CST:
			+ Added new method bodies to skip/take using Luau's new methods. Drastic speed increases achieved. CREDITS: Halalaluyafail3 (See https://devforum.roblox.com/t/sandboxed-table-system-add-custom-methods-to-table/391177/12?u=etithespirit)
			+ Added table.retrieve as proposed by ^ under the name "table.range" as this name relays what it does a bit better, I think.
			+ Added table.skipAndTake as an alias method.

--]]

local RNG = Random.new()
local Table = {}

for index, value in pairs(table) do
	Table[index] = value
end

-- Returns true if the table contains the specified value.
Table.contains = function (tbl, value)
	return Table.indexOf(tbl, value) ~= nil -- This is kind of cheatsy but it promises the best performance.
end

-- A combo of table.find and table.keyOf -- This first attempts to find the ordinal index of your value, then attempts to find the lookup key if it can't find an ordinal index.
Table.indexOf = function (tbl, value)
	local fromFind = table.find(tbl, value)
	if fromFind then return fromFind end
	
	return Table.keyOf(tbl, value)
end

-- Returns the key of the specified value, or nil if it could not be found. Unlike IndexOf, this searches every key in the table, not just ordinal indices (arrays)
-- This is inherently slower due to how lookups work, so if your table is structured like an array, use table.find
Table.keyOf = function (tbl, value)
	for index, obj in pairs(tbl) do
		if obj == value then
			return index
		end
	end
	return nil
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Skips *n* objects in the table, and returns a new table that contains indices (n + 1) to (end of table)
Table.skip = function (tbl, n)
	return table.move(tbl, n+1, #tbl, 1, table.create(#tbl-n))
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Takes *n* objects from a table and returns a new table only containing those objects.
Table.take = function (tbl, n)
	return table.move(tbl, 1, n, 1, table.create(n))
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Takes the range of entries in this table in the range [start, finish] and returns that range as a table.
Table.range = function (tbl, start, finish)
	return table.move(tbl, start, finish, 1, table.create(finish - start + 1))
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). An alias that calls table.skip(skip), and then takes [take] entries from the resulting table.
Table.skipAndTake = function (tbl, skip, take)
	return table.move(tbl, skip + 1, skip + take, 1, table.create(take))
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Selects a random object out of tbl
Table.random = function (tbl)
	return tbl[RNG:NextInteger(1, #tbl)]
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Merges tbl0 and tbl1 together.
Table.join = function (tbl0, tbl1)
	local nt = table.create(#tbl0 + #tbl1)
	local t2 = table.move(tbl0, 1, #tbl0, 1, nt)
	return table.move(tbl1, 1, #tbl1, #tbl0 + 1, nt)
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Removes the specified object from this array.
Table.removeObject = function (tbl, obj)
	local index = Table.indexOf(tbl, obj)
	if index then
		table.remove(tbl, index)
	end
end

-- ONLY SUPPORTS ORDINAL TABLES (ARRAYS). Allocates a new table by getting the length of the current table and increasing its capacity by the specified amount.
-- This uses Roblox's table.create function.
Table.expand = function (tbl, byAmount)
	if (byAmount < 0) then
		error("Cannot expand a table by a negative amount of objects.")
	end
	
	local newtbl = table.create(#tbl + byAmount)
	for i = 1, #tbl do
		newtbl[i] = tbl[i]
	end
	return newtbl
end

return Table]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX1d93b6338d6041f7ae4e974ec290b298">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">CameraShaker</string>
				<string name="ScriptGuid">{751035E5-C4B4-414A-AA4C-4958A077C4AD}</string>
				<ProtectedString name="Source"><![CDATA[-- Camera Shaker
-- Stephen Leitnick
-- February 26, 2018

--[[
	
	CameraShaker.CameraShakeInstance
	
	cameraShaker = CameraShaker.new(renderPriority, callbackFunction)
	
	CameraShaker:Start()
	CameraShaker:Stop()
	CameraShaker:StopSustained([fadeOutTime])
	CameraShaker:Shake(shakeInstance)
	CameraShaker:ShakeSustain(shakeInstance)
	CameraShaker:ShakeOnce(magnitude, roughness [, fadeInTime, fadeOutTime, posInfluence, rotInfluence])
	CameraShaker:StartShake(magnitude, roughness [, fadeInTime, posInfluence, rotInfluence])
	
	
	
	EXAMPLE:
	
		local camShake = CameraShaker.new(Enum.RenderPriority.Camera.Value, function(shakeCFrame)
			camera.CFrame = playerCFrame * shakeCFrame
		end)
		
		camShake:Start()
		
		-- Explosion shake:
		camShake:Shake(CameraShaker.Presets.Explosion)
		
		wait(1)
		
		-- Custom shake:
		camShake:ShakeOnce(3, 1, 0.2, 1.5)

		-- Sustained shake:
		camShake:ShakeSustain(CameraShaker.Presets.Earthquake)

		-- Stop all sustained shakes:
		camShake:StopSustained(1) -- Argument is the fadeout time (defaults to the same as fadein time if not supplied)

		-- Stop only one sustained shake:
		shakeInstance = camShake:ShakeSustain(CameraShaker.Presets.Earthquake)
		wait(2)
		shakeInstance:StartFadeOut(1) -- Argument is the fadeout time
	
	
	NOTE:
	
		This was based entirely on the EZ Camera Shake asset for Unity3D. I was given written
		permission by the developer, Road Turtle Games, to port this to Roblox.
		
		Original asset link: https://assetstore.unity.com/packages/tools/camera/ez-camera-shake-33148

		GitHub repository: https://github.com/Sleitnick/RbxCameraShaker
	
	
--]]



local CameraShaker = {}
CameraShaker.__index = CameraShaker

local profileBegin = debug.profilebegin
local profileEnd = debug.profileend
local profileTag = "CameraShakerUpdate"

local V3 = Vector3.new
local CF = CFrame.new
local ANG = CFrame.Angles
local RAD = math.rad
local v3Zero = V3()

local CameraShakeInstance = require(script.CameraShakeInstance)
local CameraShakeState = CameraShakeInstance.CameraShakeState

local defaultPosInfluence = V3(0.15, 0.15, 0.15)
local defaultRotInfluence = V3(1, 1, 1)


CameraShaker.CameraShakeInstance = CameraShakeInstance
CameraShaker.Presets = require(script.CameraShakePresets)


function CameraShaker.new(renderPriority, callback)
	
	assert(type(renderPriority) == "number", "RenderPriority must be a number (e.g.: Enum.RenderPriority.Camera.Value)")
	assert(type(callback) == "function", "Callback must be a function")
	
	local self = setmetatable({
		_running = false;
		_renderName = "CameraShaker";
		_renderPriority = renderPriority;
		_posAddShake = v3Zero;
		_rotAddShake = v3Zero;
		_camShakeInstances = {};
		_removeInstances = {};
		_callback = callback;
	}, CameraShaker)
	
	return self
	
end


function CameraShaker:Start()
	if (self._running) then return end
	self._running = true
	local callback = self._callback
	game:GetService("RunService"):BindToRenderStep(self._renderName, self._renderPriority, function(dt)
		profileBegin(profileTag)
		local cf = self:Update(dt)
		profileEnd()
		callback(cf)
	end)
end


function CameraShaker:Stop()
	if (not self._running) then return end
	game:GetService("RunService"):UnbindFromRenderStep(self._renderName)
	self._running = false
end


function CameraShaker:StopSustained(duration)
	for _,c in pairs(self._camShakeInstances) do
		if (c.fadeOutDuration == 0) then
			c:StartFadeOut(duration or c.fadeInDuration)
		end
	end
end


function CameraShaker:Update(dt)
	
	local posAddShake = v3Zero
	local rotAddShake = v3Zero
	
	local instances = self._camShakeInstances
	
	-- Update all instances:
	for i = 1,#instances do
		
		local c = instances[i]
		local state = c:GetState()
		
		if (state == CameraShakeState.Inactive and c.DeleteOnInactive) then
			self._removeInstances[#self._removeInstances + 1] = i
		elseif (state ~= CameraShakeState.Inactive) then
			local shake = c:UpdateShake(dt)
			posAddShake = posAddShake + (shake * c.PositionInfluence)
			rotAddShake = rotAddShake + (shake * c.RotationInfluence)
		end
		
	end
	
	-- Remove dead instances:
	for i = #self._removeInstances,1,-1 do
		local instIndex = self._removeInstances[i]
		table.remove(instances, instIndex)
		self._removeInstances[i] = nil
	end
	
	return CF(posAddShake) *
			ANG(0, RAD(rotAddShake.Y), 0) *
			ANG(RAD(rotAddShake.X), 0, RAD(rotAddShake.Z))
	
end


function CameraShaker:Shake(shakeInstance)
	assert(type(shakeInstance) == "table" and shakeInstance._camShakeInstance, "ShakeInstance must be of type CameraShakeInstance")
	self._camShakeInstances[#self._camShakeInstances + 1] = shakeInstance
	return shakeInstance
end


function CameraShaker:ShakeSustain(shakeInstance)
	assert(type(shakeInstance) == "table" and shakeInstance._camShakeInstance, "ShakeInstance must be of type CameraShakeInstance")
	self._camShakeInstances[#self._camShakeInstances + 1] = shakeInstance
	shakeInstance:StartFadeIn(shakeInstance.fadeInDuration)
	return shakeInstance
end


function CameraShaker:ShakeOnce(magnitude, roughness, fadeInTime, fadeOutTime, posInfluence, rotInfluence)
	local shakeInstance = CameraShakeInstance.new(magnitude, roughness, fadeInTime, fadeOutTime)
	shakeInstance.PositionInfluence = (typeof(posInfluence) == "Vector3" and posInfluence or defaultPosInfluence)
	shakeInstance.RotationInfluence = (typeof(rotInfluence) == "Vector3" and rotInfluence or defaultRotInfluence)
	self._camShakeInstances[#self._camShakeInstances + 1] = shakeInstance
	return shakeInstance
end


function CameraShaker:StartShake(magnitude, roughness, fadeInTime, posInfluence, rotInfluence)
	local shakeInstance = CameraShakeInstance.new(magnitude, roughness, fadeInTime)
	shakeInstance.PositionInfluence = (typeof(posInfluence) == "Vector3" and posInfluence or defaultPosInfluence)
	shakeInstance.RotationInfluence = (typeof(rotInfluence) == "Vector3" and rotInfluence or defaultRotInfluence)
	shakeInstance:StartFadeIn(fadeInTime)
	self._camShakeInstances[#self._camShakeInstances + 1] = shakeInstance
	return shakeInstance
end


return CameraShaker]]></ProtectedString>
				<int64 name="SourceAssetId">1461025953</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXdccb356937344775827b5b4e16cd6f58">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">CameraShakeInstance</string>
					<string name="ScriptGuid">{EB46E2F5-0641-41DF-8DFD-476677323A6C}</string>
					<ProtectedString name="Source"><![CDATA[-- Camera Shake Instance
-- Stephen Leitnick
-- February 26, 2018

--[[
	
	cameraShakeInstance = CameraShakeInstance.new(magnitude, roughness, fadeInTime, fadeOutTime)
	
--]]



local CameraShakeInstance = {}
CameraShakeInstance.__index = CameraShakeInstance

local V3 = Vector3.new
local NOISE = math.noise


CameraShakeInstance.CameraShakeState = {
	FadingIn = 0;
	FadingOut = 1;
	Sustained = 2;
	Inactive = 3;
}


function CameraShakeInstance.new(magnitude, roughness, fadeInTime, fadeOutTime)
	
	if (fadeInTime == nil) then fadeInTime = 0 end
	if (fadeOutTime == nil) then fadeOutTime = 0 end
	
	assert(type(magnitude) == "number", "Magnitude must be a number")
	assert(type(roughness) == "number", "Roughness must be a number")
	assert(type(fadeInTime) == "number", "FadeInTime must be a number")
	assert(type(fadeOutTime) == "number", "FadeOutTime must be a number")
	
	local self = setmetatable({
		Magnitude = magnitude;
		Roughness = roughness;
		PositionInfluence = V3();
		RotationInfluence = V3();
		DeleteOnInactive = true;
		roughMod = 1;
		magnMod = 1;
		fadeOutDuration = fadeOutTime;
		fadeInDuration = fadeInTime;
		sustain = (fadeInTime > 0);
		currentFadeTime = (fadeInTime > 0 and 0 or 1);
		tick = Random.new():NextNumber(-100, 100);
		_camShakeInstance = true;
	}, CameraShakeInstance)
	
	return self
	
end


function CameraShakeInstance:UpdateShake(dt)
	
	local _tick = self.tick
	local currentFadeTime = self.currentFadeTime
	
	local offset = V3(
		NOISE(_tick, 0) * 0.5,
		NOISE(0, _tick) * 0.5,
		NOISE(_tick, _tick) * 0.5
	)
	
	if (self.fadeInDuration > 0 and self.sustain) then
		if (currentFadeTime < 1) then
			currentFadeTime = currentFadeTime + (dt / self.fadeInDuration)
		elseif (self.fadeOutDuration > 0) then
			self.sustain = false
		end
	end
	
	if (not self.sustain) then
		currentFadeTime = currentFadeTime - (dt / self.fadeOutDuration)
	end
	
	if (self.sustain) then
		self.tick = _tick + (dt * self.Roughness * self.roughMod)
	else
		self.tick = _tick + (dt * self.Roughness * self.roughMod * currentFadeTime)
	end
	
	self.currentFadeTime = currentFadeTime
	
	return offset * self.Magnitude * self.magnMod * currentFadeTime
	
end


function CameraShakeInstance:StartFadeOut(fadeOutTime)
	if (fadeOutTime == 0) then
		self.currentFadeTime = 0
	end
	self.fadeOutDuration = fadeOutTime
	self.fadeInDuration = 0
	self.sustain = false
end


function CameraShakeInstance:StartFadeIn(fadeInTime)
	if (fadeInTime == 0) then
		self.currentFadeTime = 1
	end
	self.fadeInDuration = fadeInTime or self.fadeInDuration
	self.fadeOutDuration = 0
	self.sustain = true
end


function CameraShakeInstance:GetScaleRoughness()
	return self.roughMod
end


function CameraShakeInstance:SetScaleRoughness(v)
	self.roughMod = v
end


function CameraShakeInstance:GetScaleMagnitude()
	return self.magnMod
end


function CameraShakeInstance:SetScaleMagnitude(v)
	self.magnMod = v
end


function CameraShakeInstance:GetNormalizedFadeTime()
	return self.currentFadeTime
end


function CameraShakeInstance:IsShaking()
	return (self.currentFadeTime > 0 or self.sustain)
end


function CameraShakeInstance:IsFadingOut()
	return ((not self.sustain) and self.currentFadeTime > 0)
end


function CameraShakeInstance:IsFadingIn()
	return (self.currentFadeTime < 1 and self.sustain and self.fadeInDuration > 0)
end


function CameraShakeInstance:GetState()
	if (self:IsFadingIn()) then
		return CameraShakeInstance.CameraShakeState.FadingIn
	elseif (self:IsFadingOut()) then
		return CameraShakeInstance.CameraShakeState.FadingOut
	elseif (self:IsShaking()) then
		return CameraShakeInstance.CameraShakeState.Sustained
	else
		return CameraShakeInstance.CameraShakeState.Inactive
	end
end


return CameraShakeInstance]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXc9b1b76f107f4fc58a821ffd732b348b">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">CameraShakePresets</string>
					<string name="ScriptGuid">{B86B7289-C47A-4783-954D-EF1403E67BD7}</string>
					<ProtectedString name="Source"><![CDATA[-- Camera Shake Presets
-- Stephen Leitnick
-- February 26, 2018

--[[
	
	CameraShakePresets.Bump
	CameraShakePresets.Explosion
	CameraShakePresets.Earthquake
	CameraShakePresets.BadTrip
	CameraShakePresets.HandheldCamera
	CameraShakePresets.Vibration
	CameraShakePresets.RoughDriving
	
--]]



local CameraShakeInstance = require(script.Parent.CameraShakeInstance)

local CameraShakePresets = {
	
	
	-- A high-magnitude, short, yet smooth shake.
	-- Should happen once.
	Bump = function()
		local c = CameraShakeInstance.new(2.5, 4, 0.1, 0.75)
		c.PositionInfluence = Vector3.new(0.15, 0.15, 0.15)
		c.RotationInfluence = Vector3.new(1, 1, 1)
		return c
	end;
	
	
	-- An intense and rough shake.
	-- Should happen once.
	Explosion = function()
		local c = CameraShakeInstance.new(2.5, 6, 0, 0.9)
		c.PositionInfluence = Vector3.new(0.25, 0.25, 0.25)
		c.RotationInfluence = Vector3.new(3.5, 1, 1)
		return c
	end;
	
	Dash = function()
		local c = CameraShakeInstance.new(2, 5, 0, 0.85)
		c.PositionInfluence = Vector3.new(0.15, 0.15, 0.15)
		c.RotationInfluence = Vector3.new(2, 1, 1)
		return c
	end;
	
	IceZ = function()
		local c = CameraShakeInstance.new(2.5, 6, 0, 0.9)
		c.PositionInfluence = Vector3.new(0.3, 0.3, 0.3)
		c.RotationInfluence = Vector3.new(3.5, 1, 1)
		return c
	end;
	
	LightningStrike = function()
		local c = CameraShakeInstance.new(2.5, 6, 0, 0.9)
		c.PositionInfluence = Vector3.new(0.25, 0.25, 0.25)
		c.RotationInfluence = Vector3.new(3.5, 1, 1)
		return c
	end;
	
	Hit = function()
		local c = CameraShakeInstance.new(1, 3, 0.1, 1)
		c.PositionInfluence = Vector3.new(0.1, 0.1, 0.1)
		c.RotationInfluence = Vector3.new(2, 1.05, 1.05)
		return c
	end;
	
	Twerk = function()
		local c = CameraShakeInstance.new(15, 20, 0.1, 10)
		c.PositionInfluence = Vector3.new(0.5, 0.5, 0.5)
		c.RotationInfluence = Vector3.new(4, 4, 4)
		return c
	end;
	
	-- A continuous, rough shake
	-- Sustained.
	Earthquake = function()
		local c = CameraShakeInstance.new(0.6, 3.5, 2, 10)
		c.PositionInfluence = Vector3.new(0.25, 0.25, 0.25)
		c.RotationInfluence = Vector3.new(1, 1, 4)
		return c
	end;
	
	
	-- A bizarre shake with a very high magnitude and low roughness.
	-- Sustained.
	BadTrip = function()
		local c = CameraShakeInstance.new(10, 0.15, 5, 10)
		c.PositionInfluence = Vector3.new(0, 0, 0.15)
		c.RotationInfluence = Vector3.new(2, 1, 4)
		return c
	end;
	
	
	-- A subtle, slow shake.
	-- Sustained.
	HandheldCamera = function()
		local c = CameraShakeInstance.new(1, 0.25, 5, 10)
		c.PositionInfluence = Vector3.new(0, 0, 0)
		c.RotationInfluence = Vector3.new(1, 0.5, 0.5)
		return c
	end;
	
	
	-- A very rough, yet low magnitude shake.
	-- Sustained.
	Vibration = function()
		local c = CameraShakeInstance.new(0.4, 20, 2, 2)
		c.PositionInfluence = Vector3.new(0, 0.15, 0)
		c.RotationInfluence = Vector3.new(1.25, 0, 4)
		return c
	end;
	
	
	-- A slightly rough, medium magnitude shake.
	-- Sustained.
	RoughDriving = function()
		local c = CameraShakeInstance.new(1, 2, 1, 1)
		c.PositionInfluence = Vector3.new(0, 0, 0)
		c.RotationInfluence = Vector3.new(1, 1, 1)
		return c
	end;
	
	
}


return setmetatable({}, {
	__index = function(t, i)
		local f = CameraShakePresets[i]
		if (type(f) == "function") then
			return f()
		end
		error("No preset found with index \"" .. i .. "\"")
	end;
})]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX07ee105fb5c7476ea98f414074055d61">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">BezierCurve</string>
				<string name="ScriptGuid">{3E7D2EF7-6295-4C2B-BE66-99B1DA73CED7}</string>
				<ProtectedString name="Source"><![CDATA[--[[
Made By Aidaren / ç©¶æžæŒ¨æ‰“äºº
Credit: è€èƒ¡å®¶çš„æ‹–éž‹

Version - 1.2.1

ContactMe:
WeChat: AidarenADR
Discord: Aidaren#5009
--]]

local Debris = game:GetService("Debris")

--<æ¨¡å—>--
local BezierCurve = {}

function BezierCurve.Lerp(Start , End , Time)

	if typeof(Start) ~= "Vector3" then
		Start = Start.Position
	end

	if typeof(End) ~= "Vector3" then
		End = End.Position
	end

	return Start + (End - Start) * Time

end

function BezierCurve.GetFrameByDistance(Start , End , Multiply)

	if typeof(Start) ~= "Vector3" then
		Start = Start.Position
	end

	if typeof(End) ~= "Vector3" then
		End = End.Position
	end

	if not Multiply then
		Multiply = 1
	else
		Multiply = 1 + Multiply
	end

	local Distance = (Start - End).Magnitude--æ—‹è½¬åŠå¾„
	local Frame = math.round(Distance * 2 / Multiply)

	return Frame

end

function BezierCurve.GetMotionTime(Frame , FPS)
	local Time = 0

	Time += task.wait(1 / FPS) * Frame

	return Time
end

function BezierCurve.GetMiddlePosition(StartPosition , TargetPosition , Angle , Offset)

	if typeof(StartPosition) ~= "Vector3" then
		StartPosition = StartPosition.Position
	end

	if typeof(TargetPosition) ~= "Vector3" then
		TargetPosition = TargetPosition.Position
	end

	if not Angle then
		Angle = 0
	end

	if not Offset then
		Offset = 1
	else
		Offset = 1 + Offset
	end

	local HalfVector3 = (StartPosition - TargetPosition) * 0.5 --èµ·å§‹ä¸Žç›®æ ‡ä¹‹é—´ä¸€åŠé•¿åº¦çš„å‘é‡
	local MiddlePosition = StartPosition - HalfVector3 --ä¸­é—´ä½ç½®ç‚¹
	local RotateCFrame = CFrame.new(MiddlePosition,TargetPosition) --ä»Žèµ·å§‹ä¸Žç›®æ ‡ä¹‹é—´çš„ä¸­å¿ƒç‚¹æŒ‡å‘ç›®æ ‡çš„å‘é‡,ç”¨æ­¤å‘é‡è¿›è¡Œæ—‹è½¬

	RotateCFrame = RotateCFrame * CFrame.Angles(0,0,math.rad(Angle)) --æ ¹æ®è§’åº¦æ—‹è½¬æ­¤å‘é‡
	local Radius = HalfVector3.Magnitude * Offset--æ—‹è½¬åŠå¾„

	local ResultPosition = MiddlePosition + RotateCFrame.UpVector * Radius --ä¸­é—´ä½ç½® + æ—‹è½¬åŽçš„ä¸Šæœå‘ * åŠå¾„

	return ResultPosition

end

function BezierCurve.Get2MiddlePosition(StartPosition , TargetPosition , Angle1 , Offset1 , Angle2 , Offset2)

	if typeof(StartPosition) ~= "Vector3" then
		StartPosition = StartPosition.Position
	end

	if typeof(TargetPosition) ~= "Vector3" then
		TargetPosition = TargetPosition.Position
	end

	if not Angle1 then
		Angle1 = 0
	end

	if not Angle2 then
		Angle2 = 0
	end

	if not Offset1 then
		Offset1 = 1
	else
		Offset1 = 1 + Offset1
	end

	if not Offset2 then
		Offset2 = 1
	else
		Offset2 = 1 + Offset2
	end

	local function GetResultPosition(StartPosition , TargetPosition , Angle , Offset , Length)

		local HalfVector3 = (StartPosition - TargetPosition) * Length --èµ·å§‹ä¸Žç›®æ ‡ä¹‹é—´ä¸‰åˆ†ä¹‹ä¸€é•¿åº¦çš„å‘é‡
		local MiddlePosition = StartPosition - HalfVector3 --ä¸­é—´ä½ç½®ç‚¹
		local RotateCFrame = CFrame.new(MiddlePosition,TargetPosition) --ä»Žèµ·å§‹ä¸Žç›®æ ‡ä¹‹é—´çš„ä¸­å¿ƒç‚¹æŒ‡å‘ç›®æ ‡çš„å‘é‡,ç”¨æ­¤å‘é‡è¿›è¡Œæ—‹è½¬

		RotateCFrame = RotateCFrame * CFrame.Angles(0,0,math.rad(Angle)) --æ ¹æ®è§’åº¦æ—‹è½¬æ­¤å‘é‡
		local Radius = HalfVector3.Magnitude * Offset--æ—‹è½¬åŠå¾„

		local ResultPosition = MiddlePosition + RotateCFrame.UpVector * Radius --ä¸­é—´ä½ç½® + æ—‹è½¬åŽçš„ä¸Šæœå‘ * åŠå¾„
		return ResultPosition
	end

	local ResultPosition1 = GetResultPosition(StartPosition , TargetPosition , Angle1 , Offset1 , 1/3)
	local ResultPosition2 = GetResultPosition(StartPosition , TargetPosition , Angle2 , Offset2 , 1/3 * 2)

	return ResultPosition1 , ResultPosition2

end

------------------------------|åˆ†å‰²çº¿|------------------------------

function BezierCurve.LinearBezierCurves(Frame , FPS , Target , Position1 , Position2)

	if typeof(Position1) ~= "Vector3" then
		Position1 = Position1.Position
	end

	if typeof(Position2) ~= "Vector3" then
		Position2 = Position2.Position
	end

	for Index = 0 , Frame , 1 do

		local Time = Index / Frame

		Target.Position = BezierCurve.Lerp(Position1 , Position2 , Time)

		task.wait(1 / FPS)
	end

end

function BezierCurve.QuadraticBezierCurves(Frame , FPS , Target , Position1 , Position2 , Position3)

	if typeof(Position1) ~= "Vector3" then
		Position1 = Position1.Position
	end

	if typeof(Position2) ~= "Vector3" then
		Position2 = Position2.Position
	end

	if typeof(Position3) ~= "Vector3" then
		Position3 = Position3.Position
	end

	for Index = 0 , Frame , 1 do

		local Time = Index / Frame

		local Lerp1 = BezierCurve.Lerp(Position1 , Position2 , Time)
		local Lerp2 = BezierCurve.Lerp(Position2 , Position3 , Time)

		Target.Position = BezierCurve.Lerp(Lerp1 , Lerp2 , Time)

		task.wait(1 / FPS)

	end

end

function BezierCurve.CubicBezierCurves(Frame , FPS , Target , Position1:Vector3 , Position2 , Position3 , Position4)

	if typeof(Position1) ~= "Vector3" then
		Position1 = Position1.Position
	end

	if typeof(Position2) ~= "Vector3" then
		Position2 = Position2.Position
	end

	if typeof(Position3) ~= "Vector3" then
		Position3 = Position3.Position
	end

	if typeof(Position4) ~= "Vector3" then
		Position4 = Position4.Position
	end

	for Index = 0 , Frame , 1 do

		local Time = Index / Frame

		local Lerp1 = BezierCurve.Lerp(Position1 , Position2 , Time)
		local Lerp2 = BezierCurve.Lerp(Position2 , Position3 , Time)
		local Lerp3 = BezierCurve.Lerp(Position3 , Position4 , Time)

		local InLerp1 = BezierCurve.Lerp(Lerp1 , Lerp2 , Time)
		local InLerp2 = BezierCurve.Lerp(Lerp2 , Lerp3 , Time)

		Target.Position = BezierCurve.Lerp(InLerp1 , InLerp2 , Time)

		task.wait(1 / FPS)

	end

end

------------------------------|åˆ†å‰²çº¿|------------------------------

function BezierCurve.LinearBezierCurvesLookAt(Frame , FPS , Target , Position1 , Position2 , CFrameOffset)

	local CFramePart = Instance.new("Part")
	CFramePart.Parent = Target
	CFramePart.Transparency = 1
	CFramePart.Size = Vector3.new(1,1,1)
	CFramePart.Anchored = true
	CFramePart.CanCollide = false

	if typeof(Position1) ~= "Vector3" then
		Position1 = Position1.Position
	end

	if typeof(Position2) ~= "Vector3" then
		Position2 = Position2.Position
	end

	for Index = 0 , Frame , 1 do

		local Time = Index / Frame

		CFramePart.Position = BezierCurve.Lerp(Position1 , Position2 , Time)

		if Index == 0 then
			continue
		else

			Target.CFrame = CFrame.lookAt(Target.Position , CFramePart.Position , Vector3.new(0,1,0)) * CFrameOffset
			Target.Position = CFramePart.Position

		end

		task.wait(1 / FPS)

	end

	Debris:AddItem(CFramePart , task.wait())

end

function BezierCurve.QuadraticBezierCurvesLookAt(Frame , FPS , Target , Position1 , Position2 , Position3 , CFrameOffset)


	local CFramePart = Instance.new("Part")
	CFramePart.Parent = Target
	CFramePart.Transparency = 1
	CFramePart.Size = Vector3.new(1,1,1)
	CFramePart.Anchored = true
	CFramePart.CanCollide = false

	if typeof(Position1) ~= "Vector3" then
		Position1 = Position1.Position
	end

	if typeof(Position2) ~= "Vector3" then
		Position2 = Position2.Position
	end

	if typeof(Position3) ~= "Vector3" then
		Position3 = Position3.Position
	end

	for Index = 0 , Frame , 1 do

		local Time = Index / Frame

		local Lerp1 = BezierCurve.Lerp(Position1 , Position2 , Time)
		local Lerp2 = BezierCurve.Lerp(Position2 , Position3 , Time)

		CFramePart.Position = BezierCurve.Lerp(Lerp1 , Lerp2 , Time)

		if Index == 0 then
			continue
		else

			Target.CFrame = CFrame.lookAt(Target.Position , CFramePart.Position , Vector3.new(0,1,0)) * CFrameOffset
			Target.Position = CFramePart.Position

		end

		task.wait(1 / FPS)

	end

	Debris:AddItem(CFramePart , task.wait())

end

function BezierCurve.CubicBezierCurvesLookAt(Frame , FPS , Target , Position1 , Position2 , Position3 , Position4 , CFrameOffset)


	local CFramePart = Instance.new("Part")
	CFramePart.Parent = Target
	CFramePart.Transparency = 1
	CFramePart.Size = Vector3.new(1,1,1)
	CFramePart.Anchored = true
	CFramePart.CanCollide = false

	if typeof(Position1) ~= "Vector3" then
		Position1 = Position1.Position
	end

	if typeof(Position2) ~= "Vector3" then
		Position2 = Position2.Position
	end

	if typeof(Position3) ~= "Vector3" then
		Position3 = Position3.Position
	end

	if typeof(Position4) ~= "Vector3" then
		Position4 = Position4.Position
	end

	for Index = 0 , Frame , 1 do

		local Time = Index / Frame

		local Lerp1 = BezierCurve.Lerp(Position1 , Position2 , Time)
		local Lerp2 = BezierCurve.Lerp(Position2 , Position3 , Time)
		local Lerp3 = BezierCurve.Lerp(Position3 , Position4 , Time)

		local InLerp1 = BezierCurve.Lerp(Lerp1 , Lerp2 , Time)
		local InLerp2 = BezierCurve.Lerp(Lerp2 , Lerp3 , Time)

		CFramePart.Position = BezierCurve.Lerp(InLerp1 , InLerp2 , Time)

		if Index == 0 then
			continue
		else

			Target.CFrame = CFrame.lookAt(Target.Position , CFramePart.Position , Vector3.new(0,1,0)) * CFrameOffset
			Target.Position = CFramePart.Position

		end

		task.wait(1 / FPS)

	end

	Debris:AddItem(CFramePart , task.wait())

end

return BezierCurve
]]></ProtectedString>
				<int64 name="SourceAssetId">9474466560</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBXc81868c2b61642c2a27fac56d122f0d7">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">CraterEffects</string>
				<string name="ScriptGuid">{619E7B14-A879-4085-8A8D-EBADEFA6B5D9}</string>
				<ProtectedString name="Source"><![CDATA[--[[
	TYPES:
	Crater
	Orbit
	Path
	Rounded Path
	Closed Path
	Wall Break
	Expanding Crater
	Expanding Orbit
	
	------------------------------
	PROPERTIES:
	
	PartCount -- INTEGER NUMBER TO DICTATE THE AMOUNT OF PARTS IN AN ORBIT/CRATER ATTACK 
	Radius -- SIZE OF A CRATER/ORBIT // For expanding you must put it in list like so: {3,10}. The first value is the staring radius, and the second being the ending radius.
	Range -- RAYCAST MAX DISTANCE DOWNWARDS
	Size -- VECTOR3 VALUE DICTATING PART SIZE
	AnimationSpeed -- HOW FAST THE PARTS SPAWN UPWARDS
	BlockSize -- THE SIZE OF A BLOCK IN A PATH (NOTE: RUN THIS VIA A LIST VALUE: {3,4} THE FIRST BEING THE INITIAL SIZE AND THE SECOND BEING THE FINAL SIZE)
	Width -- THE WIDTH OF A PATH (NOTE: RUN THIS VIA A LIST VALUE: {3,4} THE FIRST BEING THE INITIAL WIDTH AND THE SECOND BEING THE FINAL WIDTH)
	Distance -- THIS IS A PATH TRAVELS
	stepSize -- DISTANCE BETWEEN THE PATH PARTS
	HoldTime -- TIME IN SECONDS BEFORE AN EFFECT DISAPPEARS
	delayTime -- TIME BETWEEN NEXT PART IN PATH (NOTE: PUTTING THIS TO "Stepped" MAKES THE DELAY TIME RUN IN A RUNSERVICE HEARTBEAT)
	Angle -- CRATER ANGLE
	Height -- HEIGHT OF AN EXPLOSION
	Collidable -- PART COLLIDABLILITY FOR WALLBREAK AND FOR EXPLOSION
	IncreaseSpeed -- THIS IS TO CHANGE THE ANIMATION SPEED FOR EXPANDING ORBITS OR EXPANDING CRATERS
	
	
	SET UP:
	[[		NEW		]]
--[[
	local craterEffects = require(craterModule)

	craterEffects.new(Type, AnchorPoint, Properties)

	-- Lets try using orbit with a 5 radius and 8 part count at a tween speed of 0.2
	
	
	craterEffects.new(
	'Orbit', -- This is the type of effect you want
	Character.HumanoidRootPart.CFrame, -- This is the start/center point (depending on the effect)
	{
	['AnimationSpeed'] = 0.2;
	['PartCount'] = 8;
	['Radius'] = 5
	}
	)
]]
--[[		PRESETS		]]
--[[
	local craterEffects = require(craterModule)

	craterEffects.presets(Presets, AnchorPoint, Extras)

	-- This allows you to save presets using the instructions within the 'Presets' script.
	
	
	craterEffects.presets(
	'OFA', -- This is the type of effect you want
	Character.HumanoidRootPart.CFrame, -- This is the start/center point (depending on the effect)
	{
	['AnimationSpeed'] = 0.2;
	['PartCount'] = 8;
	['Radius'] = 5
	}
	)
]]


local Presets = require(script:WaitForChild('Presets'))
local Functions = require(script:WaitForChild('Styles'))

callback = function(called, ErrorType)
	return warn('CRATER MODULE ERROR:\n					'..called..' does not exist as a '..ErrorType)
end
return {
	['new'] = function(Type : string, AnchorPoint : CFrame, ... : dict)
		if Functions[Type] then
			Functions[Type](AnchorPoint, ...)
		else callback(Type, 'type')
		end
		
	end,
	['presets'] = function(Preset : string, AnchorPoint : CFrame, ... : dict)
		if Presets[Presets] then
			local Type, Settings = Presets[Preset](...)
			Functions[Type](AnchorPoint, Settings)
		else callback(Preset, 'preset')
		end
	end,
	
}]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX239730f6bc77489e93c691f82fab675e">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Presets</string>
					<string name="ScriptGuid">{885EA00C-190E-4A04-B2F2-BD30447B2BC3}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	DEVELOPED BY: KYRUSHUI // 2021

	-------------------
	WHEN RETURNING, RETURN THE TYPE OF FUNCTION YOU WANT IT TO FIRE AND RETURN THE SETTINGS YOU CREATED
	
	ex:

		['OFA'] = function(customization)
		local customization = customization or {}
		local settingsPatch = {
			['AnimationSpeed'] = .2;
			['Width'] = {3.5,.8};
			['stepSize'] = 1;
			['Distance'] = customization['Distance'] or 25;
			['BlockSize'] = customization['BlockSize'] or {1,2};
			['HoldTime'] = customization['HoldTime'] or 3;
			['Range'] = customization['Range'] or 5
		}

		return 'Path', settingsPatch
	end,
	
	
	(NOTE: YOU DO NOT NEED TO DEFINE ANY PARAMETERS IF YOU DO NOT WISH FOR IT.)
	----------------------
	
]]

return {
	['OFA'] = function(customization) -- ADD YOUR OWN PRESETS
		local customization = customization or {}
		local settingsPatch = {
			['AnimationSpeed'] = .2;
			['Width'] = {5.5,.8};
			['stepSize'] = 1;
			['Distance'] = customization['Distance'] or 50;
			['BlockSize'] = customization['BlockSize'] or {2,.5};
			['HoldTime'] = customization['HoldTime'] or 3;
			['Range'] = customization['Range'] or 5
		}

		return 'Path', settingsPatch
	end,
}
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX143752e2240748b6b54ac980d5033420">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Styles</string>
					<string name="ScriptGuid">{FC4BD4D3-9C41-48E1-8DEC-D64EBFB33589}</string>
					<ProtectedString name="Source"><![CDATA[local IgnoreList = {game.Players.LocalPlayer.Character, workspace.Debris} -- CHANGE THIS TO IGNORE SPECIFIC INSTANCES

Params = RaycastParams.new()
Params.FilterType = Enum.RaycastFilterType.Blacklist
Params.FilterDescendantsInstances = IgnoreList
Params.IgnoreWater = true

local RunService = game:GetService('RunService')
local TweenService = game:GetService('TweenService')


local Rocks = script.Parent:WaitForChild('Rocks')
local Parent = workspace.Debris -- SET THE PARENT USING THIS
local rayPart = function(CFrameValue, Range, Properties, ownPart)
	
	local Results = workspace:Raycast(CFrameValue.Position, -CFrameValue.UpVector * Range, Params)
	if Results then
		local Part = script["Rock"..math.random(1,8)]:Clone()
		Part.Parent = Parent
		Part.Anchored = true
		Part.CanCollide = false
		Part.Material = Results.Material
		Part.Color = Results.Instance.Color
		Part.CFrame = CFrame.new(Results.Position)
		Part.Reflectance = Results.Instance.Reflectance
		Part.Transparency = Results.Instance.Transparency
		if Properties then
			for property, value in next, Properties do
				if Part[property] ~= nil then
					Part[property] = value
				end
			end
		end

		return Part, Results
	else
		return false
	end
end
local Wait = function(time)
	local time = time or 1/60
	local osc = os.clock()
	while os.clock() - osc < time do
		RunService.Heartbeat:Wait()
	end
end
local randInt = function(min, max)
	local random = Random.new()
	return random:NextNumber(min, max)
end
function lerp(a, b, x)
	return a + (b - a) * x
end
function getXAndZPositions(angle, radius,spi)
	local x = math.cos(angle) * radius + spi
	local z = math.sin(angle) * radius + spi
	return x, z
end


return {
	['Crater'] = function(AnchorPoint, settings)
		local fullCircle = 2 * math.pi
		local partCount = settings['PartCount'] or 5
		local radius = settings['Radius'] or 5
		local range = settings['Range'] or 5
		local Angle = settings['Angle'] or 45
		local BlockSize = settings['BlockSize'] or {3, 5}
		for i = 1, partCount do
			local angle = i * (fullCircle / partCount)
			local x, z = getXAndZPositions(angle, radius,0)
			local Offset = (AnchorPoint) * Vector3.new(x,0,z)

			local angle2 = (i + 1) * (fullCircle / partCount)
			local x2, z2 = getXAndZPositions(angle2, radius,0)
			local Offset2 = (AnchorPoint) * Vector3.new(x2,0,z2)
			local Magnitude = (Offset - Offset2).Magnitude
			local getRandom = randInt(BlockSize[1], BlockSize[2])
			local newSize = Vector3.new(getRandom*2, getRandom * math.random(1,3), getRandom)
			local Part = rayPart(CFrame.new(Offset),  range, {Size = newSize})
			if Part then
				Part.Name = 'CraterPart-'..i
				local cframeTo = CFrame.lookAt(Part.Position, Vector3.new(AnchorPoint.X, 0, AnchorPoint.Z)) * CFrame.fromEulerAnglesXYZ(math.rad(settings['Angle']),0,0)
				local Properties = {CFrame = cframeTo}
				Part.CFrame = CFrame.lookAt(Part.Position, Vector3.new(AnchorPoint.X, 0, AnchorPoint.Z))

				Part.CFrame = Part.CFrame * CFrame.new(0,-2.5,0)

				TweenService:Create(Part, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()
				coroutine.wrap(function()
					wait(settings['HoldTime'])
					local Tween = TweenService:Create(Part, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween:Play()
					Tween.Completed:Wait()
					Part:Destroy()
				end)()
			end
		end
	end,

	['Orbit'] = function(AnchorPoint, settings)
		local fullCircle = 2 * math.pi
		local partCount = settings['PartCount'] or 5
		local radius = settings['Radius'] or 5
		local range = settings['Range'] or 5

		for i = 1, partCount do
			local angle = i * (fullCircle / partCount)
			local x, z = getXAndZPositions(angle, radius,0)
			local Offset = (AnchorPoint) * Vector3.new(x,0,z)

			local Part = rayPart(CFrame.new(Offset),  range, {Size = settings['Size']})
			if Part then
				Part.Name = 'OrbitPart-'..i
				local cframeTo = Part.CFrame * CFrame.fromEulerAnglesXYZ(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000))
				local Properties = {CFrame = cframeTo}
				Part.CFrame = Part.CFrame * CFrame.new(0,-2.5,0)
				TweenService:Create(Part, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()
				coroutine.wrap(function()
					wait(settings['HoldTime'])
					local Tween = TweenService:Create(Part, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween:Play()
					Tween.Completed:Wait()
					Part:Destroy()
				end)()
			end
		end
	end,

	['Path'] = function(AnchorPoint, settings)
		local Width = settings['Width'] or {4,4}
		local blockSize = settings['BlockSize'] or {2,2}
		local count = settings['Distance'] or 15
		local range = settings['Range'] or 5
		local finalCFrame
		local finalSize
		for index = 1, count, settings['stepSize'] or 1 do
			local reachSize = lerp(Width[1], Width[2], index/count)
			finalSize = reachSize
			local reachBlockSize = lerp(blockSize[1], blockSize[2], index/count)
			finalCFrame = AnchorPoint * CFrame.new(0, 0, -index)
			local rightPart = rayPart(AnchorPoint * CFrame.new(reachSize, 0, -index), range, {Size = Vector3.new(0,0,0)})
			local leftPart = rayPart(AnchorPoint * CFrame.new(-reachSize, 0, -index), range, {Size = Vector3.new(0,0,0)})
			local Properties = {Size = Vector3.new(reachBlockSize, reachBlockSize, reachBlockSize)}
			if leftPart then
				leftPart.Orientation = Vector3.new(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000));
				leftPart.Name = 'leftPartPath-'..index
				TweenService:Create(leftPart, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()

				coroutine.wrap(function()
					wait(settings['HoldTime'])
					local Tween2 = TweenService:Create(leftPart, TweenInfo.new(0.25, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween2:Play()
					Tween2.Completed:Wait()
					leftPart:Destroy()
				end)()
			end
			if rightPart then
				rightPart.Orientation = Vector3.new(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000));
				rightPart.Name = 'rightPartPath-'..index
				TweenService:Create(rightPart, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()
				coroutine.wrap(function()
					wait(settings['HoldTime'])
					local Tween1 = TweenService:Create(rightPart, TweenInfo.new(0.25, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween1:Play()
					Tween1.Completed:Wait()
					rightPart:Destroy()
				end)()
			end

			if settings['delayTime'] then
				if settings['delayTime'] == 'Stepped' then
					RunService.Heartbeat:Wait()
				else
					Wait(settings['delayTime'])
				end
			end
		end
	end,

	['RoundedPath'] = function(AnchorPoint, settings)
		local Width = settings['Width'] or {4,4}
		local blockSize = settings['BlockSize'] or {2,2}
		local count = settings['Distance'] or 15
		local range = settings['Range'] or 5
		local finalCFrame
		local finalSize
		local finalBlockSize
		
		for index = 1, count, settings['stepSize'] or 1 do
			local reachSize = lerp(Width[1], Width[2], index/count)
			finalSize = reachSize
			local reachBlockSize = lerp(blockSize[1], blockSize[2], index/count)
			finalBlockSize = reachBlockSize
			finalCFrame = AnchorPoint * CFrame.new(0, 0, -index)

			local Properties = {Size = Vector3.new(reachBlockSize, reachBlockSize, reachBlockSize)}

			local leftPart = rayPart(AnchorPoint * CFrame.new(-reachSize, 0, -index), range, {Size = Vector3.new(0,0,0)})
			if leftPart then
				leftPart.Orientation = Vector3.new(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000));
				leftPart.Name = 'leftPartPath-'..index
				TweenService:Create(leftPart, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()

				coroutine.wrap(function()
					Wait(settings['HoldTime'])
					local Tween2 = TweenService:Create(leftPart, TweenInfo.new(0.25, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween2:Play()
					Tween2.Completed:Wait()
					leftPart:Destroy()
				end)()
			end

			local rightPart = rayPart(AnchorPoint * CFrame.new(reachSize, 0, -index), range, {Size = Vector3.new(0,0,0)})
			if rightPart then
				rightPart.Orientation = Vector3.new(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000));
				rightPart.Name = 'rightPartPath-'..index
				TweenService:Create(rightPart, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()
				coroutine.wrap(function()
					Wait(settings['HoldTime'])
					local Tween1 = TweenService:Create(rightPart, TweenInfo.new(0.25, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween1:Play()
					Tween1.Completed:Wait()
					rightPart:Destroy()
				end)()
			end
			if settings['delayTime'] then
				if settings['delayTime'] == 'Stepped' then
					RunService.Heartbeat:Wait()
				else
					Wait(settings['delayTime'])
				end
			end
		end
		--

		local halfCircle = -math.pi
		local partCount = settings['PartCount'] or finalSize/2
		local radius = finalSize
		local range = settings['Range'] or 5

		for i = 1, partCount do
			local angle = i * (halfCircle / partCount)
			local x, z = getXAndZPositions(angle, radius, 0)
			local Offset = (finalCFrame) * Vector3.new(x,0,z)

			local Part = rayPart(CFrame.new(Offset),  range, {Size = Vector3.new(finalBlockSize, finalBlockSize, finalBlockSize)})
			if Part then
				Part.Name = 'OrbitPart-'..i
				local cframeTo = Part.CFrame * CFrame.fromEulerAnglesXYZ(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000))
				local Properties = {CFrame = cframeTo}
				Part.CFrame = Part.CFrame * CFrame.new(0,-2.5,0)
				TweenService:Create(Part, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()
				coroutine.wrap(function()
					Wait(settings['HoldTime'])
					local Tween = TweenService:Create(Part, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween:Play()
					Tween.Completed:Wait()
					Part:Destroy()
				end)()
			end
			if settings['delayTime'] then
				if settings['delayTime'] == 'Stepped' then
					RunService.Heartbeat:Wait()
				else
					Wait(settings['delayTime'])
				end
			end
		end
	end,

	['ClosedPath'] = function(AnchorPoint, settings)
		local Width = settings['Width'] or {4,4}
		local blockSize = settings['BlockSize'] or {2,2}
		local count = settings['Distance'] or 15
		local range = settings['Range'] or 5

		local halfCircle = math.pi
		local partCount = settings['PartCount'] or Width[1]/2
		local radius = Width[1]
		local range = settings['Range'] or 5

		for i = 1, partCount do
			local angle = i * (halfCircle / partCount)
			local x, z = getXAndZPositions(angle, radius,0)
			local Offset = (AnchorPoint) * Vector3.new(x,0,z)

			local Part = rayPart(CFrame.new(Offset),  range, {Size = Vector3.new(blockSize[1], blockSize[1], blockSize[1])})
			if Part then
				Part.Name = 'OrbitPart-'..i
				local cframeTo = Part.CFrame * CFrame.fromEulerAnglesXYZ(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000))
				local Properties = {CFrame = cframeTo}
				Part.CFrame = Part.CFrame * CFrame.new(0,-2.5,0)
				TweenService:Create(Part, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()
				coroutine.wrap(function()
					Wait(settings['HoldTime'])
					local Tween = TweenService:Create(Part, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween:Play()
					Tween.Completed:Wait()
					Part:Destroy()
				end)()
			end
		end

		for index = 1, count, settings['stepSize'] or 1 do
			local reachSize = lerp(Width[1], Width[2], index/count)
			local reachBlockSize = lerp(blockSize[1], blockSize[2], index/count)


			local Properties = {Size = Vector3.new(reachBlockSize, reachBlockSize, reachBlockSize)}

			local leftPart = rayPart(AnchorPoint * CFrame.new(-reachSize, 0, -index), range, {Size = Vector3.new(0,0,0)})
			if leftPart then
				leftPart.Orientation = Vector3.new(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000));
				leftPart.Name = 'leftPartPath-'..index
				TweenService:Create(leftPart, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()

				coroutine.wrap(function()
					Wait(settings['HoldTime'])
					local Tween2 = TweenService:Create(leftPart, TweenInfo.new(0.25, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween2:Play()
					Tween2.Completed:Wait()
					leftPart:Destroy()
				end)()
			end

			local rightPart = rayPart(AnchorPoint * CFrame.new(reachSize, 0, -index), range, {Size = Vector3.new(0,0,0)})
			if rightPart then
				rightPart.Orientation = Vector3.new(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000));
				rightPart.Name = 'rightPartPath-'..index
				TweenService:Create(rightPart, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()
				coroutine.wrap(function()
					Wait(settings['HoldTime'])
					local Tween1 = TweenService:Create(rightPart, TweenInfo.new(0.25, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween1:Play()
					Tween1.Completed:Wait()
					rightPart:Destroy()
				end)()
			end
			if settings['delayTime'] then
				if settings['delayTime'] == 'Stepped' then
					RunService.Heartbeat:Wait()
				else
					Wait(settings['delayTime'])
				end
			end
		end
	end,
	['WallBreak'] = function(AnchorPoint, settings)
		local PartCount = settings['PartCount'] or 5
		local Height = settings['Height'] or {3,4}
		local Width = settings['Width'] or {-2,2}
		local Range = settings['Range'] or 10
		local BlockSize = settings['BlockSize'] or {3,6}
		for _ = 1, PartCount do
			local Part = rayPart(AnchorPoint, Range, {Size = Vector3.new(0,0,0)})
			if Part then
				Part.Anchored = false
				Part.CanCollide = settings['Collidable'] or true
				Part.CFrame = AnchorPoint
				TweenService:Create(Part, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), {Size = Vector3.new(randInt(BlockSize[1], BlockSize[2]), randInt(BlockSize[1], BlockSize[2]), randInt(BlockSize[1], BlockSize[2]))}):Play()

				local BV = Instance.new('BodyVelocity', Part)
				BV.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
				BV.P = 100000
				BV.Velocity = Vector3.new(randInt(Width[1], Width[2]), randInt(Height[1], Height[2]), randInt(Width[1], Width[2]))


				local AV = Instance.new('BodyAngularVelocity', Part)
				AV.AngularVelocity = Vector3.new(randInt(-40,40), randInt(-40,40), randInt(-40,40))
				AV.MaxTorque = Vector3.new(math.huge,math.huge,math.huge)
				AV.P = 100000
				game:GetService('Debris'):AddItem(BV, 0.25)
				game:GetService('Debris'):AddItem(AV, 0.1)
				coroutine.wrap(function()
					Wait(settings['HoldTime'] or 2)
					local Tween = TweenService:Create(Part, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween:Play()
					Tween.Completed:Wait()
					Part:Destroy()
				end)()
			end

			if settings['delayTime'] then
				if settings['delayTime'] == 'Stepped' then
					RunService.Heartbeat:Wait()
				else
					Wait(settings['delayTime'])
				end
			end
		end
	end,

	['Spikes'] = function(AnchorPoint, settings)
		local Distance = settings['Distance'] or 50
		local step = settings['stepSize'] or 1
		local Width = settings['Width'] or {3,3}
		local blockSize = settings['BlockSize'] or {2,5}
		local Angle = settings['Angle'] or {-1000,1000}
		local Range = settings['Range'] or 10
		for index = 1, Distance, step do
			local lerpedWidth = lerp(Width[1], Width[2], index/Distance)
			local lerpedSize = lerp(blockSize[1], blockSize[2], index/Distance)
			for _ = 1, math.floor(lerpedWidth) do
				local Part = rayPart(AnchorPoint * CFrame.new(randInt(-lerpedWidth, lerpedWidth), 0, -index), Range, {Size = Vector3.new(1.453, lerpedSize, 1.242)}, Rocks.Spike:Clone())
				if Part then
					Part.Orientation = Vector3.new(math.rad(randInt(Angle[1], Angle[2])),math.rad(randInt(Angle[1], Angle[2])),math.rad(randInt(Angle[1], Angle[2])))
					local Properties = {
						CFrame = Part.CFrame * CFrame.new(0,lerpedSize/2.2,0); 
					}
					Part.CFrame = Part.CFrame * CFrame.new(0,-15,0)

					TweenService:Create(Part, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()
					coroutine.wrap(function()
						Wait(settings['HoldTime'] or 2)
						local Tween = TweenService:Create(Part, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
						Tween:Play()
						Tween.Completed:Wait()
						Part:Destroy()
					end)()
				end
			end
			if settings['delayTime'] then
				if settings['delayTime'] == 'Stepped' then
					RunService.Heartbeat:Wait()
				else
					Wait(settings['delayTime'])
				end
			end
		end
	end,
	['RadialSpikes'] = function(AnchorPoint, settings)
		local fullCircle = 2 * math.pi
		local partCount = settings['PartCount'] or 5
		local radius = settings['Radius'] or {2,5}
		local range = settings['Range'] or 5
		local blockSize = settings['BlockSize'] or {2,5}
		local Angle = settings['Angle'] or 45
		local step = settings['stepSize'] or 1

		for index = 1, radius[2],step do
			local newradius = lerp(radius[1], radius[2], index/radius[2])
			local lerpedSize = lerp(blockSize[1], blockSize[2], index/radius[2])
			for i = 1, partCount do
				local angle = i * (fullCircle / partCount)
				local x, z = getXAndZPositions(angle, newradius,0)
				local Offset = (AnchorPoint) * Vector3.new(x,0,z)
				local Part = rayPart(CFrame.new(Offset),  range, {Size = Vector3.new(1.453, lerpedSize, 1.242)}, Rocks.Spike:Clone())
				if Part then
					local cframeTo = CFrame.lookAt(Part.Position, Vector3.new(AnchorPoint.X, 0, AnchorPoint.Z)) * CFrame.fromEulerAnglesXYZ(math.rad(Angle),0,0) * CFrame.new(0,lerpedSize/2.5,0)
					local Properties = {CFrame = cframeTo}
					Part.CFrame = CFrame.lookAt(Part.Position, Vector3.new(AnchorPoint.X, 0, AnchorPoint.Z))

					Part.CFrame = Part.CFrame * CFrame.new(0,-15,0)

					TweenService:Create(Part, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()
					coroutine.wrap(function()
						wait(settings['HoldTime'])
						local Tween = TweenService:Create(Part, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
						Tween:Play()
						Tween.Completed:Wait()
						Part:Destroy()
					end)()
				end
			end
		end


	end,
	['ExpandingCrater'] = function(AnchorPoint, settings)
		local fullCircle = 2 * math.pi
		local partCount = settings['PartCount'] or 5
		local radius = settings['Radius'] or {5,25}
		local BlockSize  = settings['BlockSize'] or {2,10}
		local range = settings['Range'] or 5
		local incSpeed = settings['IncreaseSpeed'] or 1
		local Angle = settings['Angle'] or 45

		for i = 1, partCount do
			local angle = i * (fullCircle / partCount)
			local x, z = getXAndZPositions(angle, radius[1],0)
			local Offset = (AnchorPoint) * Vector3.new(x,0,z)

			local angle2 = (i + 1) * (fullCircle / partCount)
			local x2, z2 = getXAndZPositions(angle2, radius[1],0)
			local Offset2 = (AnchorPoint) * Vector3.new(x2,0,z2)
			local Magnitude = (Offset - Offset2).Magnitude
			local newSize = Vector3.new(Magnitude + .5, BlockSize[1], BlockSize[1])
			local Part = rayPart(CFrame.new(Offset),  range, {Size = newSize})
			if Part then
				Part.Name = 'CraterPart-'..i

				local cframeTo = CFrame.lookAt(Part.Position, Vector3.new(AnchorPoint.X, 0, AnchorPoint.Z)) * CFrame.fromEulerAnglesXYZ(math.rad(Angle),0,0)
				local Properties = {CFrame = cframeTo}
				Part.CFrame = CFrame.lookAt(Part.Position, Vector3.new(AnchorPoint.X, 0, AnchorPoint.Z))

				Part.CFrame = Part.CFrame * CFrame.new(0,-2.5,0)

				TweenService:Create(Part, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties):Play()

				coroutine.wrap(function()
					Wait(settings['AnimationSpeed'] or 0.25)
					for index = radius[1],radius[2], incSpeed do
						local lerpedRadius = lerp(radius[1], radius[2], index/radius[2])
						local lerpedSize = lerp(BlockSize[1],BlockSize[2],index/radius[2])
						local angle = i * (fullCircle / partCount)
						local x, z = getXAndZPositions(angle, lerpedRadius, 0)
						local Offset = (AnchorPoint) * Vector3.new(x,0,z)
						local Results = workspace:Raycast(CFrame.new(Offset).Position, -CFrame.new(Offset).UpVector * range, Params)
						if Results then
							local angle = i * (fullCircle / partCount)
							local x, z = getXAndZPositions(angle, lerpedRadius,0)
							local Offset = (AnchorPoint) * Vector3.new(x,0,z)

							local angle2 = (i + 1) * (fullCircle / partCount)
							local x2, z2 = getXAndZPositions(angle2, lerpedRadius,0)
							local Offset2 = (AnchorPoint) * Vector3.new(x2,0,z2)
							local Magnitude = (Offset - Offset2).Magnitude
							local newSize = Vector3.new(Magnitude + .5, lerpedSize, lerpedSize)

							Part.Position = Results.Position
							Part.Material = Results.Material
							Part.Color = Results.Instance.Color
							Part.CFrame = CFrame.new(Results.Position)
							Part.Reflectance = Results.Instance.Reflectance
							Part.Transparency = Results.Instance.Transparency
							Part.Size = newSize
							Part.CFrame = CFrame.lookAt(Part.Position, Vector3.new(AnchorPoint.X, 0, AnchorPoint.Z)) * CFrame.fromEulerAnglesXYZ(math.rad(Angle),0,0)


						end
						RunService.Heartbeat:Wait()
					end
					Wait(settings['HoldTime'])
					local Tween = TweenService:Create(Part, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween:Play()
					Tween.Completed:Wait()
					Part:Destroy()
				end)()
			end
		end
	end,
	['ExpandingOrbit'] = function(AnchorPoint, settings)
		local fullCircle = 2 * math.pi
		local partCount = settings['PartCount'] or 5
		local radius = settings['Radius'] or {5,25}
		local BlockSize  = settings['BlockSize'] or {2,10}
		local range = settings['Range'] or 5
		local incSpeed = settings['IncreaseSpeed'] or .8


		for i = 1, partCount do
			local angle = i * (fullCircle / partCount)
			local x, z = getXAndZPositions(angle, radius[1],0)
			local Offset = (AnchorPoint) * Vector3.new(x,0,z)

			local Part = rayPart(CFrame.new(Offset),  range, {Size = Vector3.new(BlockSize[1],BlockSize[1],BlockSize[1])})
			if Part then
				Part.Name = 'OrbitPart-'..i
				local Rotation =  CFrame.fromEulerAnglesXYZ(randInt(-1000,1000), randInt(-1000,1000), randInt(-1000,1000))
				local cframeTo = Part.CFrame * Rotation
				local Properties = {CFrame = cframeTo}
				Part.CFrame = Part.CFrame * CFrame.new(0,-2.5,0)
				local AnimTween = TweenService:Create(Part, TweenInfo.new(settings['AnimationSpeed'] or 0.25, Enum.EasingStyle.Sine), Properties)
				AnimTween:Play()

				coroutine.wrap(function()
					AnimTween.Completed:Wait()
					for index = radius[1],radius[2], incSpeed do
						local lerpedRadius = lerp(radius[1], radius[2], index/radius[2])
						local lerpedSize = lerp(BlockSize[1],BlockSize[2],index/radius[2])
						local angle = i * (fullCircle / partCount)
						local x, z = getXAndZPositions(angle, lerpedRadius, 0)
						local Offset = (AnchorPoint) * Vector3.new(x,0,z)
						local Results = workspace:Raycast(CFrame.new(Offset).Position, -CFrame.new(Offset).UpVector * range, Params)
						if Results then
							Part.Position = Results.Position
							Part.Material = Results.Material
							Part.Color = Results.Instance.Color
							Part.CFrame = CFrame.new(Results.Position)
							Part.Reflectance = Results.Instance.Reflectance
							Part.Transparency = Results.Instance.Transparency
							Part.Size = Vector3.new(lerpedSize,lerpedSize,lerpedSize)
							Part.CFrame = Part.CFrame * Rotation
						end
						RunService.Heartbeat:Wait()
					end
					wait(settings['HoldTime'])
					local Tween = TweenService:Create(Part, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {Size = Vector3.new(0,0,0)})
					Tween:Play()
					Tween.Completed:Wait()
					Part:Destroy()
				end)()
			end
		end
	end,
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="MeshPart" referent="RBXb2c3c388310d4255b6f64861b1a7e3e3">
					<Properties>
						<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3410.78882</X>
							<Y>-224.383469</Y>
							<Z>-1601.1217</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4284177243</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="DoubleSided">true</bool>
						<bool name="EnableFluidForces">true</bool>
						<token name="FluidFidelityInternal">0</token>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<bool name="InertiaMigrated">true</bool>
						<Vector3 name="InitialSize">
							<X>7.0071125</X>
							<Y>9.06018257</Y>
							<Z>10.3370342</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshId"><url>rbxassetid://6206817606</url></Content>
						<string name="Name">Rock1</string>
						<SharedString name="PhysicalConfigData">1kMP4TZ9K1BFkGKq9kU9jw==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">1</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="UnscaledCofm">
							<X>0.044221174</X>
							<Y>0.0705294758</Y>
							<Z>-0.110588536</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaDiags">
							<X>2258.2085</X>
							<Y>1787.68396</Y>
							<Z>1593.11389</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaOffDiags">
							<X>-40.2052536</X>
							<Y>212.751785</Y>
							<Z>293.204895</Z>
						</Vector3>
						<float name="UnscaledVolume">265.087677</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>1.1848489</X>
							<Y>1.53200722</Y>
							<Z>1.747913</Z>
						</Vector3>
					</Properties>
					<Item class="Texture" referent="RBX46300957f92e432bbefd1e4ad1cf43ad">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX4346aa5fe66d4d9098cf52d36bc25f64">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">2</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX673d552606084c4bb1288daf134c9422">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">4</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX25e305e5fc1a4187b4e53981302ccca7">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">3</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX29419efbc4064529bbf26cb5dce52624">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">0</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX475e466620074dfca6e79bb41e761ff3">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">5</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="MeshPart" referent="RBX0a8522ff0a474bef9cef43c725ee18c8">
					<Properties>
						<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3409.59351</X>
							<Y>-224.793152</Y>
							<Z>-1598.44666</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4284177243</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="DoubleSided">true</bool>
						<bool name="EnableFluidForces">true</bool>
						<token name="FluidFidelityInternal">0</token>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<bool name="InertiaMigrated">true</bool>
						<Vector3 name="InitialSize">
							<X>8.3473978</X>
							<Y>16.1909733</Y>
							<Z>13.0077648</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshId"><url>rbxassetid://6206817485</url></Content>
						<string name="Name">Rock2</string>
						<SharedString name="PhysicalConfigData">uTzSUNRpTr7Mf4ftgO/WNw==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">1</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="UnscaledCofm">
							<X>-0.268028855</X>
							<Y>-0.0922859684</Y>
							<Z>0.236500621</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaDiags">
							<X>10931.0479</X>
							<Y>6195.83496</Y>
							<Z>8619.55566</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaOffDiags">
							<X>-1494.7605</X>
							<Y>-632.167358</Y>
							<Z>-1894.22363</Z>
						</Vector3>
						<float name="UnscaledVolume">576.989624</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>1.41148078</X>
							<Y>2.73776913</Y>
							<Z>2.19951296</Z>
						</Vector3>
					</Properties>
					<Item class="Texture" referent="RBX279fe5bd9b43446bb0c8e2ba9c5bdce8">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX512222a0865c4adfa619cefc30bf99de">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">2</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX97978dc88a4c4bc0a6f5d3e7afaa7b2b">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">4</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBXad7ef17daa2441fdb801e16a98457207">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">3</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX7e024a95285341e6a0e5582476c64e55">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">0</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX4cc1554dd507469691e57132632bdb0c">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">5</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="MeshPart" referent="RBX0e7570bbf4ad4b838a3e51efb1ab3634">
					<Properties>
						<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3408.27661</X>
							<Y>-227.804916</Y>
							<Z>-1598.67126</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4284177243</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="DoubleSided">true</bool>
						<bool name="EnableFluidForces">true</bool>
						<token name="FluidFidelityInternal">0</token>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<bool name="InertiaMigrated">true</bool>
						<Vector3 name="InitialSize">
							<X>9.06442928</X>
							<Y>12.8371105</Y>
							<Z>11.5753441</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshId"><url>rbxassetid://6206816969</url></Content>
						<string name="Name">Rock3</string>
						<SharedString name="PhysicalConfigData">PtBA9KJXxYIuBxfTbrYnxQ==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">1</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="UnscaledCofm">
							<X>-0.117278308</X>
							<Y>-0.680180728</Y>
							<Z>0.0561254174</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaDiags">
							<X>4542.8457</X>
							<Y>3414.22656</Y>
							<Z>3547.87671</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaOffDiags">
							<X>44.8472366</X>
							<Y>-157.266663</Y>
							<Z>6.40384102</Z>
						</Vector3>
						<float name="UnscaledVolume">352.817688</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>1.53272533</X>
							<Y>2.17065668</Y>
							<Z>1.95730174</Z>
						</Vector3>
					</Properties>
					<Item class="Texture" referent="RBX22da2c11e853442793a10c4de39b1c77">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBXe698e522fd3343b7bc2e21415d63edca">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">2</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX3d6bcba494e3400584a9bd9649c45594">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">4</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX4a0e04d36d624844bc15d0afd8a4dca4">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">3</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX4fde97801e4b48f49930efb26d446346">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">0</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX0b4da5fee2fb44158b189145801a7596">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">5</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="MeshPart" referent="RBX4ac7cebb8473477eb930e22f0cc1f52d">
					<Properties>
						<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3409.37915</X>
							<Y>-227.858719</Y>
							<Z>-1603.35779</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4284177243</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="DoubleSided">true</bool>
						<bool name="EnableFluidForces">true</bool>
						<token name="FluidFidelityInternal">0</token>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<bool name="InertiaMigrated">true</bool>
						<Vector3 name="InitialSize">
							<X>8.96902275</X>
							<Y>16.1495895</Y>
							<Z>15.842844</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshId"><url>rbxassetid://6206817112</url></Content>
						<string name="Name">Rock4</string>
						<SharedString name="PhysicalConfigData">kIvk4Xlu5M1i0ceEo2qP0A==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">1</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="UnscaledCofm">
							<X>0.0208076816</X>
							<Y>-0.260201275</Y>
							<Z>0.235839188</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaDiags">
							<X>20341.6582</X>
							<Y>13099.0137</Y>
							<Z>13630.5918</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaOffDiags">
							<X>661.018433</X>
							<Y>529.0625</Y>
							<Z>4696.59668</Z>
						</Vector3>
						<float name="UnscaledVolume">838.730347</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>1.51659274</X>
							<Y>2.73077154</Y>
							<Z>2.6789031</Z>
						</Vector3>
					</Properties>
					<Item class="Texture" referent="RBXb7f02bee975d4bb08ac12bb6290bee11">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX01fb4610243c4930bca049fcf0793b14">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">2</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBXedadd064a1a04bfda61a26dc517ee2d9">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">4</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBXba9a41802560456682e9d6eae610d6eb">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">3</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBXf76d31ab708d4d408c09e4e417c3f235">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">0</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBXf9b6d76c646741afb2290b2d33304749">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">5</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="MeshPart" referent="RBX307db05bfe33477ab9b1df21daa81984">
					<Properties>
						<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3409.59839</X>
							<Y>-226.077606</Y>
							<Z>-1602.22473</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4284177243</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="DoubleSided">true</bool>
						<bool name="EnableFluidForces">true</bool>
						<token name="FluidFidelityInternal">0</token>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<bool name="InertiaMigrated">true</bool>
						<Vector3 name="InitialSize">
							<X>8.12292194</X>
							<Y>6.82699347</Y>
							<Z>4.5668149</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshId"><url>rbxassetid://6206817364</url></Content>
						<string name="Name">Rock5</string>
						<SharedString name="PhysicalConfigData">vA+lr/fS59F3DJoBcLXx5g==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">1</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="UnscaledCofm">
							<X>0.0118332524</X>
							<Y>0.0377497151</Y>
							<Z>-0.00211698608</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaDiags">
							<X>371.569366</X>
							<Y>467.404846</Y>
							<Z>587.856689</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaOffDiags">
							<X>-74.8399811</X>
							<Y>11.7910938</Y>
							<Z>52.4446831</Z>
						</Vector3>
						<float name="UnscaledVolume">114.155334</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>1.37352371</X>
							<Y>1.15439212</Y>
							<Z>0.77221328</Z>
						</Vector3>
					</Properties>
					<Item class="Texture" referent="RBXe1fc076f98c54013bb092d32d84377cd">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX35cf5e11cfc44b32b31d9a1a3a2b3ae9">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">2</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX986474c37e4b403490bfd3becbb21183">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">4</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX525cf33b89fd44c2a1e1756de1197a53">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">3</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX5955e8eefc7b4a9ba0d6c2c26121ebe1">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">0</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX2a5e9123d5654b70a2bb9ded56b3cff9">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">5</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="MeshPart" referent="RBX83ecc4494ac94ba28fb14d188761899a">
					<Properties>
						<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3410.28784</X>
							<Y>-225.423676</Y>
							<Z>-1600.05481</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4284177243</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="DoubleSided">true</bool>
						<bool name="EnableFluidForces">true</bool>
						<token name="FluidFidelityInternal">0</token>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<bool name="InertiaMigrated">true</bool>
						<Vector3 name="InitialSize">
							<X>3.13637733</X>
							<Y>6.10283184</Y>
							<Z>4.94937706</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshId"><url>rbxassetid://6206817867</url></Content>
						<string name="Name">Rock6</string>
						<SharedString name="PhysicalConfigData">P5wVyID+FvJYeh1t4R3dWw==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">1</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="UnscaledCofm">
							<X>-0.00419015298</X>
							<Y>-0.00542334979</Y>
							<Z>0.00236309436</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaDiags">
							<X>107.721474</X>
							<Y>57.7130585</Y>
							<Z>82.8577652</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaOffDiags">
							<X>-6.48939276</X>
							<Y>6.11322784</Y>
							<Z>29.0622025</Z>
						</Vector3>
						<float name="UnscaledVolume">36.3646965</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>0.530337274</X>
							<Y>1.03194189</Y>
							<Z>0.836901605</Z>
						</Vector3>
					</Properties>
					<Item class="Texture" referent="RBXdce17a7ac91a413d81c90aaa4cdf5dbf">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX164a45b16b4e415586b5fb738004c07e">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">2</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX72da19d24e4f4d859984489f83f2cde5">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">4</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX34d2e177df2849c7a9ac1e527d92682f">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">3</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX9c2a143d87834f9bbcc40f242ae261f5">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">0</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBXcfa6df1d8e814d3abaa08b2bf118d6ab">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">5</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="MeshPart" referent="RBX311d1c7f36f945dabb80cdea1b283129">
					<Properties>
						<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3410.01294</X>
							<Y>-225.364319</Y>
							<Z>-1601.26233</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4284177243</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="DoubleSided">true</bool>
						<bool name="EnableFluidForces">true</bool>
						<token name="FluidFidelityInternal">0</token>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<bool name="InertiaMigrated">true</bool>
						<Vector3 name="InitialSize">
							<X>2.11663246</X>
							<Y>4.70790005</Y>
							<Z>3.86183119</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshId"><url>rbxassetid://6206817748</url></Content>
						<string name="Name">Rock7</string>
						<SharedString name="PhysicalConfigData">hVCt68BLrBLnQYp7xxMLCQ==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">1</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="UnscaledCofm">
							<X>0.00193210063</X>
							<Y>0.267643273</Y>
							<Z>-0.0678890944</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaDiags">
							<X>23.9371204</X>
							<Y>12.9824047</Y>
							<Z>16.1669559</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaOffDiags">
							<X>-0.841994345</X>
							<Y>2.24282002</Y>
							<Z>3.7203517</Z>
						</Vector3>
						<float name="UnscaledVolume">14.063818</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>0.357906282</X>
							<Y>0.796069682</Y>
							<Z>0.653005958</Z>
						</Vector3>
					</Properties>
					<Item class="Texture" referent="RBX4775bf7d1a7f4b0dadc792cd6d07267e">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX00e34726f7a84ebf93d53c2aafd48629">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">2</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX38fc6f4b30fe4374ac4b229c6e67a37e">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">4</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX9ba2d3f271f249aea87efc3f8bdff399">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">3</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX425c781c469d4858bf524b03d3c754de">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">0</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBXd3e34f902a964ba1a4db016069d89dac">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">5</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="MeshPart" referent="RBXd5e18cd35e3146ae81809afbd392805a">
					<Properties>
						<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3408.927</X>
							<Y>-226.139587</Y>
							<Z>-1600.52795</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">true</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4284177243</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="DoubleSided">true</bool>
						<bool name="EnableFluidForces">true</bool>
						<token name="FluidFidelityInternal">0</token>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<bool name="InertiaMigrated">true</bool>
						<Vector3 name="InitialSize">
							<X>7.1460743</X>
							<Y>6.33862972</Y>
							<Z>6.17822409</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">256</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshId"><url>rbxassetid://6206817247</url></Content>
						<string name="Name">Rock8</string>
						<SharedString name="PhysicalConfigData">rtpX0D0DqqaUvXW+JISfVQ==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">1</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="UnscaledCofm">
							<X>-0.102850415</X>
							<Y>0.144316718</Y>
							<Z>0.105456054</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaDiags">
							<X>289.212463</X>
							<Y>287.368988</Y>
							<Z>295.572754</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaOffDiags">
							<X>1.65115523</X>
							<Y>2.39352608</Y>
							<Z>1.37381887</Z>
						</Vector3>
						<float name="UnscaledVolume">90.3711548</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>1.20834625</X>
							<Y>1.07181358</Y>
							<Z>1.04469025</Z>
						</Vector3>
					</Properties>
					<Item class="Texture" referent="RBX8b3c179c1221416eb389a4bec767fea2">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">1</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX60512d548007437ea94090d1924e3429">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">2</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX7e29a5bfd89a467d854bdfd2203b28c4">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">4</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX40a67f3c8cd24a10b009fa79ec71de94">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">3</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBXbf74d7fee6314edda83ada06c35c40a9">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">0</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="Texture" referent="RBX5bec008e0f7148d0b9e470acc4a091b6">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
							<Color3 name="Color3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<bool name="DefinesCapabilities">false</bool>
							<token name="Face">5</token>
							<Content name="MetalnessMap"><null></null></Content>
							<string name="Name">Texture</string>
							<Content name="NormalMap"><null></null></Content>
							<float name="OffsetStudsU">0</float>
							<float name="OffsetStudsV">0</float>
							<Content name="RoughnessMap"><null></null></Content>
							<int64 name="SourceAssetId">-1</int64>
							<float name="StudsPerTileU">25.5</float>
							<float name="StudsPerTileV">25.5</float>
							<BinaryString name="Tags"></BinaryString>
							<Content name="Texture"><url>http://www.roblox.com/asset/?id=7293805284</url></Content>
							<float name="Transparency">0</float>
							<Vector2 name="UVOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="UVScale">
								<X>1</X>
								<Y>1</Y>
							</Vector2>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="Folder" referent="RBXeb318904b7d048d0b5a206dcc068fa8a">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<string name="Name">Rocks</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="MeshPart" referent="RBX8bb0e63f1bac4e68bb67cd1b201489d2">
					<Properties>
						<SharedString name="AeroMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
						<bool name="Anchored">true</bool>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AudioCanCollide">true</bool>
						<float name="BackParamA">-0.5</float>
						<float name="BackParamB">0.5</float>
						<token name="BackSurface">0</token>
						<token name="BackSurfaceInput">0</token>
						<float name="BottomParamA">-0.5</float>
						<float name="BottomParamB">0.5</float>
						<token name="BottomSurface">0</token>
						<token name="BottomSurfaceInput">0</token>
						<CoordinateFrame name="CFrame">
							<X>3402.21313</X>
							<Y>-225.193893</Y>
							<Z>-1605.81653</Z>
							<R00>0</R00>
							<R01>0</R01>
							<R02>1</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>-0</R12>
							<R20>-1</R20>
							<R21>0</R21>
							<R22>0</R22>
						</CoordinateFrame>
						<bool name="CanCollide">false</bool>
						<bool name="CanQuery">true</bool>
						<bool name="CanTouch">false</bool>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="CastShadow">true</bool>
						<string name="CollisionGroup">Default</string>
						<int name="CollisionGroupId">0</int>
						<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
						<PhysicalProperties name="CustomPhysicalProperties">
							<CustomPhysics>false</CustomPhysics>
						</PhysicalProperties>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="DoubleSided">false</bool>
						<bool name="EnableFluidForces">true</bool>
						<token name="FluidFidelityInternal">0</token>
						<float name="FrontParamA">-0.5</float>
						<float name="FrontParamB">0.5</float>
						<token name="FrontSurface">0</token>
						<token name="FrontSurfaceInput">0</token>
						<bool name="HasJointOffset">false</bool>
						<bool name="HasSkinnedMesh">false</bool>
						<bool name="InertiaMigrated">true</bool>
						<Vector3 name="InitialSize">
							<X>3.70342302</X>
							<Y>7.1006341</Y>
							<Z>3.16517091</Z>
						</Vector3>
						<Vector3 name="JointOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<float name="LeftParamA">-0.5</float>
						<float name="LeftParamB">0.5</float>
						<token name="LeftSurface">0</token>
						<token name="LeftSurfaceInput">0</token>
						<bool name="Locked">false</bool>
						<bool name="Massless">false</bool>
						<token name="Material">800</token>
						<string name="MaterialVariantSerialized"></string>
						<Content name="MeshId"><url>rbxassetid://7033932303</url></Content>
						<string name="Name">Spike</string>
						<SharedString name="PhysicalConfigData">zCPvfeRErxlahYdIpTlF4g==</SharedString>
						<BinaryString name="PhysicsData"></BinaryString>
						<CoordinateFrame name="PivotOffset">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
							<R00>1</R00>
							<R01>0</R01>
							<R02>0</R02>
							<R10>0</R10>
							<R11>1</R11>
							<R12>0</R12>
							<R20>0</R20>
							<R21>0</R21>
							<R22>1</R22>
						</CoordinateFrame>
						<float name="Reflectance">0</float>
						<token name="RenderFidelity">0</token>
						<float name="RightParamA">-0.5</float>
						<float name="RightParamB">0.5</float>
						<token name="RightSurface">0</token>
						<token name="RightSurfaceInput">0</token>
						<int name="RootPriority">0</int>
						<Vector3 name="RotVelocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TextureID"><null></null></Content>
						<float name="TopParamA">-0.5</float>
						<float name="TopParamB">0.5</float>
						<token name="TopSurface">0</token>
						<token name="TopSurfaceInput">0</token>
						<float name="Transparency">0</float>
						<Vector3 name="UnscaledCofm">
							<X>0.128301769</X>
							<Y>-1.49646711</Y>
							<Z>-0.0267241206</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaDiags">
							<X>60.4650154</X>
							<Y>23.3340168</Y>
							<Z>61.8178864</Z>
						</Vector3>
						<Vector3 name="UnscaledVolInertiaOffDiags">
							<X>-1.06526458</X>
							<Y>-0.133367717</Y>
							<Z>-1.74485052</Z>
						</Vector3>
						<float name="UnscaledVolume">16.3165398</float>
						<Vector3 name="Velocity">
							<X>0</X>
							<Y>0</Y>
							<Z>0</Z>
						</Vector3>
						<int name="VertexCount">0</int>
						<Vector3 name="size">
							<X>1.45342302</X>
							<Y>8.03667259</Y>
							<Z>1.24218392</Z>
						</Vector3>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBX00ca3406c7704809b7bfc75c3dbd6eff">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Mouse2</string>
				<string name="ScriptGuid">{0B975F1B-1E24-4F05-A4CB-CD097B410A51}</string>
				<ProtectedString name="Source"><![CDATA[--- Jiwonz
local m2 = {}
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local screen = script:WaitForChild("MouseFixScreen")
local sys_cursors = require(script:WaitForChild("SystemCursors"))
local thread = require(script:WaitForChild("Thread"))
local gui = player:WaitForChild("PlayerGui")
local services = {
	rs = game:GetService("RunService");
	uis = game:GetService("UserInputService");
	tw = game:GetService("TweenService");
	de = game:GetService("Debris");
	gs = game:GetService("GuiService");
}
local camera = game.Workspace.CurrentCamera

function m2:IsFirstPerson()
	return (camera.Focus.p - camera.CoordinateFrame.p).Magnitude <= 1
end

function m2:CursorUpdate()
	if self:IsFirstPerson() then
		if self.cursor.Position ~= UDim2.fromScale(0.5,0.5) then
			self.cursor.Position = UDim2.fromScale(0.5,0.5)
			if not self.cursor.Parent.IgnoreGuiInset then self.cursor.Parent.IgnoreGuiInset = true end
		end
	else
		if self.cursor.Position ~= UDim2.fromOffset(mouse.X,mouse.Y) then 
			self.cursor.Position = UDim2.fromOffset(mouse.X,mouse.Y) 
			if self.cursor.Parent.IgnoreGuiInset then self.cursor.Parent.IgnoreGuiInset = false end
		end
	end
end

function m2:TrailStart(t,r)
	thread:Spawn(function()
		while self.trail_enabled do
			local trail = self.cursor:Clone()
			trail.Parent = self.cursor.Parent
			services.tw:Create(trail,TweenInfo.new(t),{ImageTransparency=1}):Play()
			services.de:AddItem(trail,t)
			thread:Wait(r)
		end
	end)
end

function m2:SetSize(vec2)
	self.cursor.Size = UDim2.fromOffset(vec2.X,vec2.Y)
end

function m2:GetSize()
	return Vector2.new(self.cursor.Size.X.Offset,self.cursor.Size.Y.Offset)
end

function m2:SetTransparency(n)
	self.cursor.ImageTransparency = n
end

function m2:SetColor(c3)
	self.cursor.ImageColor3 = c3
end

function m2:Hide(bool)
	self.cursor.Visible = not bool
end

function m2:GetSystemCursor(s)
	local cursor = sys_cursors[s]
	if cursor then
		return string.format("rbxasset://textures/Cursors/KeyboardMouse/%s",cursor)
	end
end

function m2:SetIcon(id)
	if not id then id = "" end
	if id == "" then
		self.system_cursor = true
		self.cursor.Image = self:GetSystemCursor("PointingHand")
		self:SetSize(Vector2.new(70,70))
	else
		self.system_cursor = false
		self.cursor.Image = id
	end
end

function m2:GetUnitRay()
	if self:IsFirstPerson() then
		local viewportpoint = camera.ViewportSize / 2
		local unit_ray = camera:ViewportPointToRay(viewportpoint.X, viewportpoint.Y, 0)
		return unit_ray
	else
		return mouse.UnitRay
	end
end

function m2:GetHit()
	local unit_ray = self:GetUnitRay()
	local raycastParams = RaycastParams.new()
	if player.Character then raycastParams.FilterDescendantsInstances = {camera, player.Character, workspace.Debris} else raycastParams.FilterDescendantsInstances = {camera, workspace.Debris} end
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	local ray = workspace:Raycast(unit_ray.Origin, unit_ray.Direction*1000,raycastParams)
	if ray then return CFrame.new(ray.Position) else return mouse.Hit end
end

return m2
--[[
return function()
	screen.Parent = gui
	services.uis.MouseIconEnabled = false
	
	local cursor = screen:WaitForChild("cursor")
	cursor.AnchorPoint = Vector2.new(0.5,0.5)
	
	local self = m2
	self.cursor = cursor;
	
	services.rs.RenderStepped:Connect(function() self:CursorUpdate() end)
	
	self.system_cursor = true
	mouse.Icon = ""
	cursor.Image = self:GetSystemCursor("PointingHand")
	
	local function handleGuiCursor(b)
		local can = b.Visible
		b:GetPropertyChangedSignal("Visible"):Connect(function()
			can = b.Visible
		end)
		b.MouseEnter:Connect(function()
			if self.system_cursor then
				self.cursor.Image = self:GetSystemCursor("Arrow")
			end
		end)
		b.MouseLeave:Connect(function()
			if self.system_cursor then
				self.cursor.Image = self:GetSystemCursor("PointingHand")
			end
		end)
	end
	
	gui.DescendantAdded:Connect(function(b)
		if b:IsA("ImageButton") or b:IsA("TextButton") then
			handleGuiCursor(b)
		end
	end)
	for i,b in pairs(gui:GetDescendants()) do
		if b:IsA("ImageButton") or b:IsA("TextButton") then
			handleGuiCursor(b)
		end
	end
	
	services.gs.MenuOpened:Connect(function() self:Hide(true) end)
	services.gs.MenuClosed:Connect(function() self:Hide(false) end)
	
	if services.uis.TouchEnabled and not services.uis.KeyboardEnabled and not services.uis.MouseEnabled
		and not services.uis.GamepadEnabled and not services.gs:IsTenFootInterface() then
		self:Hide(true)
	end
	
	return setmetatable(self,{__index = function(_,w) warn(w) return mouse[w] end})
end
--]]]]></ProtectedString>
				<int64 name="SourceAssetId">8478373247</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ScreenGui" referent="RBX984ddd3568304e00901246276701cba5">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="ClipToDeviceSafeArea">true</bool>
					<bool name="DefinesCapabilities">false</bool>
					<int name="DisplayOrder">100</int>
					<bool name="Enabled">true</bool>
					<string name="Name">MouseFixScreen</string>
					<bool name="ResetOnSpawn">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<token name="SafeAreaCompatibility">1</token>
					<token name="ScreenInsets">1</token>
					<token name="SelectionBehaviorDown">0</token>
					<token name="SelectionBehaviorLeft">0</token>
					<token name="SelectionBehaviorRight">0</token>
					<token name="SelectionBehaviorUp">0</token>
					<bool name="SelectionGroup">false</bool>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<token name="ZIndexBehavior">1</token>
				</Properties>
				<Item class="ImageLabel" referent="RBXa0fe7ed4fd544f8b83af37289c9d0621">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
						<bool name="ClipsDescendants">false</bool>
						<bool name="DefinesCapabilities">false</bool>
						<bool name="Draggable">false</bool>
						<Content name="Image"><url>rbxasset://textures/Cursors/KeyboardMouse/ArrowCursor.png</url></Content>
						<Color3 name="ImageColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<Vector2 name="ImageRectOffset">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<Vector2 name="ImageRectSize">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<float name="ImageTransparency">0</float>
						<bool name="Interactable">true</bool>
						<int name="LayoutOrder">0</int>
						<string name="Name">cursor</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<token name="ResampleMode">0</token>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<token name="ScaleType">0</token>
						<bool name="Selectable">false</bool>
						<token name="SelectionBehaviorDown">0</token>
						<token name="SelectionBehaviorLeft">0</token>
						<token name="SelectionBehaviorRight">0</token>
						<token name="SelectionBehaviorUp">0</token>
						<bool name="SelectionGroup">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<int name="SelectionOrder">0</int>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>70</XO>
							<YS>0</YS>
							<YO>70</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<Rect2D name="SliceCenter">
							<min>
								<X>0</X>
								<Y>0</Y>
							</min>
							<max>
								<X>0</X>
								<Y>0</Y>
							</max>
						</Rect2D>
						<float name="SliceScale">1</float>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UDim2 name="TileSize">
							<XS>1</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBXaa3d30f4de03465aaedf5b64214a1b64">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">SystemCursors</string>
					<string name="ScriptGuid">{5082900E-684A-483C-B772-56F17F864B8C}</string>
					<ProtectedString name="Source"><![CDATA[return {
	Arrow = "ArrowCursor.png";
	PointingHand = "ArrowFarCursor.png";
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX43f345ad82804fa1a4e10ad51775c62c">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
					<bool name="DefinesCapabilities">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Thread</string>
					<string name="ScriptGuid">{F7E40AFB-8E35-4752-86E9-3824F053109C}</string>
					<ProtectedString name="Source"><![CDATA[local Thread = {}

local RunService = game:GetService("RunService")

function Thread:Wait(t)
	if t ~= nil then
		local TotalTime = 0
		TotalTime = TotalTime + RunService.Heartbeat:Wait()
		while TotalTime < t do
			TotalTime = TotalTime + RunService.Heartbeat:Wait()
		end
	else
		RunService.Heartbeat:Wait()
	end
end

function Thread:Spawn(callback)
	local bindable = Instance.new("BindableEvent")
	bindable.Event:connect(callback)
	bindable:Fire()
	bindable:Destroy()
end

function Thread:Delay(t, callback)
	self:Spawn(function()
		self:Wait(t)
		callback()
	end)
end

return Thread]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
	</Item>
	<SharedStrings>
		<SharedString md5="PtBA9KJXxYIuBxfTbrYnxQ==">Q1NHUEhTBwAAAAKqaLBDnC/wvVMgLr/E42U9xPaNRZJjM0JERB3DoGNVRUTszEAHvl1FEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPxsAAAAEAAAAQHYzvQAgnzlV
8qLAfFT6PwAgnzljnYLAfFT6Pzt/RkCEtVfAQHYzvbKbBz8aSqLAQHYzvTt/RkB8O6bALElZ
Pjt/RkCv0KHAfFT6P3igKUD+54LAoO+YPjt/RkAPJJ/AQHYzvYgaTz9U8qHAKgAAAAAAAAAB
AAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAACAAAAAAAAAAIAAAABAAAAAAAAAAEAAAAAQAA
AAEAAAAEAAAABQAAAAEAAAAFAAAABgAAAAEAAAAGAAAAAgAAAAIAAAAGAAAABwAAAAIAAAAH
AAAABQAAAAIAAAAFAAAABAAAAAIAAAAEAAAACAAAAAIAAAAIAAAAAwAAAAUAAAAHAAAABgAA
ABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD8hAAAABAAAAFBh+j8A
AAAAxpuCwNNvEkAAAAAAZ3p6wLxRVEAAAAAAfjsmwFBh+j8zhEZAz7JXwFBh+j/+oylAA+aC
wGvodkA9HwpA1V5CwOpNdUAhIaE/fjsmwEZaMEAzhEZAfjsmwL0ofUCyOuY/fjsmwNDRX0Dd
vClAfjsmwKoFckAWPQpAfjsmwDYAAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAA
AAQAAAAAAAAABAAAAAEAAAABAAAABAAAAAUAAAABAAAABQAAAAIAAAACAAAABQAAAAYAAAAC
AAAABgAAAAgAAAACAAAACAAAAAoAAAACAAAACgAAAAkAAAACAAAACQAAAAcAAAACAAAABwAA
AAMAAAADAAAABwAAAAQAAAAEAAAABwAAAAUAAAAFAAAACAAAAAYAAAAFAAAABwAAAAkAAAAF
AAAACQAAAAoAAAAFAAAACgAAAAgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAA
AAAAAAAAAIA/GAAAAAQAAAA3DSvASplHQPgvOUBhJVfASplHQABAlDnGQ4bAoT4GQABAlDlw
BDrAtEU1QPgvOUAXVDbAAAAAAPgvOUBGYH7AAAAAAABAlDkfVobAkAKRPwBAlDnyX23AAAAA
ABpqjT8kAAAAAAAAAAEAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAAB
AAAAAQAAAAQAAAAFAAAAAQAAAAUAAAAGAAAAAQAAAAYAAAACAAAAAgAAAAYAAAADAAAAAwAA
AAYAAAAHAAAAAwAAAAcAAAAEAAAABAAAAAcAAAAFAAAABQAAAAcAAAAGAAAAEAAAAAAAAAAA
AAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPycAAAAEAAAAWaMyQDOERkAAAAC1mlcw
QDOERkB9OybA71VUQAAAAAB9OybALwaMQAAAAAAAAAC1XR5VQGDICkAAAAC1f9tfQN28KUB9
OybA/dJKQDOERkDhngzADlN1QCEhoT99OybA2hRzQAAAAABGxv2/2DaOQAAAAAC4M8u+tF+J
QLD5Lz4AAAC1AAZyQBY9CkB9OybAWSd9QLI65j99OybAQgAAAAAAAAABAAAAAgAAAAAAAAAC
AAAAAwAAAAAAAAADAAAACgAAAAAAAAAKAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAABgAA
AAAAAAAGAAAAAQAAAAEAAAAGAAAABQAAAAEAAAAFAAAACwAAAAEAAAALAAAADAAAAAEAAAAM
AAAABwAAAAEAAAAHAAAAAgAAAAIAAAAHAAAACAAAAAIAAAAIAAAACQAAAAIAAAAJAAAAAwAA
AAMAAAAJAAAACgAAAAQAAAALAAAABQAAAAQAAAAKAAAACwAAAAcAAAAMAAAACQAAAAcAAAAJ
AAAACAAAAAkAAAAMAAAACwAAAAkAAAALAAAACgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAA
AAAAAAAAAAAAAAAAAAAAgD8kAAAABAAAAIrRSkAkjkZA+agMwKhpWT4kjkZAEtChwPzMrj87
QLJAAAAAtWKVMkAkjkZAAAAAtYBDNL0kjkZAyDmmwIBDNL1+ykpAIVumwKwPJT8cNsBAAAAA
tYBDNL3/SsZAAAAAtYBDNL1rWExAJBqlwIDACb0yhMZAAAAAtYBDNL3XaMZAAMEmvIBDNL1/
C75A6HzqvjwAAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAA
AAEAAAABAAAABAAAAAUAAAABAAAABQAAAAYAAAABAAAABgAAAAIAAAACAAAABgAAAAkAAAAC
AAAACQAAAAcAAAACAAAABwAAAAMAAAADAAAABwAAAAQAAAAEAAAABwAAAAoAAAAEAAAACgAA
AAsAAAAEAAAACwAAAAgAAAAEAAAACAAAAAUAAAAFAAAACAAAAAYAAAAGAAAACAAAAAkAAAAH
AAAACQAAAAoAAAAIAAAACwAAAAkAAAAJAAAACwAAAAoAAAAQAAAAAAAAAAAAAAAAAAAAAAAA
ABAAAAAAAAAAAAAAAAAAAAAAAIA/JwAAAAQAAACA6bU9TJlHQGtHgEAwJxTAf+FKQIwNh0Bo
MwTATJlHQB7Ch0DAI1fATJlHQAAAALWA6bU9p1zFQAAAALWA6bU9RhK3QLLMvz+A6bU9+GHC
QD7QDT9Auwu9OYHGQAAAALXXANy/GxqkQADA2TkO3BnATJlHQNCmgEC0WBjATJlHQK5QgkAc
IxPATJlHQDj1h0CA6bU9SpTHQECY8z1CAAAAAAAAAAEAAAACAAAAAAAAAAIAAAALAAAAAAAA
AAsAAAAKAAAAAAAAAAoAAAAJAAAAAAAAAAkAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAAM
AAAAAAAAAAwAAAAGAAAAAAAAAAYAAAAFAAAAAAAAAAUAAAABAAAAAQAAAAUAAAAGAAAAAQAA
AAYAAAAHAAAAAQAAAAcAAAAIAAAAAQAAAAgAAAADAAAAAQAAAAMAAAAJAAAAAQAAAAkAAAAK
AAAAAQAAAAoAAAALAAAAAQAAAAsAAAACAAAAAwAAAAgAAAAHAAAAAwAAAAcAAAAEAAAABAAA
AAcAAAAMAAAABgAAAAwAAAAHAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAA
AAAAAACAPy0AAAAEAAAARgI6wLRFNUCcNDlA6NgZwEqZR0AFrYBAMgQrwEqZR0BAOTlAypM5
wA3ALUCcNDlAstozwFsZgz+cNDlA9082wAAAAABAOTlA0yoTwEqZR0CH9odAgOm1PUqZR0CS
S4BAgI/DvwAAAAAad7RAgOm1PQAAAABBAqZAjTEEwEqZR0DNxYdAc924v2Qmpj5KMrlAgOm1
PduAK0Bt0Y1AasyivwAAAABrorVAgOm1PZKZhT/5EKtATgAAAAAAAAABAAAAAgAAAAAAAAAC
AAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAAAQAAAAEAAAAGAAAACgAA
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
AA==</SharedString>
		<SharedString md5="P5wVyID+FvJYeh1t4R3dWw==">Q1NHUEhTBwAAAAJzdRFCjU2Ju1u2sbsl3ho7ZXHXQhupz8CQn8NALNpmQmR/6EEtt6VCEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP2MAAAAEAAAAqZYhv0776b9M
YR5Af/+pv3mq0b9RDgBARenxviX/QMChof0/wMAIPrjcEMBhaxFATzZ1PoSARr8+Ag5AgoYM
v7jmaj2TawFAZ7rIv1H6A78ODWg/bXfFv8mgcb/aEHY8ZAZwvxF6N8DdtIw/gdt9vzOJ2j9h
wf0+RXAIvmVKQ8DmZjs/I9UlP4P2LMBBCVo/CMpvP47qp78yrMg/CGOCP+vPEj++wI4/RXAI
P2xL3D+SQm0/l2iDvgfp9T91BUw/TFGjvxWBrD+QuKK+CMpvv5bqpz8yrMi/CGOCv9vPEr/e
sI6/VVY2vwJfD8DWGHK+RXAIPmlKQ0AmRzu//Cv+vqeULEAB4rW/l2iDPv/o9b+15Uu/V7mg
Pw7avrxWE82/TFGjPw2BrL8Q+KI+bXfFP9mgcT/TIG68fKWXP41/LUBwD8e/wMAIvrzcEEBx
YxHAtU+Nvgd+ob2iZQDARenxPin/QEChof2/goYMP7jlar2TawHAqZYhP1b76T9MYR7AZ7rI
P2H6Az9N7We/ugAAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAE
AAAABQAAAAAAAAAFAAAAAQAAAAEAAAAGAAAABwAAAAEAAAAHAAAACAAAAAEAAAAIAAAAAgAA
AAEAAAAFAAAACQAAAAEAAAAJAAAABgAAAAIAAAAKAAAACwAAAAIAAAALAAAAAwAAAAIAAAAI
AAAACgAAAAMAAAALAAAADAAAAAMAAAAMAAAABAAAAAQAAAAMAAAADQAAAAQAAAANAAAADgAA
AAQAAAAOAAAABQAAAAUAAAAOAAAADwAAAAUAAAAPAAAACQAAAAYAAAAJAAAAEAAAAAYAAAAQ
AAAABwAAAAcAAAAQAAAAEQAAAAcAAAARAAAAEgAAAAcAAAASAAAAEwAAAAcAAAATAAAACAAA
AAgAAAATAAAACgAAAAkAAAAPAAAAFAAAAAkAAAAUAAAAFQAAAAkAAAAVAAAAEAAAAAoAAAAT
AAAAFgAAAAoAAAAWAAAACwAAAAsAAAAWAAAAFwAAAAsAAAAXAAAAGAAAAAsAAAAYAAAADAAA
AAwAAAAYAAAAGQAAAAwAAAAZAAAADQAAAA0AAAAZAAAADgAAAA4AAAAaAAAAFAAAAA4AAAAU
AAAADwAAAA4AAAAZAAAAGgAAABAAAAAVAAAAEQAAABEAAAAVAAAAGwAAABEAAAAbAAAAHAAA
ABEAAAAcAAAAEgAAABIAAAAcAAAAEwAAABMAAAAcAAAAFgAAABQAAAAdAAAAFQAAABQAAAAa
AAAAHQAAABUAAAAdAAAAGwAAABYAAAAcAAAAHgAAABYAAAAeAAAAFwAAABcAAAAfAAAAGgAA
ABcAAAAaAAAAIAAAABcAAAAgAAAAGAAAABcAAAAeAAAAHwAAABgAAAAgAAAAGQAAABkAAAAg
AAAAGgAAABoAAAAfAAAAHQAAABsAAAAdAAAAHwAAABsAAAAfAAAAHAAAABwAAAAfAAAAHgAA
AA==</SharedString>
		<SharedString md5="hVCt68BLrBLnQYp7xxMLCQ==">Q1NHUEhTBwAAAAJmBWFBij79OooIiT5wCYu9OX+/QfGMV79dig9A7rdPQT4abkDtVYFBEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPycAAAAEAAAAy7xav040b78+
KPc/6HaHv/0D6j1K3h8+FinUvo+fFsDjDxQ/cPPhPo/h47/fvHo/70BgPhGAlD/yVbQ/ze7R
vsqurT/Ecsc/x1cFv5OfFkBFB+k+YscbvxJqzj6PRZW//51fPomfFr/P2fK/wVxuPw28K70c
/9G/6HaHP0v+sz5k3oe+RA1GP6IEEEAq2p6/eLopPsBoE0A+KPe/QgAAAAAAAAABAAAAAgAA
AAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAABgAAAAAAAAAG
AAAAAQAAAAEAAAAGAAAABwAAAAEAAAAHAAAAAgAAAAIAAAAHAAAACAAAAAIAAAAIAAAAAwAA
AAMAAAAIAAAACQAAAAMAAAAJAAAACgAAAAMAAAAKAAAABAAAAAQAAAALAAAABgAAAAQAAAAG
AAAABQAAAAQAAAAKAAAACwAAAAYAAAALAAAADAAAAAYAAAAMAAAABwAAAAcAAAAMAAAACAAA
AAgAAAAMAAAACQAAAAkAAAAMAAAACwAAAAkAAAALAAAACgAAAA==</SharedString>
		<SharedString md5="kIvk4Xlu5M1i0ceEo2qP0A==">Q1NHUEhTBwAAAAK+rlFE33SqPBo5hb7Uf3E+UeueRi5BJUQARAREDqxMRsbEkkVe+lRGEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP0sAAAAEAAAAt5qqP3CAOMBK
fP1A5qt2QAAQz7ocKxxA9o/qPwAQz7q+/KtAJltKPwAQz7qCydFAQJ2OPQAQz7pSFtZAQJ2O
PUCynb/BH+pAQJ2OPZaoSsAw7vRA4A2ePa027sCRMeVADW4hQPO/scBzp8xAUlqGQAAQz7oI
wuU/qCaLQAAQz7pE6js/QJ2OPX1a4sBE6js/QJ2OPfD17cDOK+VAQJ2OPUEj7sB2A+VAQJ2O
PQxX7sBSXORAP5sSQCAvAcGEaCRAYvd2QP3uq8Bm3gtAGnuKQAAQz7rqhrE/6i2BQEKAccBE
6js/l7TSP7Qc48BE6js/QJ2OPRyT88D4n+A/QJ2OPZm6AMHkCSVArmEQQNbe2MBE6js/j3My
QAQjzcBE6js/D4B0QBkVmMBE6js/igAAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAAD
AAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAABgAAAAAAAAAGAAAABwAAAAAAAAAHAAAACAAA
AAAAAAAIAAAAAQAAAAEAAAAIAAAACQAAAAEAAAAJAAAAEQAAAAEAAAARAAAACgAAAAEAAAAK
AAAABAAAAAEAAAAEAAAAAwAAAAEAAAADAAAAAgAAAAQAAAAKAAAACwAAAAQAAAALAAAAFAAA
AAQAAAAUAAAAFQAAAAQAAAAVAAAADgAAAAQAAAAOAAAADQAAAAQAAAANAAAADAAAAAQAAAAM
AAAABgAAAAQAAAAGAAAABQAAAAYAAAAMAAAABwAAAAcAAAANAAAADgAAAAcAAAAOAAAADwAA
AAcAAAAPAAAACAAAAAcAAAAMAAAADQAAAAgAAAAPAAAAEAAAAAgAAAAQAAAAEQAAAAgAAAAR
AAAACQAAAAoAAAARAAAAEAAAAAoAAAAQAAAAEgAAAAoAAAASAAAAGAAAAAoAAAAYAAAAFwAA
AAoAAAAXAAAAFgAAAAoAAAAWAAAAEwAAAAoAAAATAAAACwAAAAsAAAATAAAAFAAAAA4AAAAV
AAAADwAAAA8AAAATAAAAFgAAAA8AAAAWAAAAFwAAAA8AAAAXAAAAGAAAAA8AAAAYAAAAEAAA
AA8AAAAVAAAAFAAAAA8AAAAUAAAAEwAAABAAAAAYAAAAEgAAABAAAAAAAAAAAAAAAAAAAAAA
AAAAEAAAAAAAAAAAAAAAAAAAAAAAgD9CAAAABAAAACDmjD1RtErAbPT0QECdjj3cr52/Uh3q
QNZQX78AAAAA/LfbQKyfGMAAAAAA+J7PQFJMQ8APknfAEtzfQECdjj2Y9+3AbDHlQECdjj0A
AAAACCDWQCUKXMAAAAAAkjKbQHgNGcDm+tPAXnCqQBetd8AAAAAAMKM8QBBehcC0Sk+/MLw7
Pw7Qg8AWIeC/MLw7PxoCesCCASDAMLw7P0Cdjj3CJO7AkgrlQL6xhsAAAAAAMLw7P0Cdjj1e
X+LAMLw7P2I+m785eQDBXmUlQECdjj1iWO7AhF7kQIUXQsDh2YPAMLw7P0Cdjj00wADBkQwl
QJzjYb846+HAMLw7P13wyb9oQsjAMLw7P3gAAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAA
AAAAAwAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAAAAEAAAABAAAABQAAAA0AAAABAAAADQAA
ABEAAAABAAAAEQAAABMAAAABAAAAEwAAAA8AAAABAAAADwAAAAYAAAABAAAABgAAAAIAAAAC
AAAABgAAAA4AAAACAAAADgAAAAkAAAACAAAACQAAAAcAAAACAAAABwAAAAMAAAADAAAABwAA
AAQAAAAEAAAACAAAAAUAAAAEAAAABwAAAAkAAAAEAAAACQAAAAoAAAAEAAAACgAAAAsAAAAE
AAAACwAAAAwAAAAEAAAADAAAAAgAAAAFAAAACAAAAA0AAAAGAAAADwAAAA4AAAAIAAAAEAAA
ABEAAAAIAAAAEQAAAA0AAAAIAAAADAAAABAAAAAJAAAADgAAAAoAAAAKAAAADgAAAA8AAAAK
AAAADwAAABQAAAAKAAAAFAAAABUAAAAKAAAAFQAAABIAAAAKAAAAEgAAAAwAAAAKAAAADAAA
AAsAAAAMAAAAEgAAABAAAAAPAAAAEwAAABQAAAAQAAAAEwAAABEAAAAQAAAAEgAAABUAAAAQ
AAAAFQAAABQAAAAQAAAAFAAAABMAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAA
AAAAAAAAAIA/UQAAAAQAAACSiovAAAAAAAD0Br8zb4zAAAAAANAH5L4egY/A7PY5QKA6vr2C
kIrAdJ1DQAD0Br+PW4xAAAAAAAD0Br/tmXfAAAAAABC0PECu+FvAAAAAAEA4m0ANcGzA38gk
QHQLW0ARKA3AEnbOQOgDsT76Xve/Yh7aQAD0Br9Wd4HAq0xjQAD0Br8SnY1AkProPgD0Br+4
dYpAAAAAAFl6sT8aixjAAAAAAFecz0AUywbA3ZbOP/zYyEAa1IA96Rx3QCBUl0CKBxq/wibR
QAD0Br8gwXFATE4PQAD0Br+MKYxAVOUZPyEVpj9OVIZAAAAAAJXS5T8QzF6/AAAAAEy/20DA
Fko/AAAAAKDP0UACc+o/AAAAAP8CrEBZ9SZAV+ePQEjLsz/EvZo/WoG8QAD0Br/2NyNA3Yye
QAD0Br+YqnZAAAAAAFEvHECWAAAAAAAAAAEAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAK
AAAAAAAAAAoAAAAJAAAAAAAAAAkAAAAQAAAAAAAAABAAAAAYAAAAAAAAABgAAAAZAAAAAAAA
ABkAAAARAAAAAAAAABEAAAALAAAAAAAAAAsAAAAEAAAAAAAAAAQAAAAMAAAAAAAAAAwAAAAT
AAAAAAAAABMAAAAaAAAAAAAAABoAAAAWAAAAAAAAABYAAAAVAAAAAAAAABUAAAAUAAAAAAAA
ABQAAAANAAAAAAAAAA0AAAAGAAAAAAAAAAYAAAAFAAAAAAAAAAUAAAABAAAAAQAAAAUAAAAC
AAAAAgAAAAUAAAAGAAAAAgAAAAYAAAAHAAAAAgAAAAcAAAAIAAAAAgAAAAgAAAAJAAAAAgAA
AAkAAAAKAAAAAgAAAAoAAAADAAAABAAAAAsAAAAMAAAABgAAAA0AAAAOAAAABgAAAA4AAAAH
AAAABwAAAA4AAAAIAAAACAAAAA4AAAAPAAAACAAAAA8AAAAJAAAACQAAAA8AAAAQAAAACwAA
ABEAAAASAAAACwAAABIAAAAMAAAADAAAABIAAAATAAAADQAAABQAAAAOAAAADgAAABQAAAAP
AAAADwAAABUAAAAWAAAADwAAABYAAAAXAAAADwAAABcAAAAQAAAADwAAABQAAAAVAAAAEAAA
ABcAAAAYAAAAEQAAABkAAAASAAAAEgAAABkAAAAXAAAAEgAAABcAAAAWAAAAEgAAABYAAAAa
AAAAEgAAABoAAAATAAAAFwAAABkAAAAYAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAA
AAAAAAAAAAAAAACAP1EAAAAEAAAAg/zWPwAAgLQ9jc7AG9CHQAAAgLQFhUzAes4IQObxE8Bw
rbLA5k/zPgAwNrqTN8TAUcThvwAAgLT+tKrAyq+NQAAAgLSsPDrAulcQQMre2MAwvDs/qI3S
P3Ik48AwvDs/6Dj5vI7gkcCyJIHAXotuQE9mUcCEtS7AvhMnwH7cnb+6f5DAjIYlwAAAgLQB
M5jAwpKOQAAAgLReDSzAul0yQCgnzcAwvDs/1qthv2Tr4cAwvDs/G9TJv6JIyMAwvDs/DGt0
QJgUmMD0Xzs/Gh6LwKQ4pr84gBq/FyJ9wAAAgLSU9Na/JxyLQAAAgLQwvDs/vCKBQKVqccD0
Xzs/KhBCwFnkg8AwvDs/P6+GwAAAgLQwvDs/pnmMwAAAgLSYquS+gvl5wIbzH8AwvDs/l82D
wJUH4L8wvDs/ylqFwAxmT78wvDs/lgAAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAAD
AAAABAAAAAAAAAAEAAAACwAAAAAAAAALAAAAEgAAAAAAAAASAAAAFwAAAAAAAAAXAAAAFgAA
AAAAAAAWAAAAEwAAAAAAAAATAAAADAAAAAAAAAAMAAAABQAAAAAAAAAFAAAAAQAAAAEAAAAF
AAAAAgAAAAIAAAAGAAAABwAAAAIAAAAHAAAACAAAAAIAAAAIAAAAAwAAAAIAAAAFAAAACQAA
AAIAAAAJAAAABgAAAAMAAAAIAAAACgAAAAMAAAAKAAAABAAAAAQAAAAKAAAACwAAAAUAAAAM
AAAACQAAAAYAAAAJAAAADQAAAAYAAAANAAAAEwAAAAYAAAATAAAAFgAAAAYAAAAWAAAAGgAA
AAYAAAAaAAAAGQAAAAYAAAAZAAAAGAAAAAYAAAAYAAAAFQAAAAYAAAAVAAAADwAAAAYAAAAP
AAAADgAAAAYAAAAOAAAABwAAAAcAAAAOAAAACAAAAAgAAAAOAAAADwAAAAgAAAAPAAAACgAA
AAkAAAAMAAAAEAAAAAkAAAAQAAAADQAAAAoAAAAPAAAAEQAAAAoAAAARAAAACwAAAAsAAAAR
AAAAEgAAAAwAAAATAAAAFAAAAAwAAAAUAAAAEAAAAA0AAAAQAAAAEwAAAA8AAAAVAAAAEQAA
ABAAAAAUAAAAEwAAABEAAAAWAAAAFwAAABEAAAAXAAAAEgAAABEAAAAVAAAAGAAAABEAAAAY
AAAAGQAAABEAAAAZAAAAGgAAABEAAAAaAAAAFgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAA
AAAAAAAAAAAAAAAAAAAAgD9OAAAABAAAADDze78gLwFBSE1jwBpQ97+RFNpAYCMHvz3+Gb+i
INFAYCMHv4K1mj8EhLxAYCMHv80kG0Bdp71AKECUwM7AML3F59dAVgHPwDtIH8CIb5tA0Hq2
wH2JisDKpUNAYCMHv0FsgcCcaWNAYCMHv6I7I0BohZ5AYCMHv6W8aD+UKXlASnz9wEHMcUDG
WA9AYCMHvwZ6j0B4v4Y+cUg7wNF8JcAAIE86CjCYwGQVfcAAIE860gvXv8yIi8CAYps9YCMH
v9gZ1z8AIE861YTOwBza8z4AAAAAnzDEwGy04b8AIE86BreqwK+QjUBwe+k+YCMHvw2tjUAA
IE86S1s6wJHNh0AAIE86IZtMwJQ7jUBIhqc+YCMHv7tfjEAAIE86YCMHv+aIjkAAIE86Vwss
wMyIi8AAIE86YCMHv5AAAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAA
AAAABAAAAAUAAAAAAAAABQAAAAYAAAAAAAAABgAAAAcAAAAAAAAABwAAAAgAAAAAAAAACAAA
AAEAAAABAAAACAAAAAcAAAABAAAABwAAAA8AAAABAAAADwAAABkAAAABAAAAGQAAABcAAAAB
AAAAFwAAABYAAAABAAAAFgAAABMAAAABAAAAEwAAAAsAAAABAAAACwAAAAkAAAABAAAACQAA
AAMAAAABAAAAAwAAAAIAAAADAAAACQAAAAQAAAAEAAAACgAAAAUAAAAEAAAACQAAAAsAAAAE
AAAACwAAAAwAAAAEAAAADAAAAAoAAAAFAAAACgAAAAYAAAAGAAAADQAAAA4AAAAGAAAADgAA
AA8AAAAGAAAADwAAAAcAAAAGAAAACgAAAA0AAAAKAAAADAAAABAAAAAKAAAAEAAAABEAAAAK
AAAAEQAAABIAAAAKAAAAEgAAAA0AAAALAAAAEwAAAAwAAAAMAAAAFAAAABUAAAAMAAAAFQAA
ABAAAAAMAAAAEwAAABYAAAAMAAAAFgAAABcAAAAMAAAAFwAAABgAAAAMAAAAGAAAABQAAAAN
AAAAEgAAABEAAAANAAAAEQAAAA4AAAAOAAAAEQAAABkAAAAOAAAAGQAAAA8AAAAQAAAAFQAA
ABEAAAARAAAAGAAAABcAAAARAAAAFwAAABkAAAARAAAAFQAAABQAAAARAAAAFAAAABgAAAA=</SharedString>
		<SharedString md5="oa+n2IgSm65Ni/7mWk7lOw==">Q1NHUEhTBgAAAMCdsUDEVYQ8EkTvuSw6KbychIhAwB2UvODkLT0W44pAYLCQPADQiEAQAAAA
AAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/GwAAAAQAAAAAAAAAAAAAvwAA
QD8AAAAAAAAAvwAAgD8AAAAAAEBNuAAAQD////8+AAAAvwAAQD////8+AAAAvwAAgD8AAAAA
AAAAAAAAgD9+0/U+AAAAAAAAQD////8+AAAAAAAAQD////8+AAAAAAAAgD8qAAAAAAAAAAEA
AAAFAAAAAAAAAAUAAAACAAAAAAAAAAIAAAAGAAAAAAAAAAYAAAAHAAAAAAAAAAcAAAADAAAA
AAAAAAMAAAAEAAAAAAAAAAQAAAABAAAAAQAAAAQAAAAIAAAAAQAAAAgAAAAFAAAAAgAAAAUA
AAAGAAAAAwAAAAcAAAAIAAAAAwAAAAgAAAAEAAAABQAAAAgAAAAHAAAABQAAAAcAAAAGAAAA
EAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPxsAAAAEAAAAAAAAAAAA
AD8AAIA/AAAAAAAAAD8AAEA/AAAAvwAAAD8AAIA/AAAAAAAAAAAAAIA/AAAAAABATTgAAEA/
AAAAvwAAAD8AAEA/AAAAvwAAAAAAAIA/eBsDvQAAAAAAAEA/AAAAvwAAAAAAAEA/KgAAAAAA
AAABAAAABQAAAAAAAAAFAAAAAgAAAAAAAAACAAAABgAAAAAAAAAGAAAAAwAAAAAAAAADAAAA
BAAAAAAAAAAEAAAAAQAAAAEAAAAEAAAABwAAAAEAAAAHAAAACAAAAAEAAAAIAAAABQAAAAIA
AAAFAAAACAAAAAIAAAAIAAAABgAAAAMAAAAGAAAACAAAAAMAAAAIAAAABwAAAAMAAAAHAAAA
BAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD9OAAAABAAAAJb5
/74AAAA/AACAPwAATbgAAAA/AACAP5b5/74AAEA/AACAP5b5/74AAIA/AAAAAAAATbgAAEA/
AACAPwAATbgAAIA/AAAAAJb5/75XkFA/est9P5b5/74AAIA/AABAPwAATbhXkFA/est9PwAA
TbgAAIA/AABAP5b5/74LaF0/fnt4P5b5/74oQn4/eiFNPwAATbgZKX8/AVdGPwAATbgAAGA/
OmF3P5b5/74AAGA/OmF3P5b5/756y30/goNQPwAATbh6y30/goNQPwAATbizKmc/VuRxP5b5
/75Hdmo/1WJvP5b5/75orXs/bLNVPwAATbjaanc/AABgPwAATbgkO20/JDttP5b5/74u92s/
vjtuP5b5/77aanc/AABgP5b5/74KZm8/EnNqP5b5/74kO20/JDttP5AAAAAAAAAAAQAAAAQA
AAAAAAAABAAAAAIAAAAAAAAAAgAAAAYAAAAAAAAABgAAAAoAAAAAAAAACgAAAA4AAAAAAAAA
DgAAABIAAAAAAAAAEgAAABYAAAAAAAAAFgAAABkAAAAAAAAAGQAAABgAAAAAAAAAGAAAABcA
AAAAAAAAFwAAABMAAAAAAAAAEwAAAA8AAAAAAAAADwAAAAsAAAAAAAAACwAAAAcAAAAAAAAA
BwAAAAMAAAAAAAAAAwAAAAUAAAAAAAAABQAAAAEAAAABAAAABQAAAAkAAAABAAAACQAAAAwA
AAABAAAADAAAABAAAAABAAAAEAAAABQAAAABAAAAFAAAABUAAAABAAAAFQAAABEAAAABAAAA
EQAAAA0AAAABAAAADQAAAAgAAAABAAAACAAAAAQAAAACAAAABAAAAAgAAAACAAAACAAAAAYA
AAADAAAABwAAAAkAAAADAAAACQAAAAUAAAAGAAAACAAAAAoAAAAHAAAACwAAAAwAAAAHAAAA
DAAAAAkAAAAIAAAADQAAAAoAAAAKAAAADQAAAA4AAAALAAAADwAAABAAAAALAAAAEAAAAAwA
AAANAAAAEQAAABIAAAANAAAAEgAAAA4AAAAPAAAAEwAAABAAAAAQAAAAEwAAABQAAAARAAAA
FQAAABYAAAARAAAAFgAAABIAAAATAAAAFwAAABQAAAAUAAAAFwAAABgAAAAUAAAAGAAAABUA
AAAVAAAAGAAAABkAAAAVAAAAGQAAABYAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAA
AAAAAAAAAAAAAIA/YAAAAAQAAAD///8+AAAAvwAAgD8AIE04AAAAvwAAgD////8+AABAvwAA
gD////8+AAAAvwAAQD8AIE04AABAvwAAgD8AIE04AAAAvwAAQD8AAACzAACAvwAAAACV+f8+
+PFNv0olfj////8+V5BQv3rLfT////8+AACAvwAAAAAAIE04V5BQv3rLfT8AIE04AACAvwAA
QD8AIE04est9v4KDUD8AIE04brZ6vwUIWD8AIE042mp3vwAAYD8AIE04JDttvyQ7bT8AIE04
7eBmvxIecj8AIE04AABgvzphdz8AIE046NdXv6zJej+V+f8+mf5Sv+DKfD////8++Eddv1KI
eD////8+AACAvwAAQD////8+HjJ+v8ihTT////8+est9v4KDUD////8+q8d8v24LUz////8+
HYV4vwJYXT////8+2mp3vwAAYD+V+f8+U99uv9wZaz+V+f8+JDttvyQ7bT////8+DGlkv50F
dD////8++kpiv5emdT////8+AABgvzphdz+0AAAAAAAAAAEAAAAEAAAAAAAAAAQAAAACAAAA
AAAAAAIAAAAIAAAAAAAAAAgAAAAUAAAAAAAAABQAAAAfAAAAAAAAAB8AAAAeAAAAAAAAAB4A
AAAdAAAAAAAAAB0AAAAaAAAAAAAAABoAAAAZAAAAAAAAABkAAAAYAAAAAAAAABgAAAAXAAAA
AAAAABcAAAAWAAAAAAAAABYAAAAVAAAAAAAAABUAAAAJAAAAAAAAAAkAAAADAAAAAAAAAAMA
AAAFAAAAAAAAAAUAAAABAAAAAQAAAAUAAAAGAAAAAQAAAAYAAAAEAAAAAgAAAAQAAAAHAAAA
AgAAAAcAAAAIAAAAAwAAAAkAAAAGAAAAAwAAAAYAAAAFAAAABAAAAAYAAAAKAAAABAAAAAoA
AAAHAAAABgAAAAkAAAAVAAAABgAAABUAAAALAAAABgAAAAsAAAAMAAAABgAAAAwAAAANAAAA
BgAAAA0AAAAOAAAABgAAAA4AAAAPAAAABgAAAA8AAAAQAAAABgAAABAAAAARAAAABgAAABEA
AAASAAAABgAAABIAAAAKAAAABwAAAAoAAAAIAAAACAAAAAoAAAATAAAACAAAABMAAAAUAAAA
CgAAABIAAAATAAAACwAAABUAAAAWAAAACwAAABYAAAAMAAAADAAAABYAAAAXAAAADAAAABcA
AAAYAAAADAAAABgAAAANAAAADQAAABgAAAAOAAAADgAAABkAAAAaAAAADgAAABoAAAAbAAAA
DgAAABsAAAAPAAAADgAAABgAAAAZAAAADwAAABsAAAAcAAAADwAAABwAAAAdAAAADwAAAB0A
AAAeAAAADwAAAB4AAAAQAAAAEAAAAB4AAAARAAAAEQAAAB4AAAAfAAAAEQAAAB8AAAAUAAAA
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
AAAOAAAADgAAABIAAAATAAAADwAAABQAAAAVAAAADwAAABUAAAAWAAAADwAAABYAAAAQAAAA
EgAAABcAAAATAAAAEwAAABcAAAAYAAAAEwAAABgAAAAUAAAAFAAAABgAAAAZAAAAFAAAABkA
AAAVAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP1cAAAAEAAAA
AAAAAAAAgD8AAAAAAAAAAAAAgD8AAEC/AAAAvwAAgD8AAAAAAAAAAAAAAAAAAIC/AAAAAHrL
fT/siVC/AAAAvwAAgD8AAEC/AAAAvwAAAAAAAIC/AAAAAAAAQD8AAIC/AAAAvwy+fD+sHlO/
AAAAv3rLfT/siVC/AAAAAFqWej8sSFi/AAAAvwAAQD8AAIC/AAAAv0XITT+0K36/AAAAAIKD
UD96y32/AAAAv357eD/WZF2/AAAAADphdz8AAGC/AAAAv4KDUD96y32/AAAAv/5RUz/Nqny/
AAAAALfbWD+eXHq/AAAAvzphdz8AAGC/AAAAACQ7bT8kO22/AAAAv9a5dT+GNGK/AAAAvwAA
YD86YXe/AAAAAAAAYD86YXe/AAAAvyQ7bT8kO22/AAAAAEUdZj8IuHK/AAAAvyDgaj9wD2+/
AAAAvySQZT8WJXO/AAAAAEJuYj/ujHW/ogAAAAAAAAABAAAABQAAAAAAAAAFAAAAAgAAAAAA
AAACAAAABgAAAAAAAAAGAAAAAwAAAAAAAAADAAAABwAAAAAAAAAHAAAADQAAAAAAAAANAAAA
EgAAAAAAAAASAAAAFwAAAAAAAAAXAAAAHAAAAAAAAAAcAAAAGQAAAAAAAAAZAAAAFAAAAAAA
AAAUAAAADwAAAAAAAAAPAAAACgAAAAAAAAAKAAAABAAAAAAAAAAEAAAAAQAAAAEAAAAEAAAA
CQAAAAEAAAAJAAAABQAAAAIAAAAFAAAACQAAAAIAAAAJAAAACAAAAAIAAAAIAAAADgAAAAIA
AAAOAAAAEwAAAAIAAAATAAAAFQAAAAIAAAAVAAAAGAAAAAIAAAAYAAAAGgAAAAIAAAAaAAAA
GwAAAAIAAAAbAAAAFgAAAAIAAAAWAAAAEQAAAAIAAAARAAAAEAAAAAIAAAAQAAAADAAAAAIA
AAAMAAAACwAAAAIAAAALAAAABgAAAAMAAAAGAAAACwAAAAMAAAALAAAABwAAAAQAAAAIAAAA
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
FAAAAAUAAAAUAAAABgAAAAYAAAAUAAAAFQAAAAYAAAAVAAAABwAAAAcAAAAVAAAACAAAAAgA
AAAVAAAACgAAAAgAAAAKAAAACQAAAAoAAAAVAAAAFgAAAAoAAAAWAAAACwAAAAsAAAAWAAAA
FwAAAAsAAAAXAAAAGAAAAAsAAAAYAAAAGQAAAAsAAAAZAAAADQAAAAsAAAANAAAADAAAAA0A
AAAZAAAAGgAAAA0AAAAaAAAAGwAAAA0AAAAbAAAADgAAAA4AAAAbAAAADwAAAA8AAAAcAAAA
HQAAAA8AAAAdAAAAEAAAAA8AAAAbAAAAHgAAAA8AAAAeAAAAOAAAAA8AAAA4AAAAMwAAAA8A
AAAzAAAAHAAAABEAAAAdAAAAHAAAABEAAAAcAAAAHwAAABEAAAAfAAAAIAAAABEAAAAgAAAA
IQAAABEAAAAhAAAAEgAAABIAAAAhAAAAIgAAABIAAAAiAAAAEwAAABMAAAAiAAAAIwAAABMA
AAAjAAAAFAAAABQAAAAjAAAAFQAAABUAAAAjAAAAJAAAABUAAAAkAAAAJQAAABUAAAAlAAAA
FgAAABYAAAAlAAAAJgAAABYAAAAmAAAAJwAAABYAAAAnAAAAFwAAABcAAAAoAAAAGAAAABcA
AAAnAAAAKAAAABgAAAAaAAAAGQAAABgAAAAoAAAAGgAAABoAAAAoAAAAKQAAABoAAAApAAAA
KgAAABoAAAAqAAAAKwAAABoAAAArAAAALAAAABoAAAAsAAAALQAAABoAAAAtAAAALgAAABoA
AAAuAAAALwAAABoAAAAvAAAAMAAAABoAAAAwAAAAGwAAABsAAAAwAAAASQAAABsAAABJAAAA
MQAAABsAAAAxAAAAHgAAABwAAAAyAAAAHwAAABwAAAAzAAAAMgAAAB4AAAAxAAAANAAAAB4A
AAA0AAAANQAAAB4AAAA1AAAANgAAAB4AAAA2AAAANwAAAB4AAAA3AAAAOAAAAB8AAAAyAAAA
OQAAAB8AAAA5AAAAOgAAAB8AAAA6AAAAOwAAAB8AAAA7AAAAIAAAACAAAAA7AAAAPAAAACAA
AAA8AAAAPQAAACAAAAA9AAAAPgAAACAAAAA+AAAAIgAAACAAAAAiAAAAIQAAACIAAAA+AAAA
PwAAACIAAAA/AAAAIwAAACMAAAA/AAAAQAAAACMAAABAAAAAQQAAACMAAABBAAAAJAAAACQA
AABBAAAAQgAAACQAAABCAAAAJQAAACUAAABCAAAAJgAAACYAAABCAAAAQwAAACYAAABDAAAA
RAAAACYAAABEAAAAJwAAACcAAAAqAAAAKQAAACcAAAApAAAAKAAAACcAAABEAAAARQAAACcA
AABFAAAAKgAAACoAAABFAAAAKwAAACsAAABFAAAALAAAACwAAABFAAAARgAAACwAAABGAAAA
LQAAAC0AAABGAAAALgAAAC4AAABGAAAARwAAAC4AAABHAAAASAAAAC4AAABIAAAALwAAAC8A
AABIAAAAMAAAADAAAABIAAAARwAAADAAAABHAAAASQAAADEAAABJAAAANAAAADIAAAAzAAAA
OQAAADMAAAA4AAAAOgAAADMAAAA6AAAAOQAAADQAAABJAAAASgAAADQAAABKAAAANQAAADUA
AABKAAAANgAAADYAAABLAAAANwAAADYAAABKAAAASwAAADcAAABLAAAAOAAAADgAAABLAAAA
OgAAADoAAABLAAAAOwAAADsAAABLAAAATAAAADsAAABMAAAAPAAAADwAAABMAAAAPQAAAD0A
AABMAAAATQAAAD0AAABNAAAATgAAAD0AAABOAAAATwAAAD0AAABPAAAAPwAAAD0AAAA/AAAA
PgAAAD8AAABPAAAAQAAAAEAAAABPAAAAQQAAAEEAAABPAAAAQwAAAEEAAABDAAAAQgAAAEMA
AABPAAAATQAAAEMAAABNAAAAUAAAAEMAAABQAAAARAAAAEQAAABQAAAARQAAAEUAAABQAAAA
RgAAAEYAAABQAAAARwAAAEcAAABQAAAAUQAAAEcAAABRAAAASQAAAEkAAABRAAAASgAAAEoA
AABRAAAATAAAAEoAAABMAAAASwAAAEwAAABRAAAAUAAAAEwAAABQAAAATQAAAE0AAABPAAAA
TgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD/bAAAABAAAAAAA
QD8AAEA/AACAPwAAUD/siVA/nbB7PwAAQD/siVA/est9PwAAAD8AAEA/AACAPwAAQD8AAAAA
AACAP1eQUD8AAEA/est9P73lXj+Cg1A/hIZ1P5xYTj8AAGA/hIZ1PwAAAD+sHlM/DL58PwAA
AD/siVA/est9PwAAQD8AAGA/OmF3PwAAAD8AAAAAAACAP1eQUD8AAAAAest9PwAAYD8AAEA/
OmF3P52waz+Cg1A/0rNrPx4xZz8AAGA/sypnP52wWz8AAGA/y/xvPyQ7bT8AAEA/JDttPyI4
WD+oGGk/xfJpP1eQUD8kO20/nrJpP9cQTD9tYGs/phRtPwAAQD8kO20/JDttPwAAAD8AAGA/
OmF3PwAAAD8MaWQ/nQV0PwAAAD8AAAAAAABAPwAAYD8AAAAAOmF3P4SGdT+Cg1A/veVeP9pq
dz8AAEA/AABgPwAAcD8AAGA/nbBbP/aYaT/2mGk/MPtXP/2lZD/IomQ/yKJkPwAAYD8bLWs/
YPRhPyQ7bT8AAAAAJDttPwAAYD/L/G8/nbBbP1eQUD+EhnU/veVePwAAAD+dBXQ/DGlkPwAA
AD8kO20/JDttPwAAQD86YXc/AABgPwAAgD8AAAAAAAAAAAAAAD8AAIA/AAAAAJ2wez+Cg1A/
y/xPP3rLfT8AAEA/goNQP9pqdz8AAAAAAABgP7bZej8AAAAAoLRXP4SGdT8AAGA//E5OP9Jd
bD+dWmw/uuBLPwAAYD+EhnU//E5OP1eQUD+dsHs/y/xPPwAAQD96y30/goNQPwAAAD86YXc/
AABgPwAAAD9+e3g/1mRdPwAAAD8Mvnw/rB5TPwAAgD8AAEA/AAAAAAAAgD8AAAAAAABAPwAA
AD8AAIA/AABAPwAAQD8AAIA/AAAAAHrLfT+Cg1A/AABAP9pqdz8AAGA/AABAPwAAgD8AAEA/
AABAP3rLfT8AAAAAgoNQPyQ7bT8kO20/AABAPwAAYD86YXc/AABAP1eQUD96y30/AABAPwAA
QD8AAIA/AABAPwAAAD96y30/goNQPxR2fz88D0Q/AAAAAFeQUD96y30/AAAAAHrLfT+Cg1A/
AAAAANpqdz8AAGA/AAAAACQ7bT8kO20/AAAAAHgdYT+IjXY/AAAAAAAAYD86YXc/AAAAADav
Xj/G9Hc/AAAAAKoBAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAkAAAAAAAAACQAAAAMAAAAAAAAA
AwAAAAsAAAAAAAAACwAAAAQAAAAAAAAABAAAAAwAAAAAAAAADAAAAAUAAAAAAAAABQAAAAEA
AAABAAAABQAAAAYAAAABAAAABgAAAAcAAAABAAAABwAAAAIAAAACAAAACAAAAAkAAAACAAAA
BwAAAAoAAAACAAAACgAAAAgAAAADAAAACQAAAAgAAAADAAAACAAAABYAAAADAAAAFgAAABcA
AAADAAAAFwAAACQAAAADAAAAJAAAACMAAAADAAAAIwAAADEAAAADAAAAMQAAADIAAAADAAAA
MgAAADMAAAADAAAAMwAAAEAAAAADAAAAQAAAADYAAAADAAAANgAAACcAAAADAAAAJwAAABgA
AAADAAAAGAAAAAsAAAAEAAAACwAAABgAAAAEAAAAGAAAACYAAAAEAAAAJgAAADUAAAAEAAAA
NQAAADsAAAAEAAAAOwAAACsAAAAEAAAAKwAAACoAAAAEAAAAKgAAACAAAAAEAAAAIAAAABkA
AAAEAAAAGQAAAAwAAAAFAAAADAAAABkAAAAFAAAAGQAAAA0AAAAFAAAADQAAAAYAAAAGAAAA
DgAAAA8AAAAGAAAADwAAABAAAAAGAAAAEAAAAAcAAAAGAAAADQAAABEAAAAGAAAAEQAAAA4A
AAAHAAAAEAAAABIAAAAHAAAAEgAAABMAAAAHAAAAEwAAABQAAAAHAAAAFAAAABUAAAAHAAAA
FQAAAAoAAAAIAAAACgAAABYAAAAKAAAAFwAAABYAAAAKAAAAFQAAABcAAAANAAAAGQAAACAA
AAANAAAAIAAAABEAAAAOAAAAGgAAAA8AAAAOAAAAEQAAABsAAAAOAAAAGwAAABoAAAAPAAAA
GgAAABwAAAAPAAAAHAAAAB0AAAAPAAAAHQAAAB4AAAAPAAAAHgAAAB8AAAAPAAAAHwAAABIA
AAAPAAAAEgAAABAAAAARAAAAIAAAACoAAAARAAAAKgAAABsAAAASAAAAHwAAACEAAAASAAAA
IQAAACIAAAASAAAAIgAAABMAAAATAAAAIgAAABQAAAAUAAAAIgAAABUAAAAVAAAAIwAAACQA
AAAVAAAAJAAAABcAAAAVAAAAIgAAACUAAAAVAAAAJQAAACMAAAAYAAAAJwAAACYAAAAaAAAA
KAAAABwAAAAaAAAAGwAAACgAAAAbAAAAKQAAACgAAAAbAAAAKgAAACsAAAAbAAAAKwAAACkA
AAAcAAAALAAAAC0AAAAcAAAALQAAAB0AAAAcAAAAKAAAACwAAAAdAAAAHwAAAB4AAAAdAAAA
LQAAACEAAAAdAAAAIQAAAB8AAAAhAAAALQAAAC4AAAAhAAAALgAAACIAAAAiAAAALwAAADAA
AAAiAAAAMAAAACUAAAAiAAAALgAAAC8AAAAjAAAAJQAAADEAAAAlAAAAMgAAADEAAAAlAAAA
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
AAAeAAAADQAAAB4AAAAfAAAADgAAACAAAAAbAAAADwAAAB8AAAAyAAAADwAAADIAAAAhAAAA
EAAAACMAAAA1AAAAEAAAADUAAAAiAAAAEQAAACIAAAAkAAAAEQAAACQAAAAlAAAAEgAAACUA
AAAmAAAAEgAAACYAAAATAAAAEwAAACYAAAAnAAAAEwAAACcAAAAUAAAAFAAAACcAAAAoAAAA
FAAAACgAAAAVAAAAFQAAACgAAAAWAAAAFgAAACgAAAApAAAAFgAAACkAAAAXAAAAFwAAACkA
AAAaAAAAFwAAABoAAAAYAAAAGQAAACoAAAArAAAAGQAAABoAAAAqAAAAGgAAACkAAAAsAAAA
GgAAACwAAAAqAAAAGwAAACAAAAAtAAAAGwAAAC0AAAAcAAAAHAAAAB4AAAAdAAAAHAAAAC0A
AAAuAAAAHAAAAC4AAAAvAAAAHAAAAC8AAAAwAAAAHAAAADAAAAAeAAAAHgAAADAAAAAxAAAA
HgAAADEAAAAfAAAAHwAAADEAAAAyAAAAIAAAADMAAAAtAAAAIQAAADIAAAA1AAAAIQAAADUA
AAAjAAAAIgAAADQAAAAkAAAAIgAAADUAAAA0AAAAJAAAADYAAAAlAAAAJAAAADQAAAA2AAAA
JQAAADYAAAAmAAAAJgAAADYAAAAnAAAAJwAAADYAAAA3AAAAJwAAADcAAAAoAAAAKAAAADcA
AAA4AAAAKAAAADgAAAApAAAAKQAAADgAAAAsAAAAKgAAADkAAAArAAAAKgAAACwAAAA6AAAA
KgAAADoAAAA7AAAAKgAAADsAAAA5AAAALAAAADgAAAA6AAAALQAAADMAAAA8AAAALQAAADwA
AAA7AAAALQAAADsAAAA6AAAALQAAADoAAAAuAAAALgAAADoAAAA9AAAALgAAAD0AAAAvAAAA
LwAAAD0AAAA+AAAALwAAAD4AAAA/AAAALwAAAD8AAAAwAAAAMAAAAD8AAABAAAAAMAAAAEAA
AAAxAAAAMQAAAEAAAABBAAAAMQAAAEEAAAA0AAAAMQAAADQAAAA1AAAAMQAAADUAAAAyAAAA
NAAAAEEAAAA2AAAANgAAAEEAAABCAAAANgAAAEIAAAA3AAAANwAAAEIAAABDAAAANwAAAEMA
AAA4AAAAOAAAAEMAAABCAAAAOAAAAEIAAAA9AAAAOAAAAD0AAAA6AAAAOQAAADsAAABEAAAA
OwAAADwAAABEAAAAPQAAAEIAAAA+AAAAPgAAAEAAAAA/AAAAPgAAAEIAAABBAAAAPgAAAEEA
AABAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP9gAAAAEAAAA
AABAPwAAgD8AAAAA7IlQP3rLfT8AAAAAAABAPwAAgD8AAEC/AAAAAAAAgD8AAAAAAaxeP8b0
dz8AAAAA7IlQP3rLfT8AAEC/AABAP3rLfT+Cg1C/AAAAAHrLfT/siVC/AAAAAAAAgD8AAEC/
7IlQP52wez/L/E+/AAAAAAAAAAAAAIC/AACAPwAAAAAAQM24AACAP67NVj4AAAAAAABgPzph
dz8AAAAAAABgPzphdz8AAEC/AABgP4SGdT/8Tk6/7IlQP4SGdT+95V6/AABAPzphdz8AAGC/
AAAAAFqWej8sSFi/AAAAAAAAQD8AAIC/AABAPwAAAAAAAIC/AACAPwAAAAAAAEC/AACAPwAA
QD8AAAAAJDttPyQ7bT8AAAAAJDttPyQ7bT8AAEC/AABgP8v8bz+dsFu/nVpsP51abD+64Eu/
7IlQPyQ7bT+esmm/DBRMP21gaz+mFG2/AABgP2y0bD8AAGC/AABAPyQ7bT8kO22/AAAAADph
dz8AAGC/AAAAAIKDUD96y32/AABAPwAAQD8AAIC/7IlQPwAAAAB6y32/5NF9PwAAAADsiVC/
AACAPwAAQD8AAEC/s39/P6zIQz8AAAAAOmF3PwAAYD8AAAAAOmF3PwAAYD8AAEC/hIZ1PwAA
YD/8Tk6/9phpP/aYaT8w+1e/y/xvPwAAYD+dsFu/gi5YP6gYaT/F8mm/nbBbPwAAYD/L/G+/
/E5OPwAAYD+EhnW/yKJkP8iiZD/IomS/AABgPxstaz9g9GG/AABAPwAAYD86YXe/AAAAAEJu
Yj/ujHW/AAAAAEUdZj8IuHK/AAAAACQ7bT8kO22/AAAAALfbWD+eXHq/AABAP4KDUD96y32/
y/xPP4KDUD+dsHu/7IlQPwAAQD96y32/LEhYPwAAAABalnq/5NF9PwAAQD/siVC/OmF3PwAA
AAAAAGC/nbB7P4KDUD/L/E+/est9P4KDUD8AAEC/est9P4KDUD8AAAAAhIZ1P4KDUD+95V6/
sypnPwAAYD+zKme/0rNrP4KDUD/Ss2u/veVeP4KDUD+EhnW/AAAAAAAAYD86YXe/AABgPwAA
QD86YXe/AABgPwAAAAA6YXe/OmF3PwAAQD8AAGC/JDttPwAAAAAkO22/JDttPwAAQD8kO22/
pAEAAAAAAAABAAAABQAAAAAAAAAFAAAAAgAAAAAAAAACAAAACAAAAAAAAAAIAAAAAwAAAAAA
AAADAAAADAAAAAAAAAAMAAAAFgAAAAAAAAAWAAAAJQAAAAAAAAAlAAAAPQAAAAAAAAA9AAAA
JgAAAAAAAAAmAAAAFwAAAAAAAAAXAAAADQAAAAAAAAANAAAABAAAAAAAAAAEAAAAAQAAAAEA
AAAEAAAABQAAAAIAAAAGAAAABwAAAAIAAAAHAAAACAAAAAIAAAAFAAAACQAAAAIAAAAJAAAA
BgAAAAMAAAAIAAAABwAAAAMAAAAHAAAAEgAAAAMAAAASAAAAHwAAAAMAAAAfAAAAMwAAAAMA
AAAzAAAAMgAAAAMAAAAyAAAAMQAAAAMAAAAxAAAAQgAAAAMAAABCAAAANAAAAAMAAAA0AAAA
IAAAAAMAAAAgAAAAEwAAAAMAAAATAAAACgAAAAMAAAAKAAAACwAAAAMAAAALAAAADAAAAAQA
AAANAAAADgAAAAQAAAAOAAAABQAAAAUAAAAOAAAADwAAAAUAAAAPAAAACQAAAAYAAAAJAAAA
EAAAAAYAAAAQAAAAEQAAAAYAAAARAAAAEgAAAAYAAAASAAAABwAAAAkAAAAPAAAAEAAAAAoA
AAATAAAAIQAAAAoAAAAhAAAAFAAAAAoAAAAUAAAAIgAAAAoAAAAiAAAAOAAAAAoAAAA4AAAA
RAAAAAoAAABEAAAARgAAAAoAAABGAAAAOgAAAAoAAAA6AAAAIwAAAAoAAAAjAAAAFQAAAAoA
AAAVAAAACwAAAAsAAAAVAAAAJAAAAAsAAAAkAAAAFgAAAAsAAAAWAAAADAAAAA0AAAAXAAAA
GAAAAA0AAAAYAAAADgAAAA4AAAAYAAAADwAAAA8AAAAZAAAAEAAAAA8AAAAYAAAAGgAAAA8A
AAAaAAAAGQAAABAAAAAbAAAAHAAAABAAAAAcAAAAEQAAABAAAAAZAAAAHQAAABAAAAAdAAAA
GwAAABEAAAAeAAAAMwAAABEAAAAzAAAAHwAAABEAAAAfAAAAEgAAABEAAAAcAAAAHgAAABMA
AAAgAAAANQAAABMAAAA1AAAAIQAAABQAAAAhAAAANwAAABQAAAA3AAAAIgAAABUAAAAjAAAA
OQAAABUAAAA5AAAAJAAAABYAAAAkAAAAJQAAABcAAAAmAAAAJwAAABcAAAAnAAAAGAAAABgA
AAAnAAAAKAAAABgAAAAoAAAAGgAAABkAAAAaAAAAKQAAABkAAAApAAAAHQAAABoAAAAoAAAA
KgAAABoAAAAqAAAAKQAAABsAAAAdAAAAKwAAABsAAAArAAAAHAAAABwAAAArAAAALAAAABwA
AAAsAAAALQAAABwAAAAtAAAAHgAAAB0AAAApAAAALgAAAB0AAAAuAAAALwAAAB0AAAAvAAAA
KwAAAB4AAAAtAAAAMAAAAB4AAAAwAAAAMQAAAB4AAAAxAAAAMgAAAB4AAAAyAAAAMwAAACAA
AAA0AAAANQAAACEAAAA1AAAANgAAACEAAAA2AAAANwAAACIAAAA3AAAAOAAAACMAAAA6AAAA
RQAAACMAAABFAAAAOQAAACQAAAA5AAAAOwAAACQAAAA7AAAAPAAAACQAAAA8AAAAJQAAACUA
AAA8AAAAPQAAACYAAAA9AAAAPAAAACYAAAA8AAAAJwAAACcAAAA8AAAAKAAAACgAAAA8AAAA
OwAAACgAAAA7AAAAPgAAACgAAAA+AAAAKgAAACkAAAAqAAAAPwAAACkAAAA/AAAALgAAACoA
AABAAAAAPwAAACoAAAA+AAAAQAAAACsAAAAvAAAALAAAACwAAABBAAAALQAAACwAAAAvAAAA
PwAAACwAAAA/AAAAQAAAACwAAABAAAAAQQAAAC0AAABBAAAANgAAAC0AAAA2AAAANQAAAC0A
AAA1AAAAMAAAAC4AAAA/AAAALwAAADAAAAA1AAAANAAAADAAAAA0AAAAQgAAADAAAABCAAAA
MQAAADYAAABBAAAANwAAADcAAABBAAAAQwAAADcAAABDAAAAOAAAADgAAABDAAAARAAAADkA
AABFAAAAPgAAADkAAAA+AAAAOwAAADoAAABGAAAARwAAADoAAABHAAAARQAAAD4AAABFAAAA
RwAAAD4AAABHAAAAQAAAAEAAAABHAAAAQQAAAEEAAABHAAAAQwAAAEMAAABHAAAARgAAAEMA
AABGAAAARAAAAA==</SharedString>
		<SharedString md5="rtpX0D0DqqaUvXW+JISfVQ==">Q1NHUEhTBwAAAAIIvrRCPaPSvcPHEz5Y+dc9MpuQQw5Z0z+ILxlAO6+PQ0zZrz9QyZNDEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPxsAAAAEAAAAqofKvxDWSkDL
/JA/pKxkwH5l0D0mwGW/4JT2v2heb78LEytArbxUP58WAkACtEVAaez9PvezQUBWHAzA/JJN
vszErb8CtEXAzMeKvwzWSsDuP6I+A0oEQM4dFMDLe8c/pKxkQCWQWj3g3ke/KgAAAAAAAAAB
AAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAAAQAAAAEAAAAEAAAABQAA
AAEAAAAFAAAABgAAAAEAAAAGAAAAAgAAAAIAAAAGAAAABwAAAAIAAAAHAAAAAwAAAAMAAAAH
AAAACAAAAAMAAAAIAAAABAAAAAQAAAAIAAAABQAAAAUAAAAIAAAABwAAAAUAAAAHAAAABgAA
AA==</SharedString>
		<SharedString md5="uTzSUNRpTr7Mf4ftgO/WNw==">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
FtDAbJ+Sv95p3sBusZjAfGjsPWikx8CqP+8/DrhnwEEfgcDTSkNAK1WEwAAAgLV+ZS/AVSqA
wAAAgLU/jFrAtXlxwAAAgLU7rmzA0DivPQAAgLWLTb3A5JzgP2c0hcDmPVrAV1BcQJiav79W
QJa+1GVBQAAAgLVRTiRACHrnPwAAgLUaCa9ADhW1PjyyScBVTaFAZ+jUvwAAgLXe6ZpAHswp
wAAAULr9+GFAyjN6wAAAgLWRppY/pmiuPwAAgLVCppnAUr9pQAAAgLUolsK9fGiGPgAAgLXz
pbZAcgAAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAA
AAAAAAAFAAAAAQAAAAEAAAAFAAAABgAAAAEAAAAGAAAABwAAAAEAAAAHAAAACAAAAAEAAAAI
AAAAAgAAAAIAAAAIAAAACQAAAAIAAAAJAAAACgAAAAIAAAAKAAAAAwAAAAMAAAAKAAAABAAA
AAQAAAALAAAADAAAAAQAAAAMAAAADQAAAAQAAAANAAAADgAAAAQAAAAOAAAABQAAAAQAAAAK
AAAACwAAAAUAAAAOAAAADwAAAAUAAAAPAAAAEAAAAAUAAAAQAAAAEQAAAAUAAAARAAAABgAA
AAYAAAARAAAADwAAAAYAAAAPAAAAFAAAAAYAAAAUAAAADQAAAAYAAAANAAAADAAAAAYAAAAM
AAAAEwAAAAYAAAATAAAAEgAAAAYAAAASAAAACQAAAAYAAAAJAAAACAAAAAYAAAAIAAAABwAA
AAkAAAASAAAACgAAAAoAAAASAAAAEwAAAAoAAAATAAAACwAAAAsAAAATAAAADAAAAA0AAAAU
AAAADgAAAA4AAAAUAAAADwAAAA8AAAARAAAAEAAAAA==</SharedString>
		<SharedString md5="vA+lr/fS59F3DJoBcLXx5g==">Q1NHUEhTBwAAAAKIT+RCQuBBPHKfGj0ivQq74ci5QxKulcJSqDxB0rPpQ1vHUULU9hJEEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP1QAAAAEAAAAYudIP7x2WkBk
r6q/J8ImQLDsQ0AG1Go+daQ/QBI+O0CJgXq/uU4vQPnTCkAQBv2/57C8v9sa8D9rqwnAC8Dc
vwM6J0AUD5e/qRPNv/L8MkDQcDM9NaBVQAeeOT+rlZ8/fPeBQBpVqz9lZoC+o/aSviLX5T+a
dto/3pLpPw929z/L7rg/D5tRQOqJjL8JNBi/8eHYP0tIDD5YIxLAtH2rv4ntcj7kehHATNti
wPqGyb/8aWC/XNdkwH/RVD97vRO/tvtswLvFJb+YDag/+eHYv8jQR73QvBFAWNdkQHk8Pr9d
IxI/CycBQJ2TMb9k0ApAA8DcP86JIcAFQpY/Sbcbv7p2WsB48q09g/aSPp6M2r+pQ9u/5pLp
v6YV7L/au7m/eaQ/wMSjNcBs53g/fveBwLL0n79SZHo+bbxKv+GjIMBaIxJAcudIv5S7VMBV
4qk/nAAAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAA
AAAAAAAFAAAABgAAAAAAAAAGAAAAAQAAAAEAAAAHAAAACAAAAAEAAAAIAAAAAgAAAAEAAAAG
AAAACQAAAAEAAAAJAAAACgAAAAEAAAAKAAAABwAAAAIAAAAIAAAAAwAAAAMAAAAIAAAACwAA
AAMAAAALAAAADAAAAAMAAAAMAAAABAAAAAQAAAANAAAADgAAAAQAAAAOAAAADwAAAAQAAAAP
AAAABQAAAAQAAAAMAAAADQAAAAUAAAAPAAAABgAAAAYAAAAPAAAAEAAAAAYAAAAQAAAAEQAA
AAYAAAARAAAACQAAAAcAAAASAAAACAAAAAcAAAAKAAAAEwAAAAcAAAATAAAAEgAAAAgAAAAS
AAAACwAAAAkAAAATAAAACgAAAAkAAAARAAAAEwAAAAsAAAASAAAAFAAAAAsAAAAUAAAAFQAA
AAsAAAAVAAAAFgAAAAsAAAAWAAAADAAAAAwAAAAWAAAADQAAAA0AAAAXAAAADgAAAA0AAAAW
AAAAFwAAAA4AAAAXAAAAFQAAAA4AAAAVAAAAGAAAAA4AAAAYAAAAGQAAAA4AAAAZAAAADwAA
AA8AAAAZAAAAEAAAABAAAAAZAAAAGAAAABAAAAAYAAAAGgAAABAAAAAaAAAAEQAAABEAAAAa
AAAAEwAAABIAAAATAAAAFAAAABMAAAAaAAAAFAAAABQAAAAaAAAAGwAAABQAAAAbAAAAFQAA
ABUAAAAbAAAAGAAAABUAAAAXAAAAFgAAABgAAAAbAAAAGgAAAA==</SharedString>
		<SharedString md5="yuZpQdnvvUBOTYh1jqZ2cA=="></SharedString>
		<SharedString md5="zCPvfeRErxlahYdIpTlF4g==">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
AAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAADwAAAAAAAAAPAAAAEQAAAAAAAAAR
AAAABgAAAAAAAAAGAAAAAQAAAAEAAAAGAAAABwAAAAEAAAAHAAAAAgAAAAIAAAAIAAAACQAA
AAIAAAAJAAAACgAAAAIAAAAKAAAACwAAAAIAAAALAAAADAAAAAIAAAAHAAAACAAAAAMAAAAM
AAAACwAAAAMAAAALAAAABAAAAAQAAAALAAAADQAAAAQAAAANAAAADgAAAAQAAAAOAAAABQAA
AAUAAAAOAAAAEAAAAAUAAAAQAAAADwAAAAYAAAARAAAACAAAAAYAAAAIAAAABwAAAAgAAAAR
AAAACQAAAAkAAAAOAAAADQAAAAkAAAANAAAACwAAAAkAAAALAAAACgAAAAkAAAARAAAADgAA
AA4AAAARAAAAEgAAAA4AAAASAAAAEAAAAA8AAAAQAAAAEgAAAA8AAAASAAAAEQAAABAAAAAA
AAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD88AAAABAAAAOIEbT/UbeK/UwS1
P6tHVz/UbeK/8k+3P+IEbT/TzinA92SyP+IEbT8Ra/6/oGypPwAAAADUbeK/LUm2P3wZSz/U
beK/Bo+4P+IEbT8iuCnAh1ayP1zRLj/TzinA0CS1P2B0eTzTzinAzvGdP+IEbT8zpA3AxRyq
PwAAAABUsCjA8q2dPwAAAABw/P2/XQquPwAAAAC7IRPAFkmzP6iLcD3UbeK/zHy6P+IEbT93
IhzASOSrPwDhHjypKxPAvl6zPwAAAAAtghPAdfKyP5iNAT3TzinAaWOfPwAAAADTzinAOSee
P+IEbT+R1hTAuneqP2wAAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAYAAAAAAAAABgAAAA4AAAAA
AAAADgAAABMAAAAAAAAAEwAAAAkAAAAAAAAACQAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAA
AA0AAAAAAAAADQAAAAUAAAAAAAAABQAAAAEAAAABAAAABQAAAAIAAAACAAAABQAAAAcAAAAC
AAAABwAAABEAAAACAAAAEQAAABIAAAACAAAAEgAAAAgAAAACAAAACAAAAAYAAAADAAAACQAA
AAgAAAADAAAACAAAAAoAAAADAAAACgAAAAsAAAADAAAACwAAAAQAAAAEAAAACwAAAAoAAAAE
AAAACgAAABIAAAAEAAAAEgAAABAAAAAEAAAAEAAAAAwAAAAEAAAADAAAAA0AAAAFAAAADQAA
AAcAAAAGAAAACAAAAA4AAAAHAAAADQAAAA8AAAAHAAAADwAAAAwAAAAHAAAADAAAABAAAAAH
AAAAEAAAABEAAAAIAAAAEgAAAAoAAAAIAAAACQAAABMAAAAIAAAAEwAAAA4AAAAMAAAADwAA
AA0AAAAQAAAAEgAAABEAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
AIA/fgAAAAQAAAAUkHK+uGsqQAwfBT6G0Wm+uGsqQOG5ED5WuqG9hrBCQJjIDz5NbIM9izVj
QHA0yDxNbIM9+DZjQDjZxTxNbIM9+DZjQKT2wzwYiRe+GwA0QOAm+bt6zjy+uGsqQGDo+Lwe
jlu+uGsqQC5WID6QEUq8uGsqQIh2tz76/4Q9izVjQHA0yDzKI4Q9+DZjQCRDxzw1KIk9JHsw
QB3Suj4V8Yw+SChEQJxmdj5H24Q9ZDhjQKT2wzwQWSg8DDgvQEwlMb4I36G9uGsqQEn2Ar4w
9xe+uGsqQKILjb1M7No8uGsqQAlcwT5H24Q9+DZjQIDKxjzikYQ9+DZjQCRDxzzxsjo+iFRT
QBsozj0/jjo+NK5TQDYzmj10iaQ9uGsqQMpXyj6A1ac9uGsqQAiFyj7wpwQ+uGsqQI4zzj7i
Vo4+veJEQKjtSz5iXKk+uGsqQMKRrz4Zpb0+uGsqQK5Zpj4Plco+uGsqQP6Dnj75ONQ+uGsq
QFAnmD6xLdw+uGsqQCZwkT4Hgt4+uGsqQKI6jz5Vw/Q+uGsqQDeMOD6S+jg+8vNTQK7HSz34
LjY+LydUQIDKxjwiUDI+7EdUQIB8gbogh88+uGsqQARmPb6C1gc9uGsqQP5BLb6u1fQ+uGsq
QGbjLz7DcPQ+uGsqQJD1Pb1B6es+uGsqQIbOs73wAAAAAAAAAAEAAAACAAAAAAAAAAIAAAAD
AAAAAAAAAAMAAAAEAAAAAAAAAAQAAAAFAAAAAAAAAAUAAAAGAAAAAAAAAAYAAAAHAAAAAAAA
AAcAAAARAAAAAAAAABEAAAAQAAAAAAAAABAAAAAmAAAAAAAAACYAAAAlAAAAAAAAACUAAAAp
AAAAAAAAACkAAAAoAAAAAAAAACgAAAAnAAAAAAAAACcAAAAhAAAAAAAAACEAAAAgAAAAAAAA
ACAAAAAfAAAAAAAAAB8AAAAeAAAAAAAAAB4AAAAdAAAAAAAAAB0AAAAcAAAAAAAAABwAAAAb
AAAAAAAAABsAAAAZAAAAAAAAABkAAAAYAAAAAAAAABgAAAAXAAAAAAAAABcAAAASAAAAAAAA
ABIAAAAJAAAAAAAAAAkAAAAIAAAAAAAAAAgAAAABAAAAAQAAAAgAAAACAAAAAgAAAAgAAAAJ
AAAAAgAAAAkAAAADAAAAAwAAAAoAAAAUAAAAAwAAABQAAAALAAAAAwAAAAsAAAAEAAAAAwAA
AAkAAAAMAAAAAwAAAAwAAAANAAAAAwAAAA0AAAAKAAAABAAAAAsAAAAOAAAABAAAAA4AAAAF
AAAABQAAAA4AAAAPAAAABQAAAA8AAAAQAAAABQAAABAAAAARAAAABQAAABEAAAAHAAAABQAA
AAcAAAAGAAAACQAAABIAAAAMAAAACgAAAA4AAAATAAAACgAAABMAAAAUAAAACgAAAA0AAAAV
AAAACgAAABUAAAAWAAAACgAAABYAAAAOAAAACwAAABQAAAAOAAAADAAAABIAAAAXAAAADAAA
ABcAAAAYAAAADAAAABgAAAAZAAAADAAAABkAAAANAAAADQAAABoAAAAVAAAADQAAABkAAAAb
AAAADQAAABsAAAAcAAAADQAAABwAAAAdAAAADQAAAB0AAAAeAAAADQAAAB4AAAAfAAAADQAA
AB8AAAAgAAAADQAAACAAAAAhAAAADQAAACEAAAAaAAAADgAAABYAAAAiAAAADgAAACIAAAAj
AAAADgAAACMAAAAkAAAADgAAACQAAAAlAAAADgAAACUAAAAPAAAADgAAABQAAAATAAAADwAA
ACUAAAAmAAAADwAAACYAAAAQAAAAFQAAABoAAAAhAAAAFQAAACEAAAAWAAAAFgAAACEAAAAi
AAAAIQAAACcAAAAiAAAAIgAAACcAAAAoAAAAIgAAACgAAAAjAAAAIwAAACgAAAAkAAAAJAAA
ACgAAAApAAAAJAAAACkAAAAlAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAA
AAAAAACAP5MAAAAEAAAAz8lFv2c4Yz+otSI+v3ZFv2c4Yz9k1S4+kNIXv3t43D+iZX4+3bkZ
v2qx3D+otSI+lEUZv2/yvT+otSI+qIy5PWc4Yz/ANGo/OH86v2c4Yz+IWeI+ZwI4v2c4Yz8j
ev0+DYA1v2c4Yz8T0gk/LGs0v2c4Yz85dg4/g0gOv8Yo3D+0c9E+omcUv7Qy4z/WPn4+abwX
v4KH4D+otSI+qIy5PYUnZD9o/2k/3/sVv7Qy4z+otSI+qIy5PbQy4z9pE1M/qIy5PSqBwD9f
6V0/ULh3vbQy4z+nfVw/vmfFvcSu3T84yls/uNBjPWc4Yz8UCGk/Enoxv2c4Yz/9ERk/Eb8v
v2c4Yz9uDR4/vawsv2c4Yz+XmCY/YOoNv58r3D9ERdM+7ukJv7Qy4z+mGtQ+OF4Kv7Qy4z/m
rdE+oCixvbQy4z8aS1o/2OLEvZqy4j/EtFk/f10pv2c4Yz9Dbiw/qMNUvWc4Yz9hVWQ/wHSB
u2c4Yz8uoGY/1mwqv2c4Yz9M6io//oEIv+UX3T9Vces+fekFv7Qy4z/Xl+Y+2OLEvbQy4z8F
bFk/6xi7vkEK4D/nUSg/qc3bvthq3z82TRo/isDuvlvf3j/WJRA/BL4Av2YS3j+EVwM/cE4F
v+IY4j9qUOw+Y7MEv7Qy4z/SAuw+Vv+0vrQy4z/FlCc/EQ3NvrQy4z+khR0/zffUvrQy4z+e
/xk/GUflvrQy4z8PYRE/OqjnvrQy4z+9CBA/Wiz6vrQy4z9QfgM/umP6vgEI4z8DiAM/VLz6
vrQy4z85AAM/GgEAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAADAAAAAAAAAAM
AAAADgAAAAAAAAAOAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAAEwAAAAAAAAATAAAAHgAA
AAAAAAAeAAAAHQAAAAAAAAAdAAAAHAAAAAAAAAAcAAAAHwAAAAAAAAAfAAAAFgAAAAAAAAAW
AAAAFQAAAAAAAAAVAAAAFAAAAAAAAAAUAAAACQAAAAAAAAAJAAAACAAAAAAAAAAIAAAABwAA
AAAAAAAHAAAABgAAAAAAAAAGAAAAAQAAAAEAAAAGAAAAAgAAAAIAAAAGAAAABwAAAAIAAAAH
AAAACAAAAAIAAAAIAAAACQAAAAIAAAAJAAAACgAAAAIAAAAKAAAACwAAAAIAAAALAAAAAwAA
AAMAAAALAAAADAAAAAQAAAANAAAABQAAAAQAAAAOAAAADwAAAAQAAAAPAAAADQAAAAUAAAAN
AAAADwAAAAUAAAAPAAAAEAAAAAUAAAAQAAAAEQAAAAUAAAARAAAAEgAAAAUAAAASAAAAEwAA
AAkAAAAUAAAACgAAAAoAAAAUAAAAFQAAAAoAAAAVAAAAFgAAAAoAAAAWAAAAFwAAAAoAAAAX
AAAAGAAAAAoAAAAYAAAAGQAAAAoAAAAZAAAACwAAAAsAAAAZAAAAGAAAAAsAAAAYAAAAIQAA
AAsAAAAhAAAAKAAAAAsAAAAoAAAAMAAAAAsAAAAwAAAALgAAAAsAAAAuAAAALQAAAAsAAAAt
AAAALAAAAAsAAAAsAAAAKwAAAAsAAAArAAAAKgAAAAsAAAAqAAAAKQAAAAsAAAApAAAAIgAA
AAsAAAAiAAAAGgAAAAsAAAAaAAAAEQAAAAsAAAARAAAADwAAAAsAAAAPAAAADgAAAAsAAAAO
AAAADAAAAA8AAAARAAAAEAAAABEAAAAaAAAAGwAAABEAAAAbAAAAEgAAABIAAAAcAAAAHQAA
ABIAAAAdAAAAHgAAABIAAAAeAAAAEwAAABIAAAAbAAAAHAAAABYAAAAfAAAAIAAAABYAAAAg
AAAAFwAAABcAAAAgAAAAGAAAABgAAAAgAAAAIQAAABoAAAAiAAAAGwAAABsAAAAiAAAAIwAA
ABsAAAAjAAAAHAAAABwAAAAjAAAAJAAAABwAAAAkAAAAJQAAABwAAAAlAAAAHwAAAB8AAAAl
AAAAJgAAAB8AAAAmAAAAIAAAACAAAAAmAAAAJwAAACAAAAAnAAAAIQAAACEAAAAnAAAAKAAA
ACIAAAApAAAAIwAAACMAAAApAAAAKgAAACMAAAAqAAAAKwAAACMAAAArAAAAJAAAACQAAAAr
AAAALAAAACQAAAAsAAAAJQAAACUAAAAsAAAALQAAACUAAAAtAAAALgAAACUAAAAuAAAALwAA
ACUAAAAvAAAAJgAAACYAAAAvAAAAKAAAACYAAAAoAAAAJwAAACgAAAAvAAAAMAAAAC4AAAAw
AAAALwAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD91AAAABAAA
ACUfZr93minAmbimv5SGer93minAmkumvzYvcb9SPQ3A+GaevyUfZr910w3ASCyevyUfZr+T
3yTAoFCjv9+RrL93minAALuSO3wviL93minAa/mfv4zkiL+xewzAJ6uav7p/gL/JpQzA+oyd
v2bGdb+UvQHA3uqXvyUfZr/mpwLAjpKYvyUfZr8rsyHAEJChvyUfZr88dOa/Ih2Jv94Zqr80
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
vz8747/4M5c/5ARtv0wRH8A6V54/dbuPv+BoKsDjH5c/MVasvz87478V2Sk/32qiv+BoKsBM
zIc/vKafv+BoKsCA6Yw/FSOfv+BoKsBs0o0/zU63v7FsC8AdvYA/WDl4vz8747+U1pU/5ARt
v92DDcDE1aA/4weVv+BoKsDaGpY/WeWPv+BoKsDbF5c/k1ekvz87478LLk4/6u2av+BoKsAN
X5I/86Gyv2SvCsAVm4Y/W16Rvz87478Nhok/leCfv0RB87+RKoI/8CODvz8747/uO5M/6mKf
v9ZcCsCq9JM/vJalv6IfCsCa8ZA/PXKav+BoKsCU45I/Jmasv606CsDgTIw/Uu+Pvz874799
74o/RhGKvz87478efI8/KbiLvz8747/nSo4/zAAAAAAAAAABAAAAAgAAAAAAAAACAAAACQAA
AAAAAAAJAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAABgAAAAAAAAAG
AAAADQAAAAAAAAANAAAAFgAAAAAAAAAWAAAAFQAAAAAAAAAVAAAAHwAAAAAAAAAfAAAAGAAA
AAAAAAAYAAAAEQAAAAAAAAARAAAAEAAAAAAAAAAQAAAADwAAAAAAAAAPAAAACAAAAAAAAAAI
AAAAAQAAAAEAAAAHAAAAAgAAAAEAAAAIAAAABwAAAAIAAAAHAAAACQAAAAMAAAAJAAAABwAA
AAMAAAAHAAAACgAAAAMAAAAKAAAADgAAAAMAAAAOAAAAFwAAAAMAAAAXAAAAGgAAAAMAAAAa
AAAAIQAAAAMAAAAhAAAAIwAAAAMAAAAjAAAAIgAAAAMAAAAiAAAAHAAAAAMAAAAcAAAAEwAA
AAMAAAATAAAACwAAAAMAAAALAAAABAAAAAQAAAALAAAAFAAAAAQAAAAUAAAADAAAAAQAAAAM
AAAABgAAAAQAAAAGAAAABQAAAAYAAAAMAAAADQAAAAcAAAAOAAAACgAAAAcAAAAIAAAADwAA
AAcAAAAPAAAAEAAAAAcAAAAQAAAAEQAAAAcAAAARAAAAEgAAAAcAAAASAAAADgAAAAsAAAAT
AAAAFAAAAAwAAAAUAAAAFQAAAAwAAAAVAAAAFgAAAAwAAAAWAAAADQAAAA4AAAASAAAAFwAA
ABEAAAAYAAAAGQAAABEAAAAZAAAAEgAAABIAAAAZAAAAGgAAABIAAAAaAAAAGwAAABIAAAAb
AAAAFwAAABMAAAAcAAAAHQAAABMAAAAdAAAAFAAAABQAAAAdAAAAFQAAABUAAAAdAAAAHgAA
ABUAAAAeAAAAHwAAABcAAAAbAAAAGgAAABgAAAAfAAAAGQAAABkAAAAgAAAAGgAAABkAAAAf
AAAAIAAAABoAAAAgAAAAIQAAABwAAAAiAAAAHgAAABwAAAAeAAAAHQAAAB4AAAAiAAAAIAAA
AB4AAAAgAAAAHwAAACAAAAAiAAAAIwAAACAAAAAjAAAAIQAAABAAAAAAAAAAAAAAAAAAAAAA
AAAAEAAAAAAAAAAAAAAAAAAAAAAAgD91AAAABAAAAARjqr+0MuO/EBfwPchVrL+0MuO/tOop
PyiBo7+EzYS/XcESP3CBob/sCXu/gMIAP8o+n78ykZ6/EBfwPdyZjb9nOGO/EBfwPUJcLL+0
MuO/8P2fP+pWpL+0MuO/1ClOP4pqm79Y/XS/KiiJP5IPnb+SkXa/oHODPzchor/V+X+/tp4R
P64BnL9nOGO/oHODPx10nL9nOGO/OBZ4PxOenb9nOGO/8t49Pzk4mL9cAIO/MFHwPamCoL8v
23S/l4oQP5sTn7/9OWu/ZsYPP4HFmb9nOGO/qJQKP0JcLL9nOGO/AKKXP0JcLL+uvae/n6yV
P0JcLL/kP8G/YJeZP0JcLL+iEYS/4KCcPywijL9nOGO/LAeUPyZYjL8GZHa/CjqUP6v/V7+0
MuO/KoeaP65akb+0MuO/oIaJP1S3mr9nOGO/bi+JP/LHl7+MUnS/RVaOP4NVl79nOGO/RVaO
P7gdSr9nOGO/hoqYP0JcLL+zM2i/IkKaP4G5g79nOGO/qReVP0cukr9nOGO/OiuSP7B3kr9+
1XS/IDaSP5g3eL+0MuO/ltSVP6Drj7+0MuO/T+6KPw60i7+0MuO/X0uOP90Mir+0MuO/7HiP
Pwweg7+0MuO/tzuTP94AAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAA
AAAABAAAAAUAAAAAAAAABQAAAAYAAAAAAAAABgAAABgAAAAAAAAAGAAAACIAAAAAAAAAIgAA
ACYAAAAAAAAAJgAAACUAAAAAAAAAJQAAACQAAAAAAAAAJAAAACMAAAAAAAAAIwAAABkAAAAA
AAAAGQAAAAcAAAAAAAAABwAAAAEAAAABAAAABwAAAAgAAAABAAAACAAAAAkAAAABAAAACQAA
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
ACYAAAAkAAAACgAAACQAAAAcAAAACgAAABwAAAAbAAAACgAAABsAAAAaAAAACgAAABoAAAAS
AAAACwAAABMAAAAWAAAACwAAABYAAAAMAAAADAAAABYAAAANAAAADQAAABYAAAAOAAAADgAA
ABYAAAAXAAAADwAAABgAAAAZAAAADwAAABkAAAAQAAAAEgAAABoAAAATAAAAEwAAABoAAAAb
AAAAEwAAABsAAAAcAAAAEwAAABwAAAAdAAAAEwAAAB0AAAAWAAAAFQAAABkAAAAYAAAAFQAA
ABgAAAAeAAAAFgAAAB0AAAAfAAAAFgAAAB8AAAAXAAAAFwAAAB8AAAAgAAAAGAAAACEAAAAi
AAAAGAAAACIAAAAjAAAAGAAAACMAAAAeAAAAHAAAACQAAAAdAAAAHQAAACQAAAAfAAAAHgAA
ACMAAAAiAAAAHgAAACIAAAAlAAAAHwAAACQAAAAmAAAAHwAAACYAAAAnAAAAHwAAACcAAAAo
AAAAHwAAACgAAAApAAAAHwAAACkAAAAqAAAAHwAAACoAAAArAAAAHwAAACsAAAAiAAAAHwAA
ACIAAAAhAAAAHwAAACEAAAAsAAAAHwAAACwAAAAgAAAAIgAAACsAAAAlAAAAEAAAAAAAAAAA
AAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP10AAAAEAAAArczRPx2bKcAAAAAAtPWw
P2rgFMAAAAAAccm3P/5q4r8AAAAACpW4P/5q4r8Qxwo+rYu3P/5q4r9n2UE/6U23P/5q4r/+
c0s/vtGzP/5q4r/l0ZA/83OzP/5q4r8BWJI/HYixP/5q4r8nBJo/TvykPx2bKcDX0ps/4gRt
Px2bKcAiRrI/tkSsP9WyAcAAAAAAtOusP5Vb/b8AAAAA4gRtP/5q4r88BbU/bEKsP/5q4r+m
l6I/v/2gPx2bKcDc66M/2NCkPx2bKcDISJw/NjdtPx2bKcAiRrI/4gRtP9EiHMCW4Ks/WOKr
PzUFAMAAAAAA4gRtP+1q/r8Qaqk/6TOIPx2bKcAr0rA/k2ORPx2bKcCzHq8/T0GcP/5q4r/m
Aq0/aSOmP/5q4r9jGqg//xmaPx2bKcAztao/PaKgPx2bKcC6WKQ/4gRtP4XWFMCydao/4gRt
P6mjDcBwFqo/V7+dP/5q4r9Hdqw/+8mkP/5q4r8YL6k/rgAAAAAAAAABAAAACwAAAAAAAAAL
AAAAEwAAAAAAAAATAAAADAAAAAAAAAAMAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAA
AAAAAAAEAAAABQAAAAAAAAAFAAAABgAAAAAAAAAGAAAABwAAAAAAAAAHAAAACAAAAAAAAAAI
AAAACQAAAAAAAAAJAAAAEAAAAAAAAAAQAAAADwAAAAAAAAAPAAAAGgAAAAAAAAAaAAAAGQAA
AAAAAAAZAAAAFgAAAAAAAAAWAAAAFQAAAAAAAAAVAAAAEQAAAAAAAAARAAAACgAAAAAAAAAK
AAAAAQAAAAEAAAAKAAAACwAAAAIAAAAMAAAADQAAAAIAAAANAAAAFwAAAAIAAAAXAAAAHQAA
AAIAAAAdAAAAHgAAAAIAAAAeAAAAGAAAAAIAAAAYAAAADgAAAAIAAAAOAAAACAAAAAIAAAAI
AAAABwAAAAIAAAAHAAAABgAAAAIAAAAGAAAABQAAAAIAAAAFAAAABAAAAAIAAAAEAAAAAwAA
AAgAAAAOAAAADwAAAAgAAAAPAAAAEAAAAAgAAAAQAAAACQAAAAoAAAARAAAADQAAAAoAAAAN
AAAAFAAAAAoAAAAUAAAAHAAAAAoAAAAcAAAAGwAAAAoAAAAbAAAAEgAAAAoAAAASAAAAEwAA
AAoAAAATAAAACwAAAAwAAAATAAAADQAAAA0AAAATAAAAFAAAAA0AAAARAAAAFQAAAA0AAAAV
AAAAFgAAAA0AAAAWAAAAFwAAAA4AAAAYAAAAGQAAAA4AAAAZAAAAGgAAAA4AAAAaAAAADwAA
ABIAAAAbAAAAEwAAABMAAAAbAAAAHAAAABMAAAAcAAAAFAAAABYAAAAdAAAAFwAAABYAAAAZ
AAAAHgAAABYAAAAeAAAAHQAAABgAAAAeAAAAGQAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAA
AAAAAAAAAAAAAAAAAAAAgD+QAAAABAAAAArmnz9RZeK/WEqav7Fikj8sL4a/YHKWv9wIpz9R
ZeK/oHmZv6cgPT9RZeK/okWRv6cgPT8N5Je/dtaRv7wmmT+1vYW/YiqVvz6lpz8g3dW/IJyY
v6cgPT95RJC/alKRvwq9jz+KUX6/LKqVv8aYlj/1eX2/9m6Uv8TEtz8g3dW/zIaOv2B9uj9R
ZeK/rCWMv6cgPT+Qeti/e0aPv+obPT/Q07K/vhmKv1KCuD9RZeK/4B37PUkvoj+8K6+/4B37
PY1rmD/+amK/4B37PT5rmz+WNny/7CyPvxPFnT9eJ4W/m+yPv20mnD/py42/tt2Uv6cgPT/4
wYe/u5KQv6cgPT9AXYG/m+yPv6cgPT/+amK/CLyJv0hAhz/+amK/B+2Ov8GNjj/+amK/rOCN
vxUekT/+amK/TO6Lv1wulD/+amK/mwCJv+aLoD/rQI2/YIaPv1QEvD/2Q9m/LI2Jv1QEvD8m
j9+/zBCLv0mjuj9RZeK/lpCLv7SZuz9RZeK/BdOFv+sbvT/Ng9+/aMKEvxIhuT9b1eC/4B37
PQthoj+Jr4m/4B37PSRaoD92DX6/APBuuS7dmT/+amK/gNcGPe6Mlj/+amK/j5CBv3XtnD+K
7Xq/Kl+HvxACuz/4s8u/0pSBv+ynuz8o/9G/bxuGv0XxvD9KPtm/FFSDvxp0uD+Eldq/4B37
PSZQvD/UBNK/KACAv86qtj+/Nc2/4B37PRmWmT/+amK/M86TvjVjuz/Tx8u/UFl3vwKTtz+g
l9O/4B37PRQBAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAsAAAAAAAAACwAAAB4AAAAAAAAAHgAA
AB8AAAAAAAAAHwAAAA4AAAAAAAAADgAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAEAAAAB
AAAABQAAAAYAAAABAAAABgAAAAIAAAABAAAABAAAAAcAAAABAAAABwAAAAgAAAABAAAACAAA
AAkAAAABAAAACQAAAAUAAAACAAAABgAAAAoAAAACAAAACgAAAAsAAAADAAAADAAAAA0AAAAD
AAAADQAAAAQAAAADAAAADgAAAA8AAAADAAAADwAAABAAAAADAAAAEAAAAAwAAAAEAAAADQAA
AAcAAAAFAAAACQAAABEAAAAFAAAAEQAAABIAAAAFAAAAEgAAABMAAAAFAAAAEwAAAAYAAAAG
AAAAEwAAAAoAAAAHAAAADQAAABQAAAAHAAAAFAAAAAgAAAAIAAAAFAAAABUAAAAIAAAAFQAA
ABYAAAAIAAAAFgAAABcAAAAIAAAAFwAAABgAAAAIAAAAGAAAAAkAAAAJAAAAGAAAABkAAAAJ
AAAAGQAAABoAAAAJAAAAGgAAABEAAAAKAAAAEgAAABsAAAAKAAAAGwAAABwAAAAKAAAAHAAA
AB0AAAAKAAAAHQAAAAsAAAAKAAAAEwAAABIAAAALAAAAHQAAAB4AAAAMAAAAEAAAAA0AAAAN
AAAAEAAAABYAAAANAAAAFgAAABUAAAANAAAAFQAAABQAAAAOAAAAHwAAACAAAAAOAAAAIAAA
ACEAAAAOAAAAIQAAACoAAAAOAAAAKgAAAC8AAAAOAAAALwAAACwAAAAOAAAALAAAACIAAAAO
AAAAIgAAABAAAAAOAAAAEAAAAA8AAAAQAAAAIgAAACMAAAAQAAAAIwAAACQAAAAQAAAAJAAA
AC0AAAAQAAAALQAAACUAAAAQAAAAJQAAABoAAAAQAAAAGgAAABkAAAAQAAAAGQAAABgAAAAQ
AAAAGAAAABcAAAAQAAAAFwAAABYAAAARAAAAGgAAACUAAAARAAAAJQAAACYAAAARAAAAJgAA
ACcAAAARAAAAJwAAABIAAAASAAAAJwAAACgAAAASAAAAKAAAABwAAAASAAAAHAAAABsAAAAc
AAAAKAAAACkAAAAcAAAAKQAAACAAAAAcAAAAIAAAAB0AAAAdAAAAIAAAAB4AAAAeAAAAIAAA
AB8AAAAgAAAAKQAAACEAAAAhAAAAKQAAACsAAAAhAAAAKwAAACoAAAAiAAAALAAAACMAAAAj
AAAALQAAACQAAAAjAAAALAAAAC4AAAAjAAAALgAAACYAAAAjAAAAJgAAAC0AAAAlAAAALQAA
ACYAAAAmAAAALgAAACcAAAAnAAAALgAAACsAAAAnAAAAKwAAACgAAAAoAAAAKwAAACkAAAAq
AAAAKwAAAC4AAAAqAAAALgAAAC8AAAAsAAAALwAAAC4AAAAQAAAAAAAAAAAAAAAAAAAAAAAA
ABAAAAAAAAAAAAAAAAAAAAAAAIA/qwAAAAQAAAAAAAAAAAAAswSuTb8AAAAAUCbFvfzvUr8A
AAAAGFbPvqKFeb/K0pO+PRfOvgj+cr8gEXu+AAAAs7QQR78Gp2u/AAAAsxAX8D0AOYC/dXQL
vxAX8D0AAAAAzKNGvyl3eb8AAAAAbyjovr9nfL8BH6a+VBQOv0Hee7/YhZ++27ABv5Aneb9q
cQ+/er4Lv/o2dr9N0Ji+B7zmvmHndb8NzAS/U+PKvhUba7+3Qgm/AAAAs5xxPr84tWu/AAAA
s+jwNz3m5mu/gPUCuxAX8D28jYi/WqNEvxAX8D0AAAAAZjhjv/dhgb8AAAAAJHgCv3SZf78A
AAAAeQMPvzgdgb9K4ma+Zjhjv+2nf7/L0RW/Zjhjv2F1d79I/EC/Zjhjv53Scr/WsEm/Zjhj
v3wDcb9CplC/Zjhjv96qbr+XzDy/X9ZDv2UqcL8Jvku/QDFDv2RkaL/2Jha/TVLxvsZDbL9q
sxm/AAAAs8GDOr+oRGm/AAAAs5QIm74aP4K/ArhUvuB4IDweG4O/2gpjvhAX8D3+nI2/Zjhj
vxAX8D1y91i/Zjhjv6Z0ar/F5V+/Zjhjv8YLZr+Efzq/AAAAs8hDJ79OUy+/AAAAs+pKL7/2
qiq/AAAAs1WSMr/0N2a/AAAAs1WR075x6IS/3LC0vgBGtLzSJ4a/gPG9vhAX8D0rY3O/Kh8l
vvoM6b5Qa42/Zjhjv2wym70qIme/ZjhjvwLbX79qHlK/AAAAs0QlFb/YEV2/AAAAsw/eAb/N
/Yu/Zjhjv6a8lr4RuFe/AAAAszXuC7+iSGG/KnwUvkSXE78uYXe/Zjhjv7A/S79KZnu/Zjhj
v71cQ7/+cn6/Zjhjv/4YPL+lQ4C/Zjhjv4DlNr8BOIK/Zjhjv7H4J79HJm2/Zjhjvy/HWb9S
3HK/Zjhjv8hQUr9KAQAAAAAAAAEAAAAHAAAAAAAAAAcAAAASAAAAAAAAABIAAAAUAAAAAAAA
ABQAAAATAAAAAAAAABMAAAAIAAAAAAAAAAgAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAE
AAAAAAAAAAQAAAAOAAAAAAAAAA4AAAAdAAAAAAAAAB0AAAAmAAAAAAAAACYAAAAlAAAAAAAA
ACUAAAAkAAAAAAAAACQAAAAtAAAAAAAAAC0AAAAwAAAAAAAAADAAAAAuAAAAAAAAAC4AAAAn
AAAAAAAAACcAAAAeAAAAAAAAAB4AAAAPAAAAAAAAAA8AAAAFAAAAAAAAAAUAAAAGAAAAAAAA
AAYAAAABAAAAAQAAAAYAAAAHAAAAAgAAAAgAAAAJAAAAAgAAAAkAAAAKAAAAAgAAAAoAAAAL
AAAAAgAAAAsAAAAMAAAAAgAAAAwAAAADAAAAAwAAAAwAAAALAAAAAwAAAAsAAAANAAAAAwAA
AA0AAAAOAAAAAwAAAA4AAAAEAAAABQAAAA8AAAAQAAAABQAAABAAAAAgAAAABQAAACAAAAAp
AAAABQAAACkAAAAhAAAABQAAACEAAAARAAAABQAAABEAAAAGAAAABgAAABEAAAAHAAAABwAA
ABEAAAASAAAACAAAABMAAAAJAAAACQAAABMAAAAUAAAACQAAABQAAAAVAAAACQAAABUAAAAW
AAAACQAAABYAAAALAAAACQAAAAsAAAAKAAAACwAAABYAAAAXAAAACwAAABcAAAAYAAAACwAA
ABgAAAAZAAAACwAAABkAAAAaAAAACwAAABoAAAAbAAAACwAAABsAAAAcAAAACwAAABwAAAAN
AAAADQAAABwAAAAdAAAADQAAAB0AAAAOAAAADwAAAB4AAAAfAAAADwAAAB8AAAAgAAAADwAA
ACAAAAAQAAAAEQAAACEAAAASAAAAEgAAABUAAAAUAAAAEgAAACEAAAArAAAAEgAAACsAAAAv
AAAAEgAAAC8AAAA2AAAAEgAAADYAAAA1AAAAEgAAADUAAAA0AAAAEgAAADQAAAAzAAAAEgAA
ADMAAAAyAAAAEgAAADIAAAA4AAAAEgAAADgAAAA3AAAAEgAAADcAAAAsAAAAEgAAACwAAAAj
AAAAEgAAACMAAAAiAAAAEgAAACIAAAAZAAAAEgAAABkAAAAYAAAAEgAAABgAAAAXAAAAEgAA
ABcAAAAWAAAAEgAAABYAAAAVAAAAGQAAACIAAAAaAAAAGgAAACIAAAAbAAAAGwAAACIAAAAj
AAAAGwAAACMAAAAkAAAAGwAAACQAAAAlAAAAGwAAACUAAAAmAAAAGwAAACYAAAAcAAAAHAAA
ACYAAAAdAAAAHgAAACcAAAAfAAAAHwAAACgAAAApAAAAHwAAACkAAAAgAAAAHwAAACcAAAAq
AAAAHwAAACoAAAAoAAAAIQAAACkAAAArAAAAIwAAACwAAAAtAAAAIwAAAC0AAAAkAAAAJwAA
AC4AAAAqAAAAKAAAACoAAAAvAAAAKAAAAC8AAAApAAAAKQAAAC8AAAArAAAAKgAAAC4AAAAw
AAAAKgAAADAAAAAxAAAAKgAAADEAAAAyAAAAKgAAADIAAAAzAAAAKgAAADMAAAA0AAAAKgAA
ADQAAAA1AAAAKgAAADUAAAA2AAAAKgAAADYAAAAvAAAALAAAADcAAAAtAAAALQAAADEAAAAw
AAAALQAAADcAAAAxAAAAMQAAADcAAAA4AAAAMQAAADgAAAAyAAAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP64AAAAEAAAAF1f0PuBoKkAIbz690OfrPuBoKkAG
KrS9GLnzPuBoKkCIqLM9lKYGP9OtJkDEx2u9/4PPPuBoKkC0jD2+Pk7uPlm0I0DCmmy+YYr7
Po48KUCIqLM9UG1UvuBoKkCIqLM9uTsBP2QyKECIqLM9nVAjP1ulGECIqLM9OKsbP/D4FkCO
69u9X9o3P3A86T/GdQe/uGAkPzfgBUC6K8++yncIP98s/z+i6RS/Q8UDP6jVAkCgSA2/pZIH
PeBoKkA1Ui2+j/QrP3jP5D976x2/JUkWP9QX6z8ACym/WtY8vuBoKkAALfm8BJTNvjIgFEBg
Ipq8+lTCvuTdFkCIqLM9fEMmP4CtFkCIqLM9juEsPz874z/PWB6/sLs6Pz874z/ynwi/yLMJ
Pz874z9L2y+/IPQHPz874z96vS+/lhsFPz874z8mUC+/AJk8Pn6OAkDtogG/XHBevmCs/D+h
gd6+bBOiveBoKkC1AAO+DGglPz874z8YzSW/vvsgPz874z/fwim/QzAVPz874z98GS+/s/EX
vuBoKkBIL429un8Bv2K/6T9HdZe+VJQLv5bk6j/OB3G+u0wSvwXz6z+ElDi+X+YVvw2s7D9C
Gw6+upsSv39Z7D+IqLM9qFw/P9DN6j+IqLM9FRJCPz874z+IqLM99L8PPj874z+n5hu/IKmI
vj874z8HewO/LnCRvj874z/OtgG/3sawvj874z8mivK+Z+6zvj874z/uIfC+OPDQvj874z87
CNm+1AD8vj874z92brG+SfMAvz874z+26Kq+7SoFv6MW5T+XWZy+lZsGvz874z/JIp6+TvkO
v+on5j+mCXq+hBkRvz874z96PX++sdoXvz874z+TLUe+rxYZv0ze5z8iXhG+cTUcvz874z+y
6xK+Cy4Vv6p65z+IqLM9lmgXvz874z+IqLM9UAEAAAAAAAABAAAABAAAAAAAAAAEAAAADwAA
AAAAAAAPAAAAHQAAAAAAAAAdAAAAIQAAAAAAAAAhAAAAEgAAAAAAAAASAAAABwAAAAAAAAAH
AAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAAAQAAAAEAAAADAAAABQAAAAEAAAAFAAAABAAA
AAIAAAAGAAAAAwAAAAIAAAAHAAAAFAAAAAIAAAAUAAAAJgAAAAIAAAAmAAAAOAAAAAIAAAA4
AAAAOQAAAAIAAAA5AAAAKAAAAAIAAAAoAAAAJwAAAAIAAAAnAAAAFQAAAAIAAAAVAAAACQAA
AAIAAAAJAAAACAAAAAIAAAAIAAAABgAAAAMAAAAGAAAACAAAAAMAAAAIAAAACQAAAAMAAAAJ
AAAACgAAAAMAAAAKAAAACwAAAAMAAAALAAAADAAAAAMAAAAMAAAABQAAAAQAAAAFAAAADQAA
AAQAAAANAAAADgAAAAQAAAAOAAAADwAAAAUAAAAMAAAAEAAAAAUAAAAQAAAAEQAAAAUAAAAR
AAAADQAAAAcAAAASAAAAEwAAAAcAAAATAAAAFAAAAAkAAAAVAAAACgAAAAoAAAAVAAAACwAA
AAsAAAAWAAAAEAAAAAsAAAAQAAAADAAAAAsAAAAVAAAAFwAAAAsAAAAXAAAAFgAAAA0AAAAY
AAAAGQAAAA0AAAAZAAAAGgAAAA0AAAAaAAAAGwAAAA0AAAAbAAAADwAAAA0AAAAPAAAADgAA
AA0AAAARAAAAGAAAAA8AAAAcAAAAHQAAAA8AAAAbAAAAHAAAABAAAAAWAAAAHgAAABAAAAAe
AAAAHwAAABAAAAAfAAAAEQAAABEAAAAfAAAAIAAAABEAAAAgAAAAGAAAABIAAAAhAAAAIgAA
ABIAAAAiAAAAIwAAABIAAAAjAAAAEwAAABMAAAAjAAAAJAAAABMAAAAkAAAAJQAAABMAAAAl
AAAAFAAAABQAAAAlAAAAJgAAABUAAAAnAAAAFwAAABYAAAAXAAAAKAAAABYAAAAoAAAAOQAA
ABYAAAA5AAAANwAAABYAAAA3AAAANQAAABYAAAA1AAAANAAAABYAAAA0AAAAMgAAABYAAAAy
AAAAMAAAABYAAAAwAAAALwAAABYAAAAvAAAALgAAABYAAAAuAAAALQAAABYAAAAtAAAALAAA
ABYAAAAsAAAAKwAAABYAAAArAAAAKgAAABYAAAAqAAAAKQAAABYAAAApAAAAGgAAABYAAAAa
AAAAGQAAABYAAAAZAAAAGAAAABYAAAAYAAAAIAAAABYAAAAgAAAAHwAAABYAAAAfAAAAHgAA
ABcAAAAnAAAAKAAAABoAAAApAAAAGwAAABsAAAApAAAAKgAAABsAAAAqAAAAHAAAABwAAAAq
AAAAKwAAABwAAAArAAAALAAAABwAAAAsAAAAHQAAAB0AAAAsAAAALQAAAB0AAAAtAAAALgAA
AB0AAAAuAAAAIQAAACEAAAAuAAAALwAAACEAAAAvAAAAIgAAACIAAAAwAAAAMQAAACIAAAAx
AAAAIwAAACIAAAAvAAAAMAAAACMAAAAxAAAAMgAAACMAAAAyAAAAMwAAACMAAAAzAAAAJAAA
ACQAAAAzAAAANAAAACQAAAA0AAAANQAAACQAAAA1AAAAJQAAACUAAAA1AAAANgAAACUAAAA2
AAAANwAAACUAAAA3AAAAJgAAACYAAAA3AAAAOAAAADAAAAAyAAAAMQAAADIAAAA0AAAAMwAA
ADUAAAA3AAAANgAAADcAAAA5AAAAOAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAA
AAAAAAAAAAAAgD8OAQAABAAAAFC69D7gaCpAZo84PlCZ+z6hKClAIhg4Pig8AT9kMihAiKiz
PVC69D7gaCpA0gQwPld73j7gaCpAmEGPPiYf5z4m2idADA+bPqRBFj9VERhA4Cq3PrldJz9i
phZA6A3ePRO18z7gaCpAiKizPcZIIz9bpRhAiKizPTQr3D7gaCpADoKRPiMk1D7gaCpAgDmY
PkUy5D6v+iZA7mejPlP/Cj9kIBVACm3nPo7cDz/1vBVAimHaPmf6Ij/OQAVAiPoJP9pkND9z
C+Y/lSAiP1A5ND+LMQdAls1aPhdQPz/Qzeo/iKizPVw+Jj+ArRZAiKizPfZYVL7gaCpAiKiz
PYGMyj7gaCpAjo2ePjmJ2j4uACZAChCwPnQnET/25wFAuqsiP7/9Fz89EQJAkFIeP8/9HD+q
+gJAFqAXP1SQLz8/O+M/hEIuPzviMz8/O+M/YFknPyvBNT8/O+M/yEUjP/trQT/VPOs/dSmF
PrkIQj8/O+M/iKizPSDkPz/mM+k/iKizPWJXwr7k3RZAiKizPcJqcr7gaCpADjwFPoCfvT7g
aCpALG+mPtLoyz7/MSZA89i1PnPeGz9Ybv8/YJ8hP5ZZqT7gaCpAtqKvPhAPxj4etQNATmUu
PwkpBD/ibuU/Q+BAP5qmEj8/O+M/Qco7P+gbRD8/O+M/AEV8PhpkF78/O+M/iKizPe+Xy76K
ixdANPU5PpSPEr9/Wew/iKizPYi1ab7gaCpA4M0QPj2RBD7gaCpAojrOPjPX6T0PEwRAG24+
PxgiBj8/O+M/SX9BP2hPPr3OXeU/bcVcPxldFL8/O+M/8zV+Prs2EL+QIOw/DIN9PmElFb+q
euc/iKizPXJxvb7qoRVAya12PrtQBr9SyOs/EPXNPtLWBb8Y3+s/V1PQPnS0/76XtOw/WDvn
PqqP7r4Xiu0/mmMAPzZsW77gaCpAWmkgPga3pz3gaCpAborKPrq4pD3gaCpAnWzKPmwExr2f
be0/05tTP6QS/D0/O+M/wklUP8TtxL3deug/8rZWPxqoxL0/O+M/rG5ZP7DKsL0/O+M/VEla
P1zpdr0/O+M/4npcP0NUCr8/O+M/NK/RPqzy2b4yL+4/uGcMPwl+CL8a3uY/fN7QPpkOCr8/
O+M/4yjTPrXyB7/g9OY/hWTTPjzoBb8/O+M/UpzmPqghAr/C1ec/u83qPlwg+r4/O+M/wHkD
PzBk876ltug/Zm0CP0Cf574/O+M/AwkQP26r5r5Gz+M/CwQQP0Ye375KZOk/LqgOPwivk7zb
+SlAsUi3PujBSbzgaCpAY3q3Pg4j2zzgaCpAtXTBPhlnxb6FmO4/1eAVP1zYyr4o1uk/FEQY
P3jwtL4/O+M/+5knP0IC076GTOQ/jOAZPwumBL8/O+M/1wHsPrI95b4/O+M/8FoRP+jp1L4/
O+M/Xf4ZP6sFzb4/O+M/0IYdPxACAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAA
AAgAAAAAAAAACAAAABQAAAAAAAAAFAAAACEAAAAAAAAAIQAAAC0AAAAAAAAALQAAADoAAAAA
AAAAOgAAAFAAAAAAAAAAUAAAAFEAAAAAAAAAUQAAADwAAAAAAAAAPAAAADsAAAAAAAAAOwAA
AC4AAAAAAAAALgAAACUAAAAAAAAAJQAAACIAAAAAAAAAIgAAABUAAAAAAAAAFQAAAAsAAAAA
AAAACwAAAAoAAAAAAAAACgAAAAQAAAAAAAAABAAAAAEAAAABAAAABAAAAAUAAAABAAAABQAA
AAYAAAABAAAABgAAAAcAAAABAAAABwAAAAIAAAACAAAACAAAAAMAAAACAAAABwAAAAkAAAAC
AAAACQAAABMAAAACAAAAEwAAABIAAAACAAAAEgAAAB8AAAACAAAAHwAAAB4AAAACAAAAHgAA
ACoAAAACAAAAKgAAADQAAAACAAAANAAAACwAAAACAAAALAAAACAAAAACAAAAIAAAABQAAAAC
AAAAFAAAAAgAAAAEAAAACgAAAAUAAAAFAAAACgAAAAsAAAAFAAAACwAAAAwAAAAFAAAADAAA
AA0AAAAFAAAADQAAAA4AAAAFAAAADgAAAAYAAAAGAAAADgAAAA8AAAAGAAAADwAAABAAAAAG
AAAAEAAAAAcAAAAHAAAAEAAAABEAAAAHAAAAEQAAABIAAAAHAAAAEgAAABMAAAAHAAAAEwAA
AAkAAAALAAAAFQAAABYAAAALAAAAFgAAAAwAAAAMAAAAFgAAAA0AAAANAAAAFwAAABgAAAAN
AAAAGAAAABkAAAANAAAAGQAAAA4AAAANAAAAFgAAABcAAAAOAAAAGQAAAA8AAAAPAAAAGQAA
ABoAAAAPAAAAGgAAABsAAAAPAAAAGwAAABAAAAAQAAAAGwAAABwAAAAQAAAAHAAAABEAAAAR
AAAAHAAAAB0AAAARAAAAHQAAAB4AAAARAAAAHgAAAB8AAAARAAAAHwAAABIAAAAUAAAAIAAA
ACEAAAAVAAAAIgAAABYAAAAWAAAAIgAAACMAAAAWAAAAIwAAABcAAAAXAAAAJAAAABgAAAAX
AAAAIwAAACUAAAAXAAAAJQAAACYAAAAXAAAAJgAAACcAAAAXAAAAJwAAACQAAAAYAAAAJAAA
ABkAAAAZAAAAJAAAABoAAAAaAAAAJAAAACcAAAAaAAAAJwAAACgAAAAaAAAAKAAAADAAAAAa
AAAAMAAAAD4AAAAaAAAAPgAAAEIAAAAaAAAAQgAAAEEAAAAaAAAAQQAAAEAAAAAaAAAAQAAA
AFQAAAAaAAAAVAAAAFkAAAAaAAAAWQAAAFgAAAAaAAAAWAAAAFcAAAAaAAAAVwAAAEwAAAAa
AAAATAAAAEoAAAAaAAAASgAAAFYAAAAaAAAAVgAAAEgAAAAaAAAASAAAAEYAAAAaAAAARgAA
AEMAAAAaAAAAQwAAADIAAAAaAAAAMgAAACoAAAAaAAAAKgAAAB4AAAAaAAAAHgAAACkAAAAa
AAAAKQAAABwAAAAaAAAAHAAAABsAAAAcAAAAKQAAAB0AAAAdAAAAKQAAAB4AAAAgAAAAKwAA
ACEAAAAgAAAALAAAACsAAAAhAAAAKwAAAC0AAAAiAAAAJQAAACMAAAAlAAAALgAAACYAAAAm
AAAALgAAAC8AAAAmAAAALwAAACcAAAAnAAAAMAAAACgAAAAnAAAALwAAADEAAAAnAAAAMQAA
ADAAAAAqAAAAMgAAADMAAAAqAAAAMwAAADQAAAArAAAANQAAAC0AAAArAAAALAAAADMAAAAr
AAAAMwAAADYAAAArAAAANgAAADcAAAArAAAANwAAADgAAAArAAAAOAAAADkAAAArAAAAOQAA
ADUAAAAsAAAANAAAADMAAAAtAAAANQAAADoAAAAuAAAAOwAAAC8AAAAvAAAAOwAAADwAAAAv
AAAAPAAAAD0AAAAvAAAAPQAAADEAAAAwAAAAMQAAAD4AAAAxAAAAPQAAAD8AAAAxAAAAPwAA
AEAAAAAxAAAAQAAAAEEAAAAxAAAAQQAAAEIAAAAxAAAAQgAAAD4AAAAyAAAAQwAAADMAAAAz
AAAAQwAAADYAAAA1AAAAOQAAAEQAAAA1AAAARAAAADoAAAA2AAAARQAAADcAAAA2AAAAQwAA
AEUAAAA3AAAARQAAAEYAAAA3AAAARgAAAEcAAAA3AAAARwAAAEgAAAA3AAAASAAAAEkAAAA3
AAAASQAAADgAAAA4AAAASQAAAEoAAAA4AAAASgAAAEsAAAA4AAAASwAAADkAAAA5AAAASwAA
AEwAAAA5AAAATAAAAE0AAAA5AAAATQAAAE4AAAA5AAAATgAAAEQAAAA6AAAATwAAAFAAAAA6
AAAARAAAAE8AAAA8AAAAUQAAAD0AAAA9AAAAUQAAAFAAAAA9AAAAUAAAAFIAAAA9AAAAUgAA
AFMAAAA9AAAAUwAAAFQAAAA9AAAAVAAAAD8AAAA/AAAAVAAAAEAAAABDAAAARgAAAEUAAABE
AAAATgAAAFUAAABEAAAAVQAAAFMAAABEAAAAUwAAAFIAAABEAAAAUgAAAE8AAABGAAAASAAA
AEcAAABIAAAAVgAAAEkAAABJAAAAVgAAAEoAAABKAAAATAAAAEsAAABMAAAAVwAAAE0AAABN
AAAAVwAAAE4AAABOAAAAVwAAAFgAAABOAAAAWAAAAFUAAABPAAAAUgAAAFAAAABTAAAAVQAA
AFkAAABTAAAAWQAAAFQAAABVAAAAWAAAAFkAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAA
AAAAAAAAAAAAAAAAAIA/YAAAAAQAAADYzWw/X5UpwNO+vb/YzWw/d7AUwOTSnr/YzWw/PPoi
wJR0ub9Q7Z8//2rivxZGmr/F3bA/jMQiwOnOub8JsHc/X5UpwBK6vb9DwtE/X5UpwAAgGLmW
9bA/gOAUwAAgGLnYzWw/l/AIwJhPmr/DR6w/+7IBwAAgGLld4as/fAUAwAAgGLnYzWw//2ri
vzJLlL9LBqc//2riv6Z5mb8mXbg/ucEiwDz4t796z7I/X5UpwCDkvL8ptdI/X5UpwMBNxbyB
ybc//2rivwAgGLnYzWw/8PDov9PZlL+x6aw/WFz9vwAgGLl7fro//2rivw0kjL+GX7o/X5Up
wCzsur8ffLQ/X5UpwMd2vL9/Lb4/jMQiwJL0sr9bWMA/X5UpwLzQtb/MFtM/X5UpwDCLF73m
btU/X5UpwOB2/b17l7s//2riv9XOhb+VpLo//2riv6uQi78lJcM/X5UpwOLsrr+9jMI/X5Up
wLxysL9BqdI/X5UpwJl8qr48lso/X5UpwMmMZ7+0AAAAAAAAAAEAAAAIAAAAAAAAAAgAAAAR
AAAAAAAAABEAAAALAAAAAAAAAAsAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAEAAAAAAAA
AAQAAAAFAAAAAAAAAAUAAAAOAAAAAAAAAA4AAAAVAAAAAAAAABUAAAAUAAAAAAAAABQAAAAX
AAAAAAAAABcAAAAdAAAAAAAAAB0AAAAcAAAAAAAAABwAAAAfAAAAAAAAAB8AAAAeAAAAAAAA
AB4AAAAZAAAAAAAAABkAAAAYAAAAAAAAABgAAAAPAAAAAAAAAA8AAAAGAAAAAAAAAAYAAAAH
AAAAAAAAAAcAAAABAAAAAQAAAAcAAAAJAAAAAQAAAAkAAAAKAAAAAQAAAAoAAAAIAAAAAgAA
AAsAAAADAAAAAwAAAAwAAAAEAAAAAwAAAAsAAAAQAAAAAwAAABAAAAAaAAAAAwAAABoAAAAb
AAAAAwAAABsAAAATAAAAAwAAABMAAAAMAAAABAAAAA0AAAAOAAAABAAAAA4AAAAFAAAABAAA
AAwAAAANAAAABgAAAA8AAAAQAAAABgAAABAAAAASAAAABgAAABIAAAAKAAAABgAAAAoAAAAJ
AAAABgAAAAkAAAAHAAAACAAAAAoAAAARAAAACgAAABIAAAALAAAACgAAAAsAAAARAAAACwAA
ABIAAAAQAAAADAAAABMAAAANAAAADQAAABQAAAAVAAAADQAAABUAAAAOAAAADQAAABMAAAAW
AAAADQAAABYAAAAXAAAADQAAABcAAAAUAAAADwAAABgAAAAQAAAAEAAAABgAAAAZAAAAEAAA
ABkAAAAaAAAAEwAAABsAAAAcAAAAEwAAABwAAAAdAAAAEwAAAB0AAAAXAAAAEwAAABcAAAAW
AAAAGQAAAB4AAAAaAAAAGgAAAB4AAAAfAAAAGgAAAB8AAAAcAAAAGgAAABwAAAAbAAAAEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP7EAAAAEAAAA6VqHPwAAAADg
Hfs9T0CNPwAAAAB0JUE/i46iP3omub48B20/4wGcPzgVyr7gHfs97paSP7Y8Qr/gHfs9AAAA
AAAAAAB7a5Y/wSONPwAAAADHWU8/psahP4NNur6cMX8/vMuiP9Uiz76As3E/BtedPxv+B7/g
Hfs98tKdPygbB7/gHfs91JicP11n377gHfs9HgONPwAAAACWzlM/yimTP8CeSL/gHfs9AAAA
AP5qYr/y76o/AAAAABT+ub0PYJk/mKK6PZszeb40sJ8/fnwMPo3bdL7iNqA/SBmfPQCQtbjq
cJc/YIfoPAAAAACMypY/pl2eP4rq3r6Soos/SeehP95J0L4O44E/X0GKPwAAAACCkWI/7FyJ
PwAAAAAGWGY/BSuEPwAAAACxN3M/GquiPzVQ6L4EenU/7meYP/5qYr/gHfs94DiiP4Yq/r5G
XXc/ANBDO/5qYr+GG6s/AAAAAE9yBL8+DaQ/AAAAABjqzr0+s5k/+PPKPbiQAb+DiaU/gIcb
PfN+f77gBZ8/DHMfP30XT74O/5Q/RJlFPgAAAAAsi5Y/cJL3PQAAAACE/5c/ypMXPv5qYr/W
xK0/ljh/Px3W475SSpU/WOGTPQAAAAAcXZc/tLKBP/5qYr87Gpo/v1GGP/5qYr9Ue5Y//caJ
P/5qYr+YlpM/GtGPP/5qYr92R4s/H96gPysk/77xt4Q/npGhP+Vr6b5awoM/8r+CPwAAAACK
EHY/Trx0PwAAAAA2O4A/n5IiPwAAAADofY0/NbVxP/5qYr/K3J0/g7iXP/5qYr+IHUE/gPCW
O/5qYr9yI6s/AAAAAIIGBL9SBaQ/AAAAAKxzgr4eh54/MCo8PczZAr+Iu6Q/dA0DPv5qYr+7
aa0/lPMdP/5qYr+4DqU/cOSSP/5qYr/jWYI/MANOPf5qYr9O/as/kFqfPf5qYr8GgKw/VgEA
AAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAACwAAAAAAAAALAAAACgAAAAAAAAAK
AAAACQAAAAAAAAAJAAAAGgAAAAAAAAAaAAAADQAAAAAAAAANAAAABAAAAAAAAAAEAAAABQAA
AAAAAAAFAAAAEwAAAAAAAAATAAAAJgAAAAAAAAAmAAAAIwAAAAAAAAAjAAAAIgAAAAAAAAAi
AAAALwAAAAAAAAAvAAAALgAAAAAAAAAuAAAALQAAAAAAAAAtAAAAGAAAAAAAAAAYAAAAFwAA
AAAAAAAXAAAAFgAAAAAAAAAWAAAADAAAAAAAAAAMAAAABgAAAAAAAAAGAAAAAQAAAAEAAAAG
AAAAAgAAAAIAAAAHAAAACAAAAAIAAAAIAAAACQAAAAIAAAAJAAAACgAAAAIAAAAKAAAACwAA
AAIAAAALAAAAAwAAAAIAAAAGAAAADAAAAAIAAAAMAAAABwAAAAQAAAANAAAADgAAAAQAAAAO
AAAABQAAAAUAAAAOAAAAHQAAAAUAAAAdAAAAMwAAAAUAAAAzAAAANAAAAAUAAAA0AAAAHgAA
AAUAAAAeAAAADwAAAAUAAAAPAAAAEAAAAAUAAAAQAAAAEQAAAAUAAAARAAAAEgAAAAUAAAAS
AAAAEwAAAAcAAAAUAAAAFQAAAAcAAAAVAAAACAAAAAcAAAAMAAAAFgAAAAcAAAAWAAAAFwAA
AAcAAAAXAAAAGAAAAAcAAAAYAAAAFAAAAAgAAAAVAAAAGQAAAAgAAAAZAAAACQAAAAkAAAAZ
AAAAGwAAAAkAAAAbAAAAGgAAAA0AAAAaAAAADgAAAA4AAAAcAAAAHQAAAA4AAAAaAAAAMQAA
AA4AAAAxAAAAOAAAAA4AAAA4AAAAKgAAAA4AAAAqAAAAKQAAAA4AAAApAAAAKAAAAA4AAAAo
AAAAJwAAAA4AAAAnAAAAMAAAAA4AAAAwAAAANwAAAA4AAAA3AAAAJAAAAA4AAAAkAAAANgAA
AA4AAAA2AAAAOgAAAA4AAAA6AAAAOQAAAA4AAAA5AAAAMgAAAA4AAAAyAAAAHAAAAA8AAAAe
AAAAEAAAABAAAAAfAAAAEQAAABAAAAAeAAAAIAAAABAAAAAgAAAAHwAAABEAAAAhAAAAIgAA
ABEAAAAiAAAAIwAAABEAAAAjAAAAEgAAABEAAAAfAAAAJAAAABEAAAAkAAAAJQAAABEAAAAl
AAAAIQAAABIAAAAjAAAAJgAAABIAAAAmAAAAEwAAABQAAAAnAAAAKAAAABQAAAAoAAAAKQAA
ABQAAAApAAAAKgAAABQAAAAqAAAAKwAAABQAAAArAAAALAAAABQAAAAsAAAAFQAAABQAAAAY
AAAALQAAABQAAAAtAAAALgAAABQAAAAuAAAALwAAABQAAAAvAAAAJQAAABQAAAAlAAAAMAAA
ABQAAAAwAAAAJwAAABUAAAAsAAAAGQAAABkAAAAsAAAAGwAAABoAAAAbAAAAMQAAABsAAAAs
AAAAKwAAABsAAAArAAAAMQAAABwAAAAyAAAAMwAAABwAAAAzAAAAHQAAAB4AAAA0AAAAIAAA
AB8AAAAgAAAANAAAAB8AAAA0AAAANQAAAB8AAAA1AAAAJAAAACEAAAAvAAAAIgAAACEAAAAl
AAAALwAAACQAAAA3AAAAJQAAACQAAAA1AAAAMwAAACQAAAAzAAAANgAAACUAAAA3AAAAMAAA
ACoAAAA4AAAAKwAAACsAAAA4AAAAMQAAADIAAAA5AAAAMwAAADMAAAA5AAAAOgAAADMAAAA6
AAAANgAAADMAAAA1AAAANAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAA
AAAAgD+QAAAABAAAAEvanT8b/ge/4B37PWLSnT8oGwe/4B37Pe1pmD/+amK/4B37PczZmT/+
amK/AA0HPY2WmT/+amK/JeSTvliHlj/+amK/cI+Bv+ODmj+Z+PO+2Bw6v+SZnD9dZ9++4B37
PRIlkz/Anki/4B37PQAAAAD+amK/8T+BvyQqlD/+amK/c/uIv4jxmT+iKd6+M6c4v5QDnD84
Fcq+4B37PbaSkj+2PEK/4B37PQAAAAAAAAAAO61NvwAAAACoKcW9tPRSvwAAAAAdoEa/fHZ5
vwAAAAAD/w6/KxyBvwiMDD7+amK/4iSDv/oWkT/+amK/teqLv0F0cz+Nm+6+9y+Gv5Illz8y
n9i+6k1Iv8ArmT/p8MS+Nso2v/Vahz8AAAAA4B37PeJtmD9KLa++LPU0v1IwFj4AAAAAgtZR
vwAAAADgRM++cH55vwAAAABYeQK/mpR/v3pkDD+WUc2+YtWCv2TQDT+HL+a+LTOEv/NbDz8M
iwG/sbyFv0+gED9jFg6/sPqGv1A7hz/+amK/1+2Ov0KOjj/+amK/f+eNvyXAaT/AFwy/vgmK
v1CEZT+ac/++R3iIv0edXz8p8+K+Y4uGvyi+WT8AcMq+LNKEvxGYRT8AAAAA7iVXvzj7Vz8A
AAAAuptOv9x/YT8AAAAAOH9Hv/CwZj8AAAAAFz5Dv2RVgj8AAAAA9Dwmv4JshT8AAAAAngVu
vk5zBD8AAAAAtf9avwAAAADSIui+xWF8vwh2ij/+amK/knqOvxmJND8AAAAAdohavxQBAAAA
AAAAAQAAAAcAAAAAAAAABwAAAAwAAAAAAAAADAAAABcAAAAAAAAAFwAAAA0AAAAAAAAADQAA
AAgAAAAAAAAACAAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAUAAAAA
AAAABQAAAAYAAAAAAAAABgAAAAEAAAABAAAABgAAAAcAAAACAAAACAAAAAkAAAACAAAACQAA
ABIAAAACAAAAEgAAACAAAAACAAAAIAAAAC4AAAACAAAALgAAACEAAAACAAAAIQAAABMAAAAC
AAAAEwAAAAoAAAACAAAACgAAAAUAAAACAAAABQAAAAQAAAACAAAABAAAAAMAAAAFAAAACgAA
AAYAAAAGAAAACwAAAAcAAAAGAAAACgAAAAsAAAAHAAAACwAAAAwAAAAIAAAADQAAAA4AAAAI
AAAADgAAAA8AAAAIAAAADwAAABAAAAAIAAAAEAAAAAkAAAAJAAAAEAAAAA8AAAAJAAAADwAA
AA4AAAAJAAAADgAAABoAAAAJAAAAGgAAAC0AAAAJAAAALQAAABsAAAAJAAAAGwAAABEAAAAJ
AAAAEQAAABIAAAAKAAAAEwAAABQAAAAKAAAAFAAAABUAAAAKAAAAFQAAAAsAAAALAAAAFQAA
ABYAAAALAAAAFgAAAAwAAAAMAAAAFgAAABgAAAAMAAAAGAAAABcAAAANAAAAFwAAAA4AAAAO
AAAAFwAAACsAAAAOAAAAKwAAACoAAAAOAAAAKgAAACkAAAAOAAAAKQAAACgAAAAOAAAAKAAA
ACcAAAAOAAAAJwAAACYAAAAOAAAAJgAAAC8AAAAOAAAALwAAACwAAAAOAAAALAAAABkAAAAO
AAAAGQAAABoAAAARAAAAGwAAABwAAAARAAAAHAAAAB0AAAARAAAAHQAAAB4AAAARAAAAHgAA
AB8AAAARAAAAHwAAACAAAAARAAAAIAAAABIAAAATAAAAIQAAABQAAAAUAAAAIQAAACIAAAAU
AAAAIgAAACMAAAAUAAAAIwAAACQAAAAUAAAAJAAAACUAAAAUAAAAJQAAACYAAAAUAAAAJgAA
ACcAAAAUAAAAJwAAACgAAAAUAAAAKAAAACkAAAAUAAAAKQAAACoAAAAUAAAAKgAAABUAAAAV
AAAAKgAAABgAAAAVAAAAGAAAABYAAAAXAAAAGAAAACsAAAAYAAAAKgAAACsAAAAZAAAALAAA
ABoAAAAaAAAALAAAABwAAAAaAAAAHAAAAC0AAAAbAAAALQAAABwAAAAcAAAALAAAACUAAAAc
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
AAAAGAAAAC4AAAAvAAAAGAAAAC8AAAAZAAAAGQAAAC8AAAAaAAAAGgAAAC8AAAAwAAAAGgAA
ADAAAAAxAAAAGgAAADEAAAAbAAAAGwAAADEAAAAyAAAAGwAAADIAAAAdAAAAHQAAADIAAAAz
AAAAHQAAADMAAAAeAAAAHgAAADMAAAA0AAAAHgAAADQAAAAgAAAAIAAAADQAAAAhAAAAIQAA
ADQAAAA1AAAAIQAAADUAAAA2AAAAIQAAADYAAAA3AAAAIQAAADcAAAAiAAAAIwAAADYAAAA1
AAAAIwAAADUAAAAkAAAAJAAAADUAAAA0AAAAJAAAADQAAAA4AAAAJAAAADgAAAAlAAAAJQAA
ADgAAAA5AAAAJQAAADkAAAAmAAAAJgAAADkAAAA6AAAAJgAAADoAAAA7AAAAJwAAACgAAAAu
AAAAJwAAAC4AAAAtAAAAKAAAACwAAAAuAAAAKQAAADsAAAA8AAAAKQAAADwAAAAqAAAAKgAA
ADwAAAA9AAAAKgAAAD0AAAArAAAAKwAAAD0AAAAwAAAAKwAAADAAAAAsAAAALAAAADAAAAAv
AAAALAAAAC8AAAAuAAAAMAAAAD0AAAAxAAAAMQAAAD0AAAA+AAAAMQAAAD4AAAAyAAAAMgAA
AD4AAAA/AAAAMgAAAD8AAAAzAAAAMwAAAD8AAAA4AAAAMwAAADgAAAA0AAAAOAAAAD8AAAA5
AAAAOQAAAD8AAAA6AAAAOgAAAD8AAAA+AAAAOgAAAD4AAAA8AAAAOgAAADwAAAA7AAAAPAAA
AD4AAAA9AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP/8AAAAE
AAAA3sBrvwAAAAAAFzg98EtpvwAAAACwCJu+wJprvwAAAACotSI+OfxZv5sfJz8ytK2+Ljhm
vwAAAAA6e9O+VB+OPQAAAAD5q0+/4Hxqv8C7GTyotSI+cMRfvzyjqj6otSI+mF5VvzjmJD9k
q6g9j7NNv7rxcT+yv5i+LDlYv3rtKz8xAbq+VBZdvwAAAABe4QG/0u5Wv74NvT6Wrva+VB+O
PYCHejwo0k6/awx7vgAAAADsEEe/VB+OPcHhkD98vUm/VB+OPXChoj0AUku/+UMZv4DxvT+o
tSI+ii9Tv2ycJT+otSI+U7YZvxm03D+otSI+3kZKv5/Ecz+pf7++Ahcgv01q3T8qMRO+PD1F
vxf4dD8WuNy+frxPv+yQvj7xxwm/HbpXvwAAAACY6wu/BzwJvwAAAADedT6/VB+OPRRUkz9A
f0m/VB+OPSqVHj/3Vi+/VB+OPWU44z8AZRe/C/cVv2U44z+otSI+vrMXv3CH4D+otSI+q0Qc
v2eu3D9+11C+nDEcv2U44z985hK+zDQ8vwL+dT9imfm+PsIxvzD2nz8EYMe+ZHgpv9I0oD+A
6OW+mOIPv3mmnz9uhB6/eUVEv3SLvz6OWBe/Xh5SvwAAAAA7IhW/+a8ZvwAAAAB4fzq/OBuv
vt/ilT8s7zO/C3auvl0Ekz+jazS/VB+OPROZlj88D0m/VB+OPR4s3z/yFhu/aMqIvmU44z/h
dQO/dHwWv7vb2z+5l4W+keYXv2U44z8qHke+bSENv+Xm2j+blaW+JWIJv7Cj3z9upaG+jRn6
vviB4T8dQbi++RTUvqQ94T9ejdu+X6i1vnsE4D9E+fa+8GvwvsVYqD9KQCW/Rj70vruWpT8W
qiW/+IL4vtFioj+NJia/qMf8vpPqnj8+qSa/HnMAv1Zymz98Hye/hjwCvwgzmD+Bjye//awD
v01rlT+h5ie/SjU1vwK5vz4soCK/GHg6vwAAAADTRCe/+aIqvwAAAABxjDK/KHSvvlZEmT+y
OjO/VB+OPTDInT9mxUe/VB+OPcktmj/geUi/VB+OPYZq3j8yxRu/vnSNvrCM3j8MLge/LlWX
vsrn3j9j0gS/nIaRvmU44z+UrwG/WfYSv+ij4D/jzIG+4hkRv2U44z+uIH++oJoGv2U44z8q
Pp6+Xvz7vmU44z+WcrG+CeTSvmU44z8QRte+g/TQvmU44z8kBtm+fh60vmU44z/YEfC+n+Sw
vmU44z+gjPK+sNuuvliipj8a5i+/Ck6vvtbDoz8/rTC/RpqvvsJtoD9JjTG/Rpqvvr7enD9U
bTK/qlMvvwAAAABMRC+/VB+OPfYjoT/sEEe/VB+OPW2FpD+NQ0a/VB+OPfAepD+rYka/8gEA
AAAAAAABAAAABAAAAAAAAAAEAAAACwAAAAAAAAALAAAAGAAAAAAAAAAYAAAAJgAAAAAAAAAm
AAAAPAAAAAAAAAA8AAAAUQAAAAAAAABRAAAAPQAAAAAAAAA9AAAAJwAAAAAAAAAnAAAAGQAA
AAAAAAAZAAAADgAAAAAAAAAOAAAABQAAAAAAAAAFAAAAAgAAAAAAAAACAAAAAwAAAAAAAAAD
AAAAAQAAAAEAAAADAAAABAAAAAIAAAAFAAAABgAAAAIAAAAGAAAAEQAAAAIAAAARAAAAHQAA
AAIAAAAdAAAAHgAAAAIAAAAeAAAAEwAAAAIAAAATAAAAEgAAAAIAAAASAAAABwAAAAIAAAAH
AAAAAwAAAAMAAAAIAAAACQAAAAMAAAAJAAAACgAAAAMAAAAKAAAABAAAAAMAAAAHAAAACAAA
AAQAAAAKAAAADAAAAAQAAAAMAAAACwAAAAUAAAANAAAABgAAAAUAAAAOAAAADwAAAAUAAAAP
AAAAGgAAAAUAAAAaAAAAKgAAAAUAAAAqAAAAQAAAAAUAAABAAAAAPwAAAAUAAAA/AAAAUgAA
AAUAAABSAAAAVAAAAAUAAABUAAAAUwAAAAUAAABTAAAAQQAAAAUAAABBAAAAKwAAAAUAAAAr
AAAAHAAAAAUAAAAcAAAAGwAAAAUAAAAbAAAAEAAAAAUAAAAQAAAADQAAAAYAAAANAAAAEAAA
AAYAAAAQAAAAEQAAAAcAAAASAAAACAAAAAgAAAASAAAAEwAAAAgAAAATAAAACQAAAAkAAAAU
AAAACgAAAAkAAAATAAAAFQAAAAkAAAAVAAAAFAAAAAoAAAAUAAAAFgAAAAoAAAAWAAAADAAA
AAsAAAAMAAAAFwAAAAsAAAAXAAAAGAAAAAwAAAAWAAAAFwAAAA4AAAAZAAAADwAAAA8AAAAZ
AAAAGgAAABAAAAAbAAAAEQAAABEAAAAcAAAAHQAAABEAAAAbAAAAHAAAABMAAAAeAAAAFQAA
ABQAAAAVAAAAHwAAABQAAAAfAAAAFgAAABUAAAAeAAAAHQAAABUAAAAdAAAAIAAAABUAAAAg
AAAAHwAAABYAAAAhAAAAFwAAABYAAAAfAAAAIgAAABYAAAAiAAAAIwAAABYAAAAjAAAAJAAA
ABYAAAAkAAAAIQAAABcAAAAlAAAAJgAAABcAAAAmAAAAGAAAABcAAAAhAAAAJQAAABkAAAAn
AAAAKAAAABkAAAAoAAAAKQAAABkAAAApAAAAKgAAABkAAAAqAAAAGgAAABwAAAArAAAALAAA
ABwAAAAsAAAARAAAABwAAABEAAAATAAAABwAAABMAAAASwAAABwAAABLAAAASgAAABwAAABK
AAAASQAAABwAAABJAAAASAAAABwAAABIAAAARwAAABwAAABHAAAARgAAABwAAABGAAAALgAA
ABwAAAAuAAAAIAAAABwAAAAgAAAAHQAAAB8AAAAtAAAAIgAAAB8AAAAgAAAALgAAAB8AAAAu
AAAALQAAACEAAAAkAAAAJQAAACIAAAAtAAAAIwAAACMAAAAtAAAAJAAAACQAAAAtAAAALwAA
ACQAAAAvAAAAMAAAACQAAAAwAAAAMQAAACQAAAAxAAAAMgAAACQAAAAyAAAAMwAAACQAAAAz
AAAANAAAACQAAAA0AAAANQAAACQAAAA1AAAANgAAACQAAAA2AAAANwAAACQAAAA3AAAAOAAA
ACQAAAA4AAAAOQAAACQAAAA5AAAAOgAAACQAAAA6AAAAOwAAACQAAAA7AAAAJQAAACUAAAA7
AAAAPAAAACUAAAA8AAAAJgAAACcAAAA9AAAAOgAAACcAAAA6AAAAKAAAACgAAAAqAAAAKQAA
ACgAAAA6AAAAPgAAACgAAAA+AAAAPwAAACgAAAA/AAAAQAAAACgAAABAAAAAKgAAACsAAABB
AAAAQgAAACsAAABCAAAALAAAACwAAABCAAAAQwAAACwAAABDAAAARAAAAC0AAAAuAAAARQAA
AC0AAABFAAAALwAAAC4AAABGAAAARQAAAC8AAABFAAAARgAAAC8AAABGAAAAMAAAADAAAABG
AAAARwAAADAAAABHAAAAMQAAADEAAABHAAAASAAAADEAAABIAAAASQAAADEAAABJAAAAMgAA
ADIAAABJAAAASgAAADIAAABKAAAASwAAADIAAABLAAAAMwAAADMAAABLAAAATAAAADMAAABM
AAAARAAAADMAAABEAAAAQwAAADMAAABDAAAANAAAADQAAABCAAAATQAAADQAAABNAAAANQAA
ADQAAABDAAAAQgAAADUAAABNAAAANgAAADYAAABNAAAANwAAADcAAABNAAAAOAAAADgAAABN
AAAAOQAAADkAAABNAAAATgAAADkAAABOAAAATwAAADkAAABPAAAAOgAAADoAAABPAAAAUAAA
ADoAAABQAAAAPgAAADoAAAA9AAAAOwAAADsAAAA9AAAAUQAAADsAAABRAAAAPAAAAD4AAABQ
AAAAUgAAAD4AAABSAAAAPwAAAEEAAABTAAAATQAAAEEAAABNAAAAQgAAAE0AAABTAAAAVAAA
AE0AAABUAAAATgAAAE4AAABUAAAATwAAAE8AAABUAAAAUAAAAFAAAABUAAAAUgAAABAAAAAA
AAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD+9AAAABAAAAAAAAAAXPmO/CF2B
vwAAAABpsdy/nL+IvwAAAABAkbu/1xKcv675Zr4XPmO/P6V/v4Sbjb8XPmO/EBfwPQAAAACM
NeO/sc2JvwAAAABhYcy/6BWbv5giBr/Dws+/JuaWvwRya79v1NK/JCqTvzUiBL+yub6/K1OV
v18DQb8XPmO/YtFyv9nYFb8XPmO/mnB3vwJkjb8XPmO/ZGObvS03mL9bAIO/EBfwPWBlqr+M
NeO/EBfwPYRu2b5kOOO/EmCHv0e49b5kOOO/O4+Hv7KwTr+MNeO/FzqLvygla7+MNeO/6LCK
vzDcfr80xtK/KZeRv2VYa78oLMK/wQyQv5lybr+MNeO/UGyKv7mvSb8XPmO/9Qpxv6Fkfr8U
G8K/myyOv1b9i78XPmO/WceWvgZ+pb8PkLW/d+FAv4L+p7+zDr2/mm8wvxRBn78xkZ6/EBfw
PU6pqL9ikMW/PU1Fv0xUqr+MNeO/AKLZPJiSob9kOOO/ztI0v8XHlb9kOOO/3wRlv3DFib+0
8NG/dhuOv8qGfr+MNeO/r+CHv3/QgL+MNeO/pEqHv4uoUL8XPmO/M6puvxJBib9YN8G/KluK
vys3gr8XPmO/XvYnv6kgkr+tOoq/6nAVv4nCpr8Nkbq/hZVBv5dDgL8XPmO/0t02v6Fkfr8X
PmO/YBc8vwxke78XPmO/8ltDv2xJnr+QsLu/jrFtv27tp788bcC/pjlDv/k9pb+MNeO/rEfy
vhwSn7+4+MC/3t5vv46nn7/DIce/ICdzv1bjn7+Kg8y/06J2v7QYlb+MNeO/AHhov/Tbj7+M
NeO/4od1v7Baib+MNeO/yu6Bv2J4iL+MNeO/1oSCvwRDk79VhNC/VdmIv3//WL8XPmO/TGlq
v7Vgkr+Xv7+/TMOEv7pad78XPmO/2TpLv1DRcr8XPmO/ZkNSv4wlbb8XPmO//cNZv4CImb9a
4b2/QAd8v77Imr98sc6/91mCvz3nX78XPmO/GAZmv2EkZ78XPmO/Ustfv24BAAAAAAAAAQAA
AAUAAAAAAAAABQAAAAYAAAAAAAAABgAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAsAAAAA
AAAACwAAAAoAAAAAAAAACgAAABYAAAAAAAAAFgAAACMAAAAAAAAAIwAAADYAAAAAAAAANgAA
AD0AAAAAAAAAPQAAAD4AAAAAAAAAPgAAADoAAAAAAAAAOgAAADkAAAAAAAAAOQAAADgAAAAA
AAAAOAAAACoAAAAAAAAAKgAAACkAAAAAAAAAKQAAACgAAAAAAAAAKAAAACUAAAAAAAAAJQAA
ABgAAAAAAAAAGAAAAAwAAAAAAAAADAAAAAQAAAAAAAAABAAAAAEAAAABAAAABAAAAAUAAAAC
AAAABgAAAAcAAAACAAAABwAAAAgAAAACAAAACAAAAAkAAAACAAAACQAAAAoAAAACAAAACgAA
AAsAAAACAAAACwAAAAMAAAAEAAAADAAAAA0AAAAEAAAADQAAABsAAAAEAAAAGwAAAA4AAAAE
AAAADgAAAAUAAAAFAAAADwAAABAAAAAFAAAAEAAAABEAAAAFAAAAEQAAAAYAAAAFAAAADgAA
AA8AAAAGAAAAEQAAAAcAAAAHAAAAEQAAABIAAAAHAAAAEgAAAAgAAAAIAAAAEwAAABQAAAAI
AAAAFAAAAAkAAAAIAAAAEgAAABUAAAAIAAAAFQAAABMAAAAJAAAAFAAAAAoAAAAKAAAAFAAA
ABcAAAAKAAAAFwAAABYAAAAMAAAAGAAAAA0AAAANAAAAGAAAABkAAAANAAAAGQAAABoAAAAN
AAAAGgAAABsAAAAOAAAAGwAAABoAAAAOAAAAGgAAABwAAAAOAAAAHAAAAB0AAAAOAAAAHQAA
AB4AAAAOAAAAHgAAAA8AAAAPAAAAHgAAAB8AAAAPAAAAHwAAABAAAAAQAAAAFQAAABIAAAAQ
AAAAEgAAABEAAAAQAAAAHwAAABUAAAATAAAAIAAAABcAAAATAAAAFwAAABQAAAATAAAAFQAA
ACEAAAATAAAAIQAAACIAAAATAAAAIgAAACAAAAAVAAAAHwAAACEAAAAWAAAAFwAAACMAAAAX
AAAAIAAAACQAAAAXAAAAJAAAACMAAAAYAAAAJQAAACYAAAAYAAAAJgAAABkAAAAZAAAAJwAA
ABoAAAAZAAAAJgAAACUAAAAZAAAAJQAAACgAAAAZAAAAKAAAACkAAAAZAAAAKQAAACoAAAAZ
AAAAKgAAACsAAAAZAAAAKwAAACcAAAAaAAAAJwAAACwAAAAaAAAALAAAABwAAAAcAAAAHgAA
AC0AAAAcAAAALQAAAB0AAAAcAAAALAAAAC4AAAAcAAAALgAAAC8AAAAcAAAALwAAADAAAAAc
AAAAMAAAAB4AAAAdAAAALQAAAB4AAAAeAAAAMAAAADEAAAAeAAAAMQAAAB8AAAAfAAAAMQAA
ADIAAAAfAAAAMgAAADMAAAAfAAAAMwAAADQAAAAfAAAANAAAACIAAAAfAAAAIgAAACEAAAAg
AAAANQAAACQAAAAgAAAAIgAAADQAAAAgAAAANAAAADUAAAAjAAAAJAAAADYAAAAkAAAANQAA
ADcAAAAkAAAANwAAADYAAAAnAAAAKwAAACwAAAAqAAAAOAAAACsAAAArAAAALgAAACwAAAAr
AAAAOAAAADkAAAArAAAAOQAAADoAAAArAAAAOgAAADsAAAArAAAAOwAAAC4AAAAuAAAAOwAA
AC8AAAAvAAAAOwAAADAAAAAwAAAAOwAAADwAAAAwAAAAPAAAADEAAAAxAAAAPAAAADIAAAAy
AAAAPAAAADMAAAAzAAAAPAAAADUAAAAzAAAANQAAADQAAAA1AAAAPAAAADcAAAA2AAAANwAA
AD0AAAA3AAAAPAAAADsAAAA3AAAAOwAAAD0AAAA6AAAAPgAAADsAAAA7AAAAPgAAAD0AAAAQ
AAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/VwAAAAQAAAAAAAAAx8JA
wIhMyj+DEB+/M5g/wL7Vwj8AAAAAxh9awFgnyT8AAAAArYwpwD0Hnj+Qrvu8rYwpwIF7nj8W
Jg+/rYwpwLRSmz/jBG2/rYwpwLAVmD8C+Wy/O+5AwAYJuz8C+Wy/rAxbwDrtsz8AAAAAMnBb
wBSzyD8AAAAAmmdgwAC7kjt8EbG9uCVgwAC7kjvjBG2/WCM2wMBXqT+bQTC/UytgwAC7kjsC
+Wy/CH5gwAC7kjvjBG2/pYpgwECQ6DwC+Wy/2TVcwBQosz8AAAAAV1tewFylxj8AAAAANQph
wJZyQz8C+Wy/MwNhwChFZz4C+Wy/YVVgwORDrD8C+Wy/Wf9ewASLrz8C+Wy/dRlewCJhsT8C
+Wy/cyphwCDjpT8C+Wy/6LhgwPbGqT8AAAAA/HxewAeHxj8AAAAAJ31hwOdZuz8AAAAAs7Rg
wHKmwT8AAAAAqphgwCnowT+iAAAAAAAAAAEAAAACAAAAAAAAAAIAAAAJAAAAAAAAAAkAAAAR
AAAAAAAAABEAAAAZAAAAAAAAABkAAAAcAAAAAAAAABwAAAAbAAAAAAAAABsAAAAaAAAAAAAA
ABoAAAASAAAAAAAAABIAAAAKAAAAAAAAAAoAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAAF
AAAAAAAAAAUAAAABAAAAAQAAAAUAAAAGAAAAAQAAAAYAAAAHAAAAAQAAAAcAAAAIAAAAAQAA
AAgAAAACAAAAAgAAAAgAAAAJAAAAAwAAAAoAAAALAAAAAwAAAAsAAAAGAAAAAwAAAAYAAAAF
AAAAAwAAAAUAAAAEAAAABgAAAAwAAAAHAAAABgAAAAsAAAANAAAABgAAAA0AAAAOAAAABgAA
AA4AAAAPAAAABgAAAA8AAAAMAAAABwAAAAwAAAAIAAAACAAAAAwAAAAQAAAACAAAABAAAAAJ
AAAACQAAABAAAAARAAAACgAAABIAAAATAAAACgAAABMAAAAOAAAACgAAAA4AAAANAAAACgAA
AA0AAAALAAAADAAAAA8AAAAUAAAADAAAABQAAAAVAAAADAAAABUAAAAWAAAADAAAABYAAAAQ
AAAADgAAABMAAAAPAAAADwAAABMAAAAXAAAADwAAABcAAAAYAAAADwAAABgAAAAUAAAAEAAA
ABYAAAAZAAAAEAAAABkAAAARAAAAEgAAABoAAAATAAAAEwAAABoAAAAXAAAAFAAAABgAAAAb
AAAAFAAAABsAAAAVAAAAFQAAABsAAAAcAAAAFQAAABwAAAAZAAAAFQAAABkAAAAWAAAAFwAA
ABoAAAAYAAAAGAAAABoAAAAbAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAA
AAAAAACAP3gAAAAEAAAAHK/3PQAAAACMBpg/1DobP6j7nj4wo5I/oMC5PbAfdD3CqJY/oMC5
PQAAAABAoJc/L30iPwAAAACGfo0/SFlOP6LInz7tNY0/cJJMPzCZsD4ifYw/Q41OP3Lnwz4L
+4o/NDAGP2U44z8agUE/rI78PWU44z8qP1Q/oMC5PWU44z/5CFM/AKCHPwAAAACotSI+oMC5
PYex6j5OhoI/7/xGP2pVGT+otSI+XrN0PwAAAAA4PoA/wy9UPwiQuj7zHYo/TMFTP+Zc1D5C
GYk/cMCCPwAAAABRH3Y/FroSP2U44z+Lzjs/hGQkP80wwT+hU0s/S/pCP2U44z906iI+oMC5
PcMQZD9oAWo/5++FPyAAsz2otSI+gEKNPwAAAADnMUE/oMC5Pa0uHj8Zpng/TgtOPyo3xD+o
tSI+ECmEPwAAAACKNXM/WWCJPwAAAADVXmY/iqxWP9/ilT/V/Uo/UGJIP+rTuD+2+z8/BJYv
P2U44z+kRS4/NgMzPw5O3j+gdjA/sR5EP2U44z80OHw+vdROPzWdwj+otSI+AyKNPwAAAAAz
WU8/xEOKPwAAAAAPjmI/hgGNPwAAAAD4zlM/giZGPya/wT854DA/d8c1P2U44z+4UCM/ouYz
P2U44z8Xaic/5AAAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAACwAAAAAAAAAL
AAAAFwAAAAAAAAAXAAAAIgAAAAAAAAAiAAAAJAAAAAAAAAAkAAAAIwAAAAAAAAAjAAAAGwAA
AAAAAAAbAAAAGgAAAAAAAAAaAAAAEQAAAAAAAAARAAAADgAAAAAAAAAOAAAABAAAAAAAAAAE
AAAAAQAAAAEAAAAEAAAABQAAAAEAAAAFAAAABgAAAAEAAAAGAAAABwAAAAEAAAAHAAAACAAA
AAEAAAAIAAAACQAAAAEAAAAJAAAAAgAAAAIAAAAJAAAACgAAAAIAAAAKAAAAFQAAAAIAAAAV
AAAAGAAAAAIAAAAYAAAADAAAAAIAAAAMAAAAAwAAAAMAAAAMAAAADQAAAAMAAAANAAAACwAA
AAQAAAAOAAAABQAAAAUAAAAPAAAAEAAAAAUAAAAQAAAABwAAAAUAAAAHAAAABgAAAAUAAAAO
AAAAEQAAAAUAAAARAAAADwAAAAcAAAAQAAAACAAAAAgAAAASAAAAHgAAAAgAAAAeAAAAJwAA
AAgAAAAnAAAAJgAAAAgAAAAmAAAAIAAAAAgAAAAgAAAAFAAAAAgAAAAUAAAACgAAAAgAAAAK
AAAACQAAAAgAAAAQAAAAEwAAAAgAAAATAAAAEgAAAAoAAAAUAAAADQAAAAoAAAANAAAAFQAA
AAsAAAAWAAAAFwAAAAsAAAANAAAAGQAAAAsAAAAZAAAAIQAAAAsAAAAhAAAAFgAAAAwAAAAY
AAAADQAAAA0AAAAYAAAAFQAAAA0AAAAUAAAAGQAAAA8AAAARAAAAEAAAABAAAAARAAAAGgAA
ABAAAAAaAAAAGwAAABAAAAAbAAAAHAAAABAAAAAcAAAAHQAAABAAAAAdAAAAEwAAABIAAAAT
AAAAHwAAABIAAAAfAAAAHgAAABMAAAAdAAAAHwAAABQAAAAgAAAAIQAAABQAAAAhAAAAGQAA
ABYAAAAhAAAAFwAAABcAAAAhAAAAIAAAABcAAAAgAAAAIgAAABsAAAAjAAAAHAAAABwAAAAj
AAAAJAAAABwAAAAkAAAAHQAAAB0AAAAlAAAAJgAAAB0AAAAmAAAAJwAAAB0AAAAnAAAAHwAA
AB0AAAAkAAAAJQAAAB4AAAAfAAAAJwAAACAAAAAmAAAAJQAAACAAAAAlAAAAJAAAACAAAAAk
AAAAIgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD+HAAAABAAA
AOQEbb/B7kDA+wq7P+Ennr8MSkLAsBWzP/fFq79dR0rA24+vPxT5qr+7SlvA7sWtP+QEbb8b
DFvAoeyzP+QEbb+4ayrApLWYP+i8j7+4ayrAHh+XP/UGlb+4ayrAxhSWP2RopL97lULASuCw
P5SKq7+8EkPA5qisP2Bxsr90rEPADhOnP3oXuL+2TkTADP+gP+oB7b/6I0vAUGk6P/zeqb+G
Y17AUemrP+QEbb8oNFzAYCizP+QEbb+KfWDAALuSO90wrL+4ayrAALuSOyFXlb+4ayrAuOqV
P6R0mr+4ayrAYd6SP1vxmr+4ayrAi1uSP0Ann7+4ayrAt9SNP+Csn7+4ayrAaOaMP5hvor+4
ayrAus6HP3mvqb+4ayrAioRoP0btuL+4ayrACToUP0Nu5r9Q70rAgO16PMK55L8RKk3AALuS
O8VY2b91CVzAALuSO1Se17/cLl7AhAA4PyQop79SuWDAgnCnP+QEbb8WGF7AIGOxP7Du0r9c
1GDAX5A3P+QEbb/oAWHAaFtnPugyxb9kOGPA8D82P5ZayL/ImGHAALuSOx4b5r8WBkvAALuS
Ozth1b+f417AALuSO6iMo78hrmHA5o+hP+QEbb/XUmDAxUasP+QEbb8+/V7A24+vP3YxzL97
q2LAz942P6kmz7+P7GDAALuSO+QEbb/DKWHAAOilP5kbyb+MimHAALuSO+QEbb/lt2DA8MGp
PwIBAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAA4AAAAA
AAAADgAAAB4AAAAAAAAAHgAAACcAAAAAAAAAJwAAACYAAAAAAAAAJgAAACwAAAAAAAAALAAA
ACoAAAAAAAAAKgAAACAAAAAAAAAAIAAAAA8AAAAAAAAADwAAAAUAAAAAAAAABQAAAAYAAAAA
AAAABgAAAAcAAAAAAAAABwAAAAEAAAABAAAABwAAAAgAAAABAAAACAAAAAIAAAACAAAACAAA
AAkAAAACAAAACQAAAAoAAAACAAAACgAAAAsAAAACAAAACwAAAAwAAAACAAAADAAAAAMAAAAD
AAAADQAAAAQAAAADAAAADAAAAA0AAAAEAAAADQAAAA4AAAAFAAAADwAAABAAAAAFAAAAEAAA
ABgAAAAFAAAAGAAAABcAAAAFAAAAFwAAABYAAAAFAAAAFgAAABUAAAAFAAAAFQAAABQAAAAF
AAAAFAAAABMAAAAFAAAAEwAAABIAAAAFAAAAEgAAABEAAAAFAAAAEQAAAAcAAAAFAAAABwAA
AAYAAAAHAAAAEQAAAAgAAAAIAAAAEQAAABIAAAAIAAAAEgAAAAkAAAAJAAAAEgAAAAoAAAAK
AAAAEgAAABMAAAAKAAAAEwAAABQAAAAKAAAAFAAAAAsAAAALAAAAFAAAAAwAAAAMAAAAFAAA
ABUAAAAMAAAAFQAAABYAAAAMAAAAFgAAABcAAAAMAAAAFwAAABgAAAAMAAAAGAAAABkAAAAM
AAAAGQAAABoAAAAMAAAAGgAAABsAAAAMAAAAGwAAABwAAAAMAAAAHAAAAA0AAAANAAAAHQAA
AB4AAAANAAAAHgAAAA4AAAANAAAAHAAAAB8AAAANAAAAHwAAAB0AAAAPAAAAIAAAACEAAAAP
AAAAIQAAACIAAAAPAAAAIgAAACsAAAAPAAAAKwAAACkAAAAPAAAAKQAAACQAAAAPAAAAJAAA
ABsAAAAPAAAAGwAAABoAAAAPAAAAGgAAACMAAAAPAAAAIwAAABAAAAAQAAAAIwAAABkAAAAQ
AAAAGQAAABgAAAAZAAAAIwAAABoAAAAbAAAAJAAAABwAAAAcAAAAJAAAAB8AAAAdAAAAJQAA
ACYAAAAdAAAAJgAAACcAAAAdAAAAJwAAAB4AAAAdAAAAHwAAACgAAAAdAAAAKAAAACUAAAAf
AAAAJAAAACkAAAAfAAAAKQAAACgAAAAgAAAAKgAAACEAAAAhAAAAKAAAACsAAAAhAAAAKwAA
ACIAAAAhAAAAKgAAACUAAAAhAAAAJQAAACgAAAAlAAAAKgAAACwAAAAlAAAALAAAACYAAAAo
AAAAKQAAACsAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/YAAA
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
P/5qYr+amJM/NRGtP0CzyL+9SKQ/2t2zP0qi3L/heZs/EoexP1Fl4r8SApo/GHOzP1Fl4r/y
WJI/ScuzP1Fl4r/bz5A/I0u3P1Fl4r/XiEs/rLWdP1Fl4r/Fd6w/TMOkP1Fl4r9wLak/Aiin
P+yF3L9c6qo/dp2lP5m+yL8oK6s/k62BP/5qYr+qF5o/ZrtxP/5qYr/z2p0/VPV7P54rg79Y
46E/8P8dP/5qYr9xD6U/Nk2GP/5qYr9De5Y/CqWuP+d03L91N6Q/sDusP1Fl4r/GmKI/bh+m
P1Fl4r/6GKg/tgEAAAAAAAABAAAACAAAAAAAAAAIAAAAFQAAAAAAAAAVAAAAJgAAAAAAAAAm
AAAAFgAAAAAAAAAWAAAACQAAAAAAAAAJAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAA
AAAAAAAEAAAADgAAAAAAAAAOAAAAIQAAAAAAAAAhAAAANwAAAAAAAAA3AAAANgAAAAAAAAA2
AAAARgAAAAAAAABGAAAARAAAAAAAAABEAAAAQwAAAAAAAABDAAAARwAAAAAAAABHAAAAOAAA
AAAAAAA4AAAAIgAAAAAAAAAiAAAADwAAAAAAAAAPAAAABQAAAAAAAAAFAAAAAQAAAAEAAAAG
AAAABwAAAAEAAAAHAAAACAAAAAEAAAAFAAAABgAAAAIAAAAJAAAAAwAAAAMAAAAKAAAACwAA
AAMAAAALAAAADAAAAAMAAAAMAAAAGgAAAAMAAAAaAAAAHQAAAAMAAAAdAAAADQAAAAMAAAAN
AAAABAAAAAMAAAAJAAAAFwAAAAMAAAAXAAAAKAAAAAMAAAAoAAAAPgAAAAMAAAA+AAAAPQAA
AAMAAAA9AAAAPAAAAAMAAAA8AAAAOwAAAAMAAAA7AAAASQAAAAMAAABJAAAASgAAAAMAAABK
AAAAQAAAAAMAAABAAAAAPwAAAAMAAAA/AAAALgAAAAMAAAAuAAAAKQAAAAMAAAApAAAAGAAA
AAMAAAAYAAAACgAAAAQAAAANAAAADgAAAAUAAAAPAAAAEAAAAAUAAAAQAAAABgAAAAYAAAAQ
AAAAEQAAAAYAAAARAAAAEgAAAAYAAAASAAAAEwAAAAYAAAATAAAAFAAAAAYAAAAUAAAABwAA
AAcAAAAUAAAAFQAAAAcAAAAVAAAACAAAAAkAAAAWAAAAEgAAAAkAAAASAAAAFwAAAAoAAAAY
AAAACwAAAAsAAAAZAAAAGgAAAAsAAAAaAAAADAAAAAsAAAAYAAAAGwAAAAsAAAAbAAAAHAAA
AAsAAAAcAAAAGQAAAA0AAAAdAAAAHgAAAA0AAAAeAAAAHwAAAA0AAAAfAAAADgAAAA4AAAAf
AAAAIAAAAA4AAAAgAAAAIQAAAA8AAAAiAAAAIwAAAA8AAAAjAAAAEAAAABAAAAAjAAAAJAAA
ABAAAAAkAAAAJQAAABAAAAAlAAAAEQAAABEAAAAlAAAAEgAAABIAAAAWAAAAJgAAABIAAAAm
AAAAEwAAABIAAAAlAAAAJwAAABIAAAAnAAAAFwAAABMAAAAmAAAAFAAAABQAAAAmAAAAFQAA
ABcAAAAnAAAAKAAAABgAAAApAAAAGwAAABkAAAAcAAAAKgAAABkAAAAqAAAAKwAAABkAAAAr
AAAAGgAAABoAAAArAAAALAAAABoAAAAsAAAAHgAAABoAAAAeAAAAHQAAABsAAAAtAAAAHAAA
ABsAAAApAAAALgAAABsAAAAuAAAALwAAABsAAAAvAAAAMAAAABsAAAAwAAAAMQAAABsAAAAx
AAAALQAAABwAAAAtAAAAMgAAABwAAAAyAAAAMwAAABwAAAAzAAAAKgAAAB4AAAAsAAAANAAA
AB4AAAA0AAAANQAAAB4AAAA1AAAAIAAAAB4AAAAgAAAAHwAAACAAAAA1AAAANgAAACAAAAA2
AAAANwAAACAAAAA3AAAAIQAAACIAAAA4AAAAOQAAACIAAAA5AAAAIwAAACMAAAA5AAAAOgAA
ACMAAAA6AAAAJAAAACQAAAAnAAAAJQAAACQAAAA6AAAAOwAAACQAAAA7AAAAPAAAACQAAAA8
AAAAPQAAACQAAAA9AAAAJwAAACcAAAA9AAAAPgAAACcAAAA+AAAAKAAAACoAAAA0AAAAKwAA
ACoAAAAzAAAANAAAACsAAAA0AAAALAAAAC0AAAAxAAAAMgAAAC4AAAA/AAAALwAAAC8AAAA/
AAAAQAAAAC8AAABAAAAAQQAAAC8AAABBAAAAMAAAADAAAABBAAAAMQAAADEAAABBAAAAQgAA
ADEAAABCAAAAQwAAADEAAABDAAAARAAAADEAAABEAAAARQAAADEAAABFAAAAMwAAADEAAAAz
AAAAMgAAADMAAABFAAAARgAAADMAAABGAAAANgAAADMAAAA2AAAANAAAADQAAAA2AAAANQAA
ADgAAABHAAAAQgAAADgAAABCAAAAOQAAADkAAABCAAAASAAAADkAAABIAAAAOgAAADoAAABI
AAAAOwAAADsAAABIAAAASQAAAEAAAABKAAAAQQAAAEEAAABKAAAASAAAAEEAAABIAAAAQgAA
AEIAAABHAAAAQwAAAEQAAABGAAAARQAAAEgAAABKAAAASQAAABAAAAAAAAAAAAAAAAAAAAAA
AAAAEAAAAAAAAAAAAAAAAAAAAAAAgD+0AAAABAAAAOoB7T+IfUjAgB4fPHje5z/37FnAQJkE
PVUp5z8/4FnAAAAAALa07D9OukjAAAAAAH/J7D8oa0jAAAAAAFC46z9lnkbAAAAAAHk32j/R
AELAXjExP7+jxT+WdUXABSK0P4qJ1z+CKFnAMgwzP+cM5T9+81zAwMATPexI5D/G5lzAAAAA
AKQL5z/+BFrAAAAAAL6Q1T/uOFzAtT4zP6D00j/hairAAAAAAIntwT/Hs0XAXre8P9KTwj9M
d1vA0tK0P80CpT+HnCnArM2bP0LWpD+HnCnA2kGcPxGu3z+iPF/AAMAfPf6dwD9YdV7Allm0
P9UgvD9/lWDArtmyPzXe3j8WLV/AAAAAALfI0T+HnCnAAAAAAMvLvj+GpFvA9lO9P2P/oD+H
nCnAyumjP1ajoD+HnCnA61ikP0czuz9BvEXA3tHDPzIv2T/WJWDAgCskPV5c2D8eGWDAAAAA
AIn/vD/9o17AtHW8PzbzuD98vmDAOvm5PyhRtj9XQ2HAPMKwP+QEbT9c7mHAAAAAAOQEbT+H
nCnAJEKyP6kFuD9hv1vAyizEP48bmj+HnCnAdrOqP0h6sj/bkUXAlFHIP/O9sz/ZY2HAInu2
P+QEbT+PA2LAkB0rPVWhtj8EvF7AZt/CP54TsD/7cWHAsCa6Pwq1sz9F0mDA2DO/P+QEbT/0
4kLAmGfGPwAbqT/8NUXA3pTJP0dAbT+HnCnAJEKyP7JJrz8ku1vArlvIP4hlkT+HnCnA6xmv
P8M1iD+HnCnAZNGwP1hAqz/7cWHAjGa8P+QEbT9W2WDA4uu3P/5qrj+aul7AeL3GP+DxrD9F
0mDAKmbCP+QEbT8A2VrAILDEP3rkpT9JoFvA5DTJP3cjpT8yXmHA4um8P1AypT+ou2DA3AzD
P+QEbT/hFGDABB6+P5R5pT8poV7AhofHP+QEbT/xD1zAbgnEP+QEbT9b4l3AMsvCP1wBAAAA
AAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAA
AAYAAAAAAAAABgAAAAcAAAAAAAAABwAAAAgAAAAAAAAACAAAAAEAAAABAAAACQAAAAoAAAAB
AAAACgAAAAsAAAABAAAACwAAAAIAAAABAAAACAAAAAwAAAABAAAADAAAAAkAAAACAAAACwAA
AAoAAAACAAAACgAAABUAAAACAAAAFQAAABwAAAACAAAAHAAAACAAAAACAAAAIAAAABYAAAAC
AAAAFgAAAA0AAAACAAAADQAAAAUAAAACAAAABQAAAAQAAAACAAAABAAAAAMAAAAFAAAADQAA
AAYAAAAGAAAADQAAAAcAAAAHAAAADgAAAA8AAAAHAAAADwAAAAgAAAAHAAAADQAAABAAAAAH
AAAAEAAAABEAAAAHAAAAEQAAAA4AAAAIAAAADwAAAAwAAAAJAAAAEgAAAAoAAAAJAAAADAAA
ABMAAAAJAAAAEwAAABQAAAAJAAAAFAAAABIAAAAKAAAAEgAAABUAAAAMAAAADwAAABMAAAAN
AAAAFgAAABAAAAAOAAAAFwAAAA8AAAAOAAAAEQAAABgAAAAOAAAAGAAAABkAAAAOAAAAGQAA
ABoAAAAOAAAAGgAAABcAAAAPAAAAFwAAABMAAAAQAAAAFgAAACEAAAAQAAAAIQAAACwAAAAQ
AAAALAAAAC8AAAAQAAAALwAAAC4AAAAQAAAALgAAACMAAAAQAAAAIwAAABkAAAAQAAAAGQAA
ABgAAAAQAAAAGAAAABEAAAASAAAAGwAAABwAAAASAAAAHAAAABUAAAASAAAAFAAAABsAAAAT
AAAAFwAAAB0AAAATAAAAHQAAAB4AAAATAAAAHgAAABQAAAAUAAAAHgAAAB8AAAAUAAAAHwAA
ABsAAAAWAAAAIAAAACEAAAAXAAAAGgAAACIAAAAXAAAAIgAAAB0AAAAZAAAAIwAAABoAAAAa
AAAAJAAAACIAAAAaAAAAIwAAACQAAAAbAAAAHwAAACUAAAAbAAAAJQAAACYAAAAbAAAAJgAA
ABwAAAAcAAAAJgAAACAAAAAdAAAAIgAAACcAAAAdAAAAJwAAAB4AAAAeAAAAKAAAACUAAAAe
AAAAJQAAAB8AAAAeAAAAJwAAACkAAAAeAAAAKQAAACgAAAAgAAAAJgAAADEAAAAgAAAAMQAA
ADgAAAAgAAAAOAAAADsAAAAgAAAAOwAAADoAAAAgAAAAOgAAADQAAAAgAAAANAAAACoAAAAg
AAAAKgAAACEAAAAhAAAAKgAAACsAAAAhAAAAKwAAACwAAAAiAAAAJAAAAC0AAAAiAAAALQAA
ACcAAAAjAAAALgAAACQAAAAkAAAAKwAAAC0AAAAkAAAALgAAAC8AAAAkAAAALwAAACsAAAAl
AAAAKAAAACYAAAAmAAAAKAAAADAAAAAmAAAAMAAAADEAAAAnAAAALQAAADIAAAAnAAAAMgAA
ADMAAAAnAAAAMwAAACkAAAAoAAAAKQAAADMAAAAoAAAAMwAAADAAAAAqAAAANAAAADUAAAAq
AAAANQAAACsAAAArAAAANQAAAC0AAAArAAAALwAAACwAAAAtAAAANQAAADIAAAAwAAAANgAA
ADEAAAAwAAAAMwAAADcAAAAwAAAANwAAADYAAAAxAAAANgAAADcAAAAxAAAANwAAADgAAAAy
AAAANQAAADkAAAAyAAAAOQAAADMAAAAzAAAAOQAAADcAAAA0AAAAOgAAADUAAAA1AAAAOgAA
ADkAAAA3AAAAOwAAADgAAAA3AAAAOQAAADsAAAA5AAAAOgAAADsAAAAQAAAAAAAAAAAAAAAA
AAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/rgAAAAQAAADhyuw/GmpIwAAAAAD6tus/T6BG
wAAAAAAUuew/OrlIwAAAAAA4tN0/+GlDwEpsLb/R0cU/tOctwAbPsb9uv9A/c4otwFTHSb8b
89I/uWoqwAAAAAB41No/rhAuwMwOAr4OKec/Q99ZwAAAAABuwdg/7+BYwCCtJ7+Td8M/ztJY
wGvvpL9G4MI/W+0twLaruL+QVsA/MZgpwM7Vtb89isI/MZgpwG53sL+KIcM/MZgpwEf0rr8j
lco/MZgpwHyIZ7/OtNI/MZgpwGD+w7yIwdE/MZgpwAAAAADwqNI/MZgpwAeDqr4Ea9U/MZgp
wLAo/b29E9M/MZgpwACgFr1kC+c/agVawAAAAAAnatY/4uxbwHqxJr+rCsI/WzZcwKB/o79S
rr4/JchbwNDUqb8gy78/HlxYwMC4q7/Ix7w/mPEtwATQvb/6qrs/MZgpwOnSub/H02w///Bh
wAAAAADH02w/MZgpwIDBvb9QSeQ/+eZcwAAAAACRZdE/vD9ewNS1Jb8eDr4/XklfwFWIob+c
crs/WvBewMSKpr8gF7c/rRNfwAwKqr9mvLg/A/tbwNCJrr/3O7k/DJZYwGDTsL+MM7U/P/ct
wP3Qv7+de7Q/MZgpwGx4vL+9W7o/MZgpwJjrur8AkLE/pG9ZwDDZsr+0XLI/7E9hwCszpb/U
lbg/PzJhwOGVn7+QXNg/qBdgwAAAAADH02w/4/phwBq9qr+Osnc/MZgpwKi8vb/H02w/q3Yt
wEe5wL/b394/HC1fwAAAAACG87Y/u/lgwGC0or/qubQ/gw1hwPSEpL+JErI/j59fwChwq79n
xbE/ab9cwMBtsL/H02w/OE1bwOMtuL/H02w/IwEuwOcewb9o0LI/MZgpwLrnvL/H02w/bXVe
wFwBtr/H02w/8+VgwCAXsb/H02w/FVZfwDZ+tL9QAQAAAAAAAAEAAAAGAAAAAAAAAAYAAAAR
AAAAAAAAABEAAAAcAAAAAAAAABwAAAArAAAAAAAAACsAAAAvAAAAAAAAAC8AAAAeAAAAAAAA
AB4AAAAVAAAAAAAAABUAAAAIAAAAAAAAAAgAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAE
AAAAAAAAAAQAAAAFAAAAAAAAAAUAAAABAAAAAQAAAAUAAAAHAAAAAQAAAAcAAAAGAAAAAgAA
AAgAAAAJAAAAAgAAAAkAAAADAAAAAwAAAAkAAAAKAAAAAwAAAAoAAAAEAAAABAAAAAsAAAAM
AAAABAAAAAwAAAANAAAABAAAAA0AAAAOAAAABAAAAA4AAAAFAAAABAAAAAoAAAALAAAABQAA
AA8AAAAHAAAABQAAAA4AAAAPAAAABgAAABAAAAARAAAABgAAAAcAAAAQAAAABwAAAA8AAAAS
AAAABwAAABIAAAATAAAABwAAABMAAAAUAAAABwAAABQAAAAQAAAACAAAABUAAAAJAAAACQAA
ABYAAAAXAAAACQAAABcAAAAKAAAACQAAABUAAAAWAAAACgAAABcAAAAYAAAACgAAABgAAAAZ
AAAACgAAABkAAAALAAAACwAAABoAAAAbAAAACwAAABsAAAAMAAAACwAAABkAAAAaAAAADAAA
ABsAAAAnAAAADAAAACcAAAAmAAAADAAAACYAAAA2AAAADAAAADYAAAAtAAAADAAAAC0AAAAd
AAAADAAAAB0AAAARAAAADAAAABEAAAAQAAAADAAAABAAAAAUAAAADAAAABQAAAATAAAADAAA
ABMAAAASAAAADAAAABIAAAAPAAAADAAAAA8AAAAOAAAADAAAAA4AAAANAAAAEQAAAB0AAAAc
AAAAFQAAAB4AAAAWAAAAFgAAAB8AAAAgAAAAFgAAACAAAAAXAAAAFgAAAB4AAAAfAAAAFwAA
ACAAAAAhAAAAFwAAACEAAAAYAAAAGAAAACEAAAAiAAAAGAAAACIAAAAjAAAAGAAAACMAAAAZ
AAAAGQAAACMAAAAkAAAAGQAAACQAAAAaAAAAGgAAACUAAAAmAAAAGgAAACYAAAAnAAAAGgAA
ACcAAAAbAAAAGgAAACQAAAAoAAAAGgAAACgAAAAlAAAAHAAAACkAAAAqAAAAHAAAACoAAAAr
AAAAHAAAAB0AAAAuAAAAHAAAAC4AAAA1AAAAHAAAADUAAAA0AAAAHAAAADQAAAA3AAAAHAAA
ADcAAAA5AAAAHAAAADkAAAA4AAAAHAAAADgAAAAsAAAAHAAAACwAAAApAAAAHQAAAC0AAAAu
AAAAHgAAAC8AAAAfAAAAHwAAACoAAAAgAAAAHwAAAC8AAAAqAAAAIAAAACoAAAAhAAAAIQAA
ACoAAAAwAAAAIQAAADAAAAAxAAAAIQAAADEAAAAiAAAAIgAAADEAAAApAAAAIgAAACkAAAAy
AAAAIgAAADIAAAAjAAAAIwAAADIAAAAzAAAAIwAAADMAAAAkAAAAJAAAADMAAAAoAAAAJQAA
ACgAAAA0AAAAJQAAADQAAAA1AAAAJQAAADUAAAA2AAAAJQAAADYAAAAmAAAAKAAAADMAAAA3
AAAAKAAAADcAAAA0AAAAKQAAADEAAAAqAAAAKQAAACwAAAA4AAAAKQAAADgAAAAyAAAAKgAA
ADEAAAAwAAAAKgAAAC8AAAArAAAALQAAADYAAAAuAAAALgAAADYAAAA1AAAAMgAAADgAAAA5
AAAAMgAAADkAAAA3AAAAMgAAADcAAAAzAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAA
AAAAAAAAAAAAAACAP6sAAAAEAAAABABDP2U44z+otSI+3sI6P2U44z99nQi/TB+OPWU44z/I
aRe/0/5GP2pVGT+otSI+VNZOPzWdwj+otSI+76xJP45CxD8McQ6/6tYsP2U44z+IUh6/2tI/
P/Ifwj9ECSe/DAUQPmU44z8m5hu/TB+OPYZq3j8mxRu/TB+OPSqVHj9oVi+/TB+OPXChoj3M
VUu/TB+OPYCHejzG0E6/TB+OPQAAAACRqk+/WaSHPwAAAACotSI+LvGFPyAAsz2otSI+l2iF
PwAAAADQBW6+BFiCPwAAAABFQya/D2UlP2U44z8T0yW/Wks2PyvywD9cpzW/sigFP2U44z/O
Ty+/uKoJPtRk3j+FnB+/TB+OPW2FpD+jQUa/kCwWPgAAAAD01FG/TB+OPcHhkD+cvEm/JhMW
PkR7kD8uwk2/s4X1PjTLkT9Csl6/bK9mPwAAAAB2PUO/gPQ+P45ynD/urDm/QPogP2U44z+l
tym/bAsiP7ll4j8M0im/71onP6T3vz9FpEG/frEvP3phnD/WDEa/RgMIP2U44z8AwC+/7PwH
PwIW4j+YzjC/+9j4PliLpT/gZly/TB+OPfAepD+iYka/0XYEPwAAAAB8Alu/TB+OPRRUkz82
gUm/Op32PiwLmD+paV6/dhH2PmevlD91nl6/qUgPP2AGnD9DLl6/TYg0PwAAAABKklq/rX9h
PwAAAAAHhUe/SioVP2U44z8CGy+//VIXP9NMvz88aUa/HfEUP85f4T//hTC/iP5XPwAAAAD6
m06/rswJP2U44z/N0y+/OE34PnOhoj+r/ly/TB+OPfYjoT/UFEe/TB+OPROZlj9qCkm/sjX3
Pkarmz9DDV6/a6FFPwAAAAC2MVe/Ks73Pl9Lnz/dj12/TB+OPcktmj84eUi/TB+OPTDInT+g
zUe/SgEAAAAAAAABAAAABgAAAAAAAAAGAAAAEgAAAAAAAAASAAAAHQAAAAAAAAAdAAAALAAA
AAAAAAAsAAAAMAAAAAAAAAAwAAAAIQAAAAAAAAAhAAAAFAAAAAAAAAAUAAAACAAAAAAAAAAI
AAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAADgAAAAAAAAAOAAAADwAAAAAAAAAPAAAABAAA
AAAAAAAEAAAABQAAAAAAAAAFAAAAAQAAAAEAAAAFAAAABwAAAAEAAAAHAAAABgAAAAIAAAAI
AAAACQAAAAIAAAAJAAAAFgAAAAIAAAAWAAAAJAAAAAIAAAAkAAAAMgAAAAIAAAAyAAAAOAAA
AAIAAAA4AAAANwAAAAIAAAA3AAAAMwAAAAIAAAAzAAAAJgAAAAIAAAAmAAAAGAAAAAIAAAAY
AAAADQAAAAIAAAANAAAADAAAAAIAAAAMAAAACwAAAAIAAAALAAAACgAAAAIAAAAKAAAAAwAA
AAMAAAAKAAAACwAAAAMAAAALAAAADAAAAAMAAAAMAAAADQAAAAMAAAANAAAADgAAAAQAAAAP
AAAABQAAAAUAAAAPAAAAEAAAAAUAAAAQAAAAEQAAAAUAAAARAAAABwAAAAYAAAAHAAAAEwAA
AAYAAAATAAAAEgAAAAcAAAARAAAAEwAAAAgAAAAUAAAAFQAAAAgAAAAVAAAACQAAAAkAAAAV
AAAAFgAAAA0AAAAXAAAAJQAAAA0AAAAlAAAAKgAAAA0AAAAqAAAANQAAAA0AAAA1AAAALwAA
AA0AAAAvAAAAKwAAAA0AAAArAAAAGwAAAA0AAAAbAAAAEQAAAA0AAAARAAAAEAAAAA0AAAAQ
AAAADgAAAA0AAAAYAAAAGQAAAA0AAAAZAAAAGgAAAA0AAAAaAAAAFwAAAA4AAAAQAAAADwAA
ABEAAAAbAAAAHAAAABEAAAAcAAAAEwAAABIAAAATAAAAHgAAABIAAAAeAAAAHQAAABMAAAAf
AAAAHgAAABMAAAAcAAAAIAAAABMAAAAgAAAAHwAAABQAAAAhAAAAIgAAABQAAAAiAAAAFQAA
ABUAAAAjAAAAFgAAABUAAAAiAAAAIwAAABYAAAAjAAAAJAAAABcAAAAaAAAAJQAAABgAAAAm
AAAAJwAAABgAAAAnAAAAGQAAABkAAAAnAAAAKAAAABkAAAAoAAAAGgAAABoAAAAoAAAAKQAA
ABoAAAApAAAAKgAAABoAAAAqAAAAJQAAABsAAAArAAAAHAAAABwAAAArAAAAIAAAAB0AAAAe
AAAAHwAAAB0AAAAfAAAALAAAAB8AAAAtAAAALgAAAB8AAAAuAAAALAAAAB8AAAAgAAAAKQAA
AB8AAAApAAAALQAAACAAAAArAAAALwAAACAAAAAvAAAAKQAAACEAAAAwAAAAIgAAACIAAAAw
AAAALAAAACIAAAAsAAAALgAAACIAAAAuAAAAIwAAACMAAAAxAAAAMgAAACMAAAAyAAAAJAAA
ACMAAAAuAAAALQAAACMAAAAtAAAAKQAAACMAAAApAAAAMQAAACYAAAAzAAAANAAAACYAAAA0
AAAAJwAAACcAAAA0AAAAKQAAACcAAAApAAAAKAAAACkAAAAvAAAANQAAACkAAAA1AAAAKgAA
ACkAAAA0AAAANgAAACkAAAA2AAAAMQAAADEAAAA2AAAANwAAADEAAAA3AAAAOAAAADEAAAA4
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
AAAAAQAAAAYAAAAHAAAAAQAAAAcAAAAFAAAAAgAAAAUAAAAIAAAAAgAAAAgAAAAJAAAAAgAA
AAkAAAADAAAAAwAAAAkAAAATAAAAAwAAABMAAAASAAAAAwAAABIAAAAdAAAAAwAAAB0AAAAc
AAAAAwAAABwAAAAeAAAAAwAAAB4AAAAVAAAAAwAAABUAAAAKAAAAAwAAAAoAAAALAAAAAwAA
AAsAAAAMAAAAAwAAAAwAAAANAAAAAwAAAA0AAAAOAAAAAwAAAA4AAAAEAAAABAAAAA4AAAAN
AAAABAAAAA0AAAAMAAAABAAAAAwAAAALAAAABAAAAAsAAAAKAAAABAAAAAoAAAAPAAAABQAA
AAcAAAAJAAAABQAAAAkAAAAIAAAABgAAABAAAAAHAAAABwAAABAAAAARAAAABwAAABEAAAAS
AAAABwAAABIAAAATAAAABwAAABMAAAAUAAAABwAAABQAAAAJAAAACQAAABQAAAATAAAACgAA
ABUAAAAWAAAACgAAABYAAAAXAAAACgAAABcAAAAPAAAADwAAABcAAAAYAAAAEAAAABkAAAAR
AAAAEQAAABkAAAAaAAAAEQAAABoAAAAbAAAAEQAAABsAAAAcAAAAEQAAABwAAAAdAAAAEQAA
AB0AAAASAAAAFQAAAB4AAAAfAAAAFQAAAB8AAAAXAAAAFQAAABcAAAAWAAAAFwAAAB8AAAAg
AAAAFwAAACAAAAAhAAAAFwAAACEAAAAYAAAAGgAAACIAAAAbAAAAGwAAACAAAAAeAAAAGwAA
AB4AAAAcAAAAGwAAACIAAAAjAAAAGwAAACMAAAAgAAAAHgAAACAAAAAfAAAAIAAAACMAAAAh
AAAA</SharedString>
		<SharedString md5="1kMP4TZ9K1BFkGKq9kU9jw==">Q1NHUEhTBwAAAAI5i4RDQyE1PcJxkD0+fOK9ViMNRS7SIMJ1wFRD43XfRDqakkOlI8dEEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP0UAAAAEAAAALD5zPzDdAb5+
ZKXAuNJ1PwAAgDXkGaXAzBSLPwAAgDXPTqTATckZQAAAgDXue4HACB8PQHziNcBZSRrAwCKN
v8Wc5r/ArWDA3NZQPwAAgDWZRKLAavk/QAAAgDWUsiDARDpgQG3Vn7+YAp6+7LhHP4D2kMC4
LbG+9ZbGvwAAgDUArk/AXrgDwAAjZcAAAAAA5oNRwCADo78AAAAAbipOQAAAgDU6F1a/JfBa
QKEek78AAAAAdUtOQLe2xr8AAAAAKBxEP0xakMAAAAAA7BFHQAAAgDXwykK+WCJAv6q1g8AA
AAAAFhtXwCRrO78AAAAAJ01JwAAAgDVAog+/d+tEQAAAgDUAAAAA14ZMwAAAgDUAAAAAfgAA
AAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAF
AAAABgAAAAAAAAAGAAAAAQAAAAEAAAAGAAAACgAAAAEAAAAKAAAAFAAAAAEAAAAUAAAAFgAA
AAEAAAAWAAAAFQAAAAEAAAAVAAAAEQAAAAEAAAARAAAADQAAAAEAAAANAAAABwAAAAEAAAAH
AAAAAwAAAAEAAAADAAAAAgAAAAMAAAAHAAAACAAAAAMAAAAIAAAABAAAAAQAAAAIAAAACQAA
AAQAAAAJAAAABQAAAAUAAAAKAAAABgAAAAUAAAAJAAAACwAAAAUAAAALAAAADAAAAAUAAAAM
AAAACgAAAAcAAAANAAAACAAAAAgAAAAOAAAADwAAAAgAAAAPAAAAEAAAAAgAAAAQAAAACQAA
AAgAAAANAAAAEQAAAAgAAAARAAAADgAAAAkAAAAQAAAAEgAAAAkAAAASAAAACwAAAAoAAAAM
AAAAEwAAAAoAAAATAAAAFAAAAAsAAAASAAAAEAAAAAsAAAAQAAAADwAAAAsAAAAPAAAADgAA
AAsAAAAOAAAAFQAAAAsAAAAVAAAAFgAAAAsAAAAWAAAAEwAAAAsAAAATAAAADAAAAA4AAAAR
AAAAFQAAABMAAAAWAAAAFAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAA
AAAAgD8tAAAABAAAAPa+TcCAD6m9AAAAAJjgW8CAD6m9/5IdQHljOcCQ86k/ACD5OXwO4L+N
53VAAAAAAESTRkCAD6m9AAAAALSMW8CAD6m9+/YkQEuuwL9aTIhA2LGlPznao741FotAAAAA
AO0KDEAEiE9AAAAAABmNC0DdYBJAyr8CQPPoK0CAD6m9TfIfQFJQWMCAD6m9XuMoQFZ8Qr/W
rRZAKF9zQPcMNb+AD6m9n1qbQAD4kryAD6m9V+WNQE4AAAAAAAAAAQAAAAIAAAAAAAAAAgAA
AAMAAAAAAAAAAwAAAAcAAAAAAAAABwAAAAgAAAAAAAAACAAAAAQAAAAAAAAABAAAAAoAAAAA
AAAACgAAAA4AAAAAAAAADgAAAA0AAAAAAAAADQAAAAsAAAAAAAAACwAAAAUAAAAAAAAABQAA
AAEAAAABAAAABQAAAAYAAAABAAAABgAAAAMAAAABAAAAAwAAAAIAAAADAAAABgAAAAcAAAAE
AAAACAAAAAkAAAAEAAAACQAAAAoAAAAFAAAACwAAAAwAAAAFAAAADAAAAAYAAAAGAAAADAAA
AAkAAAAGAAAACQAAAAcAAAAHAAAACQAAAAgAAAAJAAAADAAAAA0AAAAJAAAADQAAAA4AAAAJ
AAAADgAAAAoAAAALAAAADQAAAAwAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAA
AAAAAAAAAIA/RQAAAAQAAABnCFfA5n87vwAAAAA7tU3AgA+pvQAAAAAacFHAMgGjvwAAAAAq
L2DAm9ibv6hjvj5kwV3AIDcmvgh2JkDAzVvAgA+pvR6fHUD9g0ZAgA+pvQAAAABItwPA/yNl
wAAAAABHLgnA0lJvwAjcoD4ltpW/10BLwGJ7lkByHTG/SEFPv35kpUBlSljAgA+pvQDsKEAH
gFvAgA+pvQYBJUA8llvAgA+pvdYwI0Cq4itAgA+pve7zH0B25lpAPiKTvwAAAABWNUC/JLSD
wAAAAABYOkQ/sF6QwAAAAADpWCU/AHmLwM06NkCbOS9AMFiovhr/IkAobJW8gA+pvaTijUDv
GjW/gA+pvb5Wm0COUk5AvK/GvwAAAAB+AAAAAAAAAAEAAAAGAAAAAAAAAAYAAAAPAAAAAAAA
AA8AAAAWAAAAAAAAABYAAAARAAAAAAAAABEAAAAQAAAAAAAAABAAAAAHAAAAAAAAAAcAAAAC
AAAAAAAAAAIAAAADAAAAAAAAAAMAAAABAAAAAQAAAAMAAAAEAAAAAQAAAAQAAAAFAAAAAQAA
AAUAAAANAAAAAQAAAA0AAAAMAAAAAQAAAAwAAAALAAAAAQAAAAsAAAAVAAAAAQAAABUAAAAU
AAAAAQAAABQAAAAOAAAAAQAAAA4AAAAGAAAAAgAAAAcAAAADAAAAAwAAAAcAAAAIAAAAAwAA
AAgAAAAEAAAABAAAAAgAAAAJAAAABAAAAAkAAAAKAAAABAAAAAoAAAALAAAABAAAAAsAAAAM
AAAABAAAAAwAAAANAAAABAAAAA0AAAAFAAAABgAAAA4AAAAPAAAABwAAABAAAAAIAAAACAAA
ABAAAAARAAAACAAAABEAAAASAAAACAAAABIAAAAJAAAACQAAABIAAAAKAAAACgAAABIAAAAT
AAAACgAAABMAAAAOAAAACgAAAA4AAAAUAAAACgAAABQAAAAVAAAACgAAABUAAAALAAAADgAA
ABMAAAAPAAAADwAAABMAAAASAAAADwAAABIAAAAWAAAAEQAAABYAAAASAAAAEAAAAAAAAAAA
AAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPzYAAAAEAAAAHBt2PwAAgDV2HKXAsB1R
PwAAgDVERKLAiSifP2KUWkC2f53AuZUeQA6RpT8+VJnAHA6LPwAAgDWWTaTARJnGvwAAgDWT
rk/AOA8SwHjfO0DX2TPAZ7EMQIT2kECsETDAdjBOQAAAgDVkPla/yvQ/QAAAgDURtyDA4MwZ
QAAAgDWagYHAmU1JwAAAgDXkpQ+/Uo9MwAAAgDUAAAAA7Gs5wFzhqT8AAAAAhSvgv3zhdUAA
AAAAIvWjvv4Si0AAAAAAuAwMQPiCT0AAAAAAZvtEQADAaDoAAAAAYAAAAAAAAAABAAAAAgAA
AAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAACgAAAAAAAAAKAAAACQAAAAAAAAAJ
AAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAACwAAAAAAAAALAAAABQAAAAAAAAAFAAAAAQAA
AAEAAAAFAAAABgAAAAEAAAAGAAAAAgAAAAIAAAAHAAAAAwAAAAIAAAAGAAAABwAAAAMAAAAI
AAAACQAAAAMAAAAJAAAACgAAAAMAAAAKAAAABAAAAAMAAAAHAAAACAAAAAUAAAALAAAABgAA
AAYAAAALAAAADAAAAAYAAAAMAAAADQAAAAYAAAANAAAADgAAAAYAAAAOAAAABwAAAAcAAAAO
AAAADwAAAAcAAAAPAAAAEAAAAAcAAAAQAAAACAAAAAgAAAAQAAAAEQAAAAgAAAARAAAADAAA
AAwAAAARAAAAEAAAAAwAAAAQAAAADwAAAAwAAAAPAAAADgAAAAwAAAAOAAAADQAAAA==</SharedString>
		<SharedString md5="+qv2o0HSW+htH+ALwYQpiw==">Q1NHUEhTAAAAAEJMT0NL</SharedString>
	</SharedStrings>
</roblox>